
app02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08010000  08010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008354  080101a0  080101a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  080184f8  080184f8  000094f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801893c  0801893c  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801893c  0801893c  0000993c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018944  08018944  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018944  08018944  00009944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018948  08018948  00009948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0801894c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001d4  08018b20  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08018b20  0000a3e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009446  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd8  00000000  00000000  0001364a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  00015228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000756  00000000  00000000  00015bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016af9  00000000  00000000  0001631e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cde7  00000000  00000000  0002ce17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000896ec  00000000  00000000  00039bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c32ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c04  00000000  00000000  000c3330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000c6f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101a0 <__do_global_dtors_aux>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	4c05      	ldr	r4, [pc, #20]	@ (80101b8 <__do_global_dtors_aux+0x18>)
 80101a4:	7823      	ldrb	r3, [r4, #0]
 80101a6:	b933      	cbnz	r3, 80101b6 <__do_global_dtors_aux+0x16>
 80101a8:	4b04      	ldr	r3, [pc, #16]	@ (80101bc <__do_global_dtors_aux+0x1c>)
 80101aa:	b113      	cbz	r3, 80101b2 <__do_global_dtors_aux+0x12>
 80101ac:	4804      	ldr	r0, [pc, #16]	@ (80101c0 <__do_global_dtors_aux+0x20>)
 80101ae:	f3af 8000 	nop.w
 80101b2:	2301      	movs	r3, #1
 80101b4:	7023      	strb	r3, [r4, #0]
 80101b6:	bd10      	pop	{r4, pc}
 80101b8:	200001d4 	.word	0x200001d4
 80101bc:	00000000 	.word	0x00000000
 80101c0:	080184dc 	.word	0x080184dc

080101c4 <frame_dummy>:
 80101c4:	b508      	push	{r3, lr}
 80101c6:	4b03      	ldr	r3, [pc, #12]	@ (80101d4 <frame_dummy+0x10>)
 80101c8:	b11b      	cbz	r3, 80101d2 <frame_dummy+0xe>
 80101ca:	4903      	ldr	r1, [pc, #12]	@ (80101d8 <frame_dummy+0x14>)
 80101cc:	4803      	ldr	r0, [pc, #12]	@ (80101dc <frame_dummy+0x18>)
 80101ce:	f3af 8000 	nop.w
 80101d2:	bd08      	pop	{r3, pc}
 80101d4:	00000000 	.word	0x00000000
 80101d8:	200001d8 	.word	0x200001d8
 80101dc:	080184dc 	.word	0x080184dc

080101e0 <memchr>:
 80101e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80101e4:	2a10      	cmp	r2, #16
 80101e6:	db2b      	blt.n	8010240 <memchr+0x60>
 80101e8:	f010 0f07 	tst.w	r0, #7
 80101ec:	d008      	beq.n	8010200 <memchr+0x20>
 80101ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80101f2:	3a01      	subs	r2, #1
 80101f4:	428b      	cmp	r3, r1
 80101f6:	d02d      	beq.n	8010254 <memchr+0x74>
 80101f8:	f010 0f07 	tst.w	r0, #7
 80101fc:	b342      	cbz	r2, 8010250 <memchr+0x70>
 80101fe:	d1f6      	bne.n	80101ee <memchr+0xe>
 8010200:	b4f0      	push	{r4, r5, r6, r7}
 8010202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801020a:	f022 0407 	bic.w	r4, r2, #7
 801020e:	f07f 0700 	mvns.w	r7, #0
 8010212:	2300      	movs	r3, #0
 8010214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010218:	3c08      	subs	r4, #8
 801021a:	ea85 0501 	eor.w	r5, r5, r1
 801021e:	ea86 0601 	eor.w	r6, r6, r1
 8010222:	fa85 f547 	uadd8	r5, r5, r7
 8010226:	faa3 f587 	sel	r5, r3, r7
 801022a:	fa86 f647 	uadd8	r6, r6, r7
 801022e:	faa5 f687 	sel	r6, r5, r7
 8010232:	b98e      	cbnz	r6, 8010258 <memchr+0x78>
 8010234:	d1ee      	bne.n	8010214 <memchr+0x34>
 8010236:	bcf0      	pop	{r4, r5, r6, r7}
 8010238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801023c:	f002 0207 	and.w	r2, r2, #7
 8010240:	b132      	cbz	r2, 8010250 <memchr+0x70>
 8010242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010246:	3a01      	subs	r2, #1
 8010248:	ea83 0301 	eor.w	r3, r3, r1
 801024c:	b113      	cbz	r3, 8010254 <memchr+0x74>
 801024e:	d1f8      	bne.n	8010242 <memchr+0x62>
 8010250:	2000      	movs	r0, #0
 8010252:	4770      	bx	lr
 8010254:	3801      	subs	r0, #1
 8010256:	4770      	bx	lr
 8010258:	2d00      	cmp	r5, #0
 801025a:	bf06      	itte	eq
 801025c:	4635      	moveq	r5, r6
 801025e:	3803      	subeq	r0, #3
 8010260:	3807      	subne	r0, #7
 8010262:	f015 0f01 	tst.w	r5, #1
 8010266:	d107      	bne.n	8010278 <memchr+0x98>
 8010268:	3001      	adds	r0, #1
 801026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801026e:	bf02      	ittt	eq
 8010270:	3001      	addeq	r0, #1
 8010272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8010276:	3001      	addeq	r0, #1
 8010278:	bcf0      	pop	{r4, r5, r6, r7}
 801027a:	3801      	subs	r0, #1
 801027c:	4770      	bx	lr
 801027e:	bf00      	nop

08010280 <strlen>:
 8010280:	4603      	mov	r3, r0
 8010282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010286:	2a00      	cmp	r2, #0
 8010288:	d1fb      	bne.n	8010282 <strlen+0x2>
 801028a:	1a18      	subs	r0, r3, r0
 801028c:	3801      	subs	r0, #1
 801028e:	4770      	bx	lr

08010290 <__aeabi_drsub>:
 8010290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8010294:	e002      	b.n	801029c <__adddf3>
 8010296:	bf00      	nop

08010298 <__aeabi_dsub>:
 8010298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0801029c <__adddf3>:
 801029c:	b530      	push	{r4, r5, lr}
 801029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80102a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80102a6:	ea94 0f05 	teq	r4, r5
 80102aa:	bf08      	it	eq
 80102ac:	ea90 0f02 	teqeq	r0, r2
 80102b0:	bf1f      	itttt	ne
 80102b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80102b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80102ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80102be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102c2:	f000 80e2 	beq.w	801048a <__adddf3+0x1ee>
 80102c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80102ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80102ce:	bfb8      	it	lt
 80102d0:	426d      	neglt	r5, r5
 80102d2:	dd0c      	ble.n	80102ee <__adddf3+0x52>
 80102d4:	442c      	add	r4, r5
 80102d6:	ea80 0202 	eor.w	r2, r0, r2
 80102da:	ea81 0303 	eor.w	r3, r1, r3
 80102de:	ea82 0000 	eor.w	r0, r2, r0
 80102e2:	ea83 0101 	eor.w	r1, r3, r1
 80102e6:	ea80 0202 	eor.w	r2, r0, r2
 80102ea:	ea81 0303 	eor.w	r3, r1, r3
 80102ee:	2d36      	cmp	r5, #54	@ 0x36
 80102f0:	bf88      	it	hi
 80102f2:	bd30      	pophi	{r4, r5, pc}
 80102f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80102f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80102fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8010300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010304:	d002      	beq.n	801030c <__adddf3+0x70>
 8010306:	4240      	negs	r0, r0
 8010308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8010310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010318:	d002      	beq.n	8010320 <__adddf3+0x84>
 801031a:	4252      	negs	r2, r2
 801031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010320:	ea94 0f05 	teq	r4, r5
 8010324:	f000 80a7 	beq.w	8010476 <__adddf3+0x1da>
 8010328:	f1a4 0401 	sub.w	r4, r4, #1
 801032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010330:	db0d      	blt.n	801034e <__adddf3+0xb2>
 8010332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010336:	fa22 f205 	lsr.w	r2, r2, r5
 801033a:	1880      	adds	r0, r0, r2
 801033c:	f141 0100 	adc.w	r1, r1, #0
 8010340:	fa03 f20e 	lsl.w	r2, r3, lr
 8010344:	1880      	adds	r0, r0, r2
 8010346:	fa43 f305 	asr.w	r3, r3, r5
 801034a:	4159      	adcs	r1, r3
 801034c:	e00e      	b.n	801036c <__adddf3+0xd0>
 801034e:	f1a5 0520 	sub.w	r5, r5, #32
 8010352:	f10e 0e20 	add.w	lr, lr, #32
 8010356:	2a01      	cmp	r2, #1
 8010358:	fa03 fc0e 	lsl.w	ip, r3, lr
 801035c:	bf28      	it	cs
 801035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010362:	fa43 f305 	asr.w	r3, r3, r5
 8010366:	18c0      	adds	r0, r0, r3
 8010368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8010370:	d507      	bpl.n	8010382 <__adddf3+0xe6>
 8010372:	f04f 0e00 	mov.w	lr, #0
 8010376:	f1dc 0c00 	rsbs	ip, ip, #0
 801037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8010382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8010386:	d31b      	bcc.n	80103c0 <__adddf3+0x124>
 8010388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 801038c:	d30c      	bcc.n	80103a8 <__adddf3+0x10c>
 801038e:	0849      	lsrs	r1, r1, #1
 8010390:	ea5f 0030 	movs.w	r0, r0, rrx
 8010394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8010398:	f104 0401 	add.w	r4, r4, #1
 801039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80103a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80103a4:	f080 809a 	bcs.w	80104dc <__adddf3+0x240>
 80103a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80103ac:	bf08      	it	eq
 80103ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80103b2:	f150 0000 	adcs.w	r0, r0, #0
 80103b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80103ba:	ea41 0105 	orr.w	r1, r1, r5
 80103be:	bd30      	pop	{r4, r5, pc}
 80103c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80103c4:	4140      	adcs	r0, r0
 80103c6:	eb41 0101 	adc.w	r1, r1, r1
 80103ca:	3c01      	subs	r4, #1
 80103cc:	bf28      	it	cs
 80103ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80103d2:	d2e9      	bcs.n	80103a8 <__adddf3+0x10c>
 80103d4:	f091 0f00 	teq	r1, #0
 80103d8:	bf04      	itt	eq
 80103da:	4601      	moveq	r1, r0
 80103dc:	2000      	moveq	r0, #0
 80103de:	fab1 f381 	clz	r3, r1
 80103e2:	bf08      	it	eq
 80103e4:	3320      	addeq	r3, #32
 80103e6:	f1a3 030b 	sub.w	r3, r3, #11
 80103ea:	f1b3 0220 	subs.w	r2, r3, #32
 80103ee:	da0c      	bge.n	801040a <__adddf3+0x16e>
 80103f0:	320c      	adds	r2, #12
 80103f2:	dd08      	ble.n	8010406 <__adddf3+0x16a>
 80103f4:	f102 0c14 	add.w	ip, r2, #20
 80103f8:	f1c2 020c 	rsb	r2, r2, #12
 80103fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8010400:	fa21 f102 	lsr.w	r1, r1, r2
 8010404:	e00c      	b.n	8010420 <__adddf3+0x184>
 8010406:	f102 0214 	add.w	r2, r2, #20
 801040a:	bfd8      	it	le
 801040c:	f1c2 0c20 	rsble	ip, r2, #32
 8010410:	fa01 f102 	lsl.w	r1, r1, r2
 8010414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010418:	bfdc      	itt	le
 801041a:	ea41 010c 	orrle.w	r1, r1, ip
 801041e:	4090      	lslle	r0, r2
 8010420:	1ae4      	subs	r4, r4, r3
 8010422:	bfa2      	ittt	ge
 8010424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010428:	4329      	orrge	r1, r5
 801042a:	bd30      	popge	{r4, r5, pc}
 801042c:	ea6f 0404 	mvn.w	r4, r4
 8010430:	3c1f      	subs	r4, #31
 8010432:	da1c      	bge.n	801046e <__adddf3+0x1d2>
 8010434:	340c      	adds	r4, #12
 8010436:	dc0e      	bgt.n	8010456 <__adddf3+0x1ba>
 8010438:	f104 0414 	add.w	r4, r4, #20
 801043c:	f1c4 0220 	rsb	r2, r4, #32
 8010440:	fa20 f004 	lsr.w	r0, r0, r4
 8010444:	fa01 f302 	lsl.w	r3, r1, r2
 8010448:	ea40 0003 	orr.w	r0, r0, r3
 801044c:	fa21 f304 	lsr.w	r3, r1, r4
 8010450:	ea45 0103 	orr.w	r1, r5, r3
 8010454:	bd30      	pop	{r4, r5, pc}
 8010456:	f1c4 040c 	rsb	r4, r4, #12
 801045a:	f1c4 0220 	rsb	r2, r4, #32
 801045e:	fa20 f002 	lsr.w	r0, r0, r2
 8010462:	fa01 f304 	lsl.w	r3, r1, r4
 8010466:	ea40 0003 	orr.w	r0, r0, r3
 801046a:	4629      	mov	r1, r5
 801046c:	bd30      	pop	{r4, r5, pc}
 801046e:	fa21 f004 	lsr.w	r0, r1, r4
 8010472:	4629      	mov	r1, r5
 8010474:	bd30      	pop	{r4, r5, pc}
 8010476:	f094 0f00 	teq	r4, #0
 801047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 801047e:	bf06      	itte	eq
 8010480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8010484:	3401      	addeq	r4, #1
 8010486:	3d01      	subne	r5, #1
 8010488:	e74e      	b.n	8010328 <__adddf3+0x8c>
 801048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801048e:	bf18      	it	ne
 8010490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8010494:	d029      	beq.n	80104ea <__adddf3+0x24e>
 8010496:	ea94 0f05 	teq	r4, r5
 801049a:	bf08      	it	eq
 801049c:	ea90 0f02 	teqeq	r0, r2
 80104a0:	d005      	beq.n	80104ae <__adddf3+0x212>
 80104a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80104a6:	bf04      	itt	eq
 80104a8:	4619      	moveq	r1, r3
 80104aa:	4610      	moveq	r0, r2
 80104ac:	bd30      	pop	{r4, r5, pc}
 80104ae:	ea91 0f03 	teq	r1, r3
 80104b2:	bf1e      	ittt	ne
 80104b4:	2100      	movne	r1, #0
 80104b6:	2000      	movne	r0, #0
 80104b8:	bd30      	popne	{r4, r5, pc}
 80104ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80104be:	d105      	bne.n	80104cc <__adddf3+0x230>
 80104c0:	0040      	lsls	r0, r0, #1
 80104c2:	4149      	adcs	r1, r1
 80104c4:	bf28      	it	cs
 80104c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80104ca:	bd30      	pop	{r4, r5, pc}
 80104cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80104d0:	bf3c      	itt	cc
 80104d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80104d6:	bd30      	popcc	{r4, r5, pc}
 80104d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80104dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80104e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80104e4:	f04f 0000 	mov.w	r0, #0
 80104e8:	bd30      	pop	{r4, r5, pc}
 80104ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80104ee:	bf1a      	itte	ne
 80104f0:	4619      	movne	r1, r3
 80104f2:	4610      	movne	r0, r2
 80104f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80104f8:	bf1c      	itt	ne
 80104fa:	460b      	movne	r3, r1
 80104fc:	4602      	movne	r2, r0
 80104fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010502:	bf06      	itte	eq
 8010504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010508:	ea91 0f03 	teqeq	r1, r3
 801050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8010510:	bd30      	pop	{r4, r5, pc}
 8010512:	bf00      	nop

08010514 <__aeabi_ui2d>:
 8010514:	f090 0f00 	teq	r0, #0
 8010518:	bf04      	itt	eq
 801051a:	2100      	moveq	r1, #0
 801051c:	4770      	bxeq	lr
 801051e:	b530      	push	{r4, r5, lr}
 8010520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010528:	f04f 0500 	mov.w	r5, #0
 801052c:	f04f 0100 	mov.w	r1, #0
 8010530:	e750      	b.n	80103d4 <__adddf3+0x138>
 8010532:	bf00      	nop

08010534 <__aeabi_i2d>:
 8010534:	f090 0f00 	teq	r0, #0
 8010538:	bf04      	itt	eq
 801053a:	2100      	moveq	r1, #0
 801053c:	4770      	bxeq	lr
 801053e:	b530      	push	{r4, r5, lr}
 8010540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 801054c:	bf48      	it	mi
 801054e:	4240      	negmi	r0, r0
 8010550:	f04f 0100 	mov.w	r1, #0
 8010554:	e73e      	b.n	80103d4 <__adddf3+0x138>
 8010556:	bf00      	nop

08010558 <__aeabi_f2d>:
 8010558:	0042      	lsls	r2, r0, #1
 801055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010566:	bf1f      	itttt	ne
 8010568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 801056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8010570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8010574:	4770      	bxne	lr
 8010576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 801057a:	bf08      	it	eq
 801057c:	4770      	bxeq	lr
 801057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8010582:	bf04      	itt	eq
 8010584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8010588:	4770      	bxeq	lr
 801058a:	b530      	push	{r4, r5, lr}
 801058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8010590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8010594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8010598:	e71c      	b.n	80103d4 <__adddf3+0x138>
 801059a:	bf00      	nop

0801059c <__aeabi_ul2d>:
 801059c:	ea50 0201 	orrs.w	r2, r0, r1
 80105a0:	bf08      	it	eq
 80105a2:	4770      	bxeq	lr
 80105a4:	b530      	push	{r4, r5, lr}
 80105a6:	f04f 0500 	mov.w	r5, #0
 80105aa:	e00a      	b.n	80105c2 <__aeabi_l2d+0x16>

080105ac <__aeabi_l2d>:
 80105ac:	ea50 0201 	orrs.w	r2, r0, r1
 80105b0:	bf08      	it	eq
 80105b2:	4770      	bxeq	lr
 80105b4:	b530      	push	{r4, r5, lr}
 80105b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80105ba:	d502      	bpl.n	80105c2 <__aeabi_l2d+0x16>
 80105bc:	4240      	negs	r0, r0
 80105be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80105c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80105c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80105ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80105ce:	f43f aed8 	beq.w	8010382 <__adddf3+0xe6>
 80105d2:	f04f 0203 	mov.w	r2, #3
 80105d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105da:	bf18      	it	ne
 80105dc:	3203      	addne	r2, #3
 80105de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105e2:	bf18      	it	ne
 80105e4:	3203      	addne	r2, #3
 80105e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80105ea:	f1c2 0320 	rsb	r3, r2, #32
 80105ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80105f2:	fa20 f002 	lsr.w	r0, r0, r2
 80105f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80105fa:	ea40 000e 	orr.w	r0, r0, lr
 80105fe:	fa21 f102 	lsr.w	r1, r1, r2
 8010602:	4414      	add	r4, r2
 8010604:	e6bd      	b.n	8010382 <__adddf3+0xe6>
 8010606:	bf00      	nop

08010608 <__aeabi_dmul>:
 8010608:	b570      	push	{r4, r5, r6, lr}
 801060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 801060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010616:	bf1d      	ittte	ne
 8010618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801061c:	ea94 0f0c 	teqne	r4, ip
 8010620:	ea95 0f0c 	teqne	r5, ip
 8010624:	f000 f8de 	bleq	80107e4 <__aeabi_dmul+0x1dc>
 8010628:	442c      	add	r4, r5
 801062a:	ea81 0603 	eor.w	r6, r1, r3
 801062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801063a:	bf18      	it	ne
 801063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010648:	d038      	beq.n	80106bc <__aeabi_dmul+0xb4>
 801064a:	fba0 ce02 	umull	ip, lr, r0, r2
 801064e:	f04f 0500 	mov.w	r5, #0
 8010652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 801065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801065e:	f04f 0600 	mov.w	r6, #0
 8010662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010666:	f09c 0f00 	teq	ip, #0
 801066a:	bf18      	it	ne
 801066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8010674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8010678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 801067c:	d204      	bcs.n	8010688 <__aeabi_dmul+0x80>
 801067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8010682:	416d      	adcs	r5, r5
 8010684:	eb46 0606 	adc.w	r6, r6, r6
 8010688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 801068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8010690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8010694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8010698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 801069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80106a0:	bf88      	it	hi
 80106a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80106a6:	d81e      	bhi.n	80106e6 <__aeabi_dmul+0xde>
 80106a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80106ac:	bf08      	it	eq
 80106ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80106b2:	f150 0000 	adcs.w	r0, r0, #0
 80106b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80106ba:	bd70      	pop	{r4, r5, r6, pc}
 80106bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80106c0:	ea46 0101 	orr.w	r1, r6, r1
 80106c4:	ea40 0002 	orr.w	r0, r0, r2
 80106c8:	ea81 0103 	eor.w	r1, r1, r3
 80106cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80106d0:	bfc2      	ittt	gt
 80106d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80106d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80106da:	bd70      	popgt	{r4, r5, r6, pc}
 80106dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80106e0:	f04f 0e00 	mov.w	lr, #0
 80106e4:	3c01      	subs	r4, #1
 80106e6:	f300 80ab 	bgt.w	8010840 <__aeabi_dmul+0x238>
 80106ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80106ee:	bfde      	ittt	le
 80106f0:	2000      	movle	r0, #0
 80106f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80106f6:	bd70      	pople	{r4, r5, r6, pc}
 80106f8:	f1c4 0400 	rsb	r4, r4, #0
 80106fc:	3c20      	subs	r4, #32
 80106fe:	da35      	bge.n	801076c <__aeabi_dmul+0x164>
 8010700:	340c      	adds	r4, #12
 8010702:	dc1b      	bgt.n	801073c <__aeabi_dmul+0x134>
 8010704:	f104 0414 	add.w	r4, r4, #20
 8010708:	f1c4 0520 	rsb	r5, r4, #32
 801070c:	fa00 f305 	lsl.w	r3, r0, r5
 8010710:	fa20 f004 	lsr.w	r0, r0, r4
 8010714:	fa01 f205 	lsl.w	r2, r1, r5
 8010718:	ea40 0002 	orr.w	r0, r0, r2
 801071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8010720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8010724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010728:	fa21 f604 	lsr.w	r6, r1, r4
 801072c:	eb42 0106 	adc.w	r1, r2, r6
 8010730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010734:	bf08      	it	eq
 8010736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801073a:	bd70      	pop	{r4, r5, r6, pc}
 801073c:	f1c4 040c 	rsb	r4, r4, #12
 8010740:	f1c4 0520 	rsb	r5, r4, #32
 8010744:	fa00 f304 	lsl.w	r3, r0, r4
 8010748:	fa20 f005 	lsr.w	r0, r0, r5
 801074c:	fa01 f204 	lsl.w	r2, r1, r4
 8010750:	ea40 0002 	orr.w	r0, r0, r2
 8010754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801075c:	f141 0100 	adc.w	r1, r1, #0
 8010760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010764:	bf08      	it	eq
 8010766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801076a:	bd70      	pop	{r4, r5, r6, pc}
 801076c:	f1c4 0520 	rsb	r5, r4, #32
 8010770:	fa00 f205 	lsl.w	r2, r0, r5
 8010774:	ea4e 0e02 	orr.w	lr, lr, r2
 8010778:	fa20 f304 	lsr.w	r3, r0, r4
 801077c:	fa01 f205 	lsl.w	r2, r1, r5
 8010780:	ea43 0302 	orr.w	r3, r3, r2
 8010784:	fa21 f004 	lsr.w	r0, r1, r4
 8010788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 801078c:	fa21 f204 	lsr.w	r2, r1, r4
 8010790:	ea20 0002 	bic.w	r0, r0, r2
 8010794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8010798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 801079c:	bf08      	it	eq
 801079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80107a2:	bd70      	pop	{r4, r5, r6, pc}
 80107a4:	f094 0f00 	teq	r4, #0
 80107a8:	d10f      	bne.n	80107ca <__aeabi_dmul+0x1c2>
 80107aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80107ae:	0040      	lsls	r0, r0, #1
 80107b0:	eb41 0101 	adc.w	r1, r1, r1
 80107b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80107b8:	bf08      	it	eq
 80107ba:	3c01      	subeq	r4, #1
 80107bc:	d0f7      	beq.n	80107ae <__aeabi_dmul+0x1a6>
 80107be:	ea41 0106 	orr.w	r1, r1, r6
 80107c2:	f095 0f00 	teq	r5, #0
 80107c6:	bf18      	it	ne
 80107c8:	4770      	bxne	lr
 80107ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80107ce:	0052      	lsls	r2, r2, #1
 80107d0:	eb43 0303 	adc.w	r3, r3, r3
 80107d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80107d8:	bf08      	it	eq
 80107da:	3d01      	subeq	r5, #1
 80107dc:	d0f7      	beq.n	80107ce <__aeabi_dmul+0x1c6>
 80107de:	ea43 0306 	orr.w	r3, r3, r6
 80107e2:	4770      	bx	lr
 80107e4:	ea94 0f0c 	teq	r4, ip
 80107e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80107ec:	bf18      	it	ne
 80107ee:	ea95 0f0c 	teqne	r5, ip
 80107f2:	d00c      	beq.n	801080e <__aeabi_dmul+0x206>
 80107f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80107f8:	bf18      	it	ne
 80107fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80107fe:	d1d1      	bne.n	80107a4 <__aeabi_dmul+0x19c>
 8010800:	ea81 0103 	eor.w	r1, r1, r3
 8010804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010808:	f04f 0000 	mov.w	r0, #0
 801080c:	bd70      	pop	{r4, r5, r6, pc}
 801080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010812:	bf06      	itte	eq
 8010814:	4610      	moveq	r0, r2
 8010816:	4619      	moveq	r1, r3
 8010818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801081c:	d019      	beq.n	8010852 <__aeabi_dmul+0x24a>
 801081e:	ea94 0f0c 	teq	r4, ip
 8010822:	d102      	bne.n	801082a <__aeabi_dmul+0x222>
 8010824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010828:	d113      	bne.n	8010852 <__aeabi_dmul+0x24a>
 801082a:	ea95 0f0c 	teq	r5, ip
 801082e:	d105      	bne.n	801083c <__aeabi_dmul+0x234>
 8010830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010834:	bf1c      	itt	ne
 8010836:	4610      	movne	r0, r2
 8010838:	4619      	movne	r1, r3
 801083a:	d10a      	bne.n	8010852 <__aeabi_dmul+0x24a>
 801083c:	ea81 0103 	eor.w	r1, r1, r3
 8010840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801084c:	f04f 0000 	mov.w	r0, #0
 8010850:	bd70      	pop	{r4, r5, r6, pc}
 8010852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 801085a:	bd70      	pop	{r4, r5, r6, pc}

0801085c <__aeabi_ddiv>:
 801085c:	b570      	push	{r4, r5, r6, lr}
 801085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8010862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801086a:	bf1d      	ittte	ne
 801086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010870:	ea94 0f0c 	teqne	r4, ip
 8010874:	ea95 0f0c 	teqne	r5, ip
 8010878:	f000 f8a7 	bleq	80109ca <__aeabi_ddiv+0x16e>
 801087c:	eba4 0405 	sub.w	r4, r4, r5
 8010880:	ea81 0e03 	eor.w	lr, r1, r3
 8010884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801088c:	f000 8088 	beq.w	80109a0 <__aeabi_ddiv+0x144>
 8010890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8010898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 801089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80108a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80108a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80108a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80108ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80108b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80108b4:	429d      	cmp	r5, r3
 80108b6:	bf08      	it	eq
 80108b8:	4296      	cmpeq	r6, r2
 80108ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80108be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80108c2:	d202      	bcs.n	80108ca <__aeabi_ddiv+0x6e>
 80108c4:	085b      	lsrs	r3, r3, #1
 80108c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80108ca:	1ab6      	subs	r6, r6, r2
 80108cc:	eb65 0503 	sbc.w	r5, r5, r3
 80108d0:	085b      	lsrs	r3, r3, #1
 80108d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80108da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80108de:	ebb6 0e02 	subs.w	lr, r6, r2
 80108e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80108e6:	bf22      	ittt	cs
 80108e8:	1ab6      	subcs	r6, r6, r2
 80108ea:	4675      	movcs	r5, lr
 80108ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80108f0:	085b      	lsrs	r3, r3, #1
 80108f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80108fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80108fe:	bf22      	ittt	cs
 8010900:	1ab6      	subcs	r6, r6, r2
 8010902:	4675      	movcs	r5, lr
 8010904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010908:	085b      	lsrs	r3, r3, #1
 801090a:	ea4f 0232 	mov.w	r2, r2, rrx
 801090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010916:	bf22      	ittt	cs
 8010918:	1ab6      	subcs	r6, r6, r2
 801091a:	4675      	movcs	r5, lr
 801091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010920:	085b      	lsrs	r3, r3, #1
 8010922:	ea4f 0232 	mov.w	r2, r2, rrx
 8010926:	ebb6 0e02 	subs.w	lr, r6, r2
 801092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801092e:	bf22      	ittt	cs
 8010930:	1ab6      	subcs	r6, r6, r2
 8010932:	4675      	movcs	r5, lr
 8010934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010938:	ea55 0e06 	orrs.w	lr, r5, r6
 801093c:	d018      	beq.n	8010970 <__aeabi_ddiv+0x114>
 801093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801095a:	d1c0      	bne.n	80108de <__aeabi_ddiv+0x82>
 801095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010960:	d10b      	bne.n	801097a <__aeabi_ddiv+0x11e>
 8010962:	ea41 0100 	orr.w	r1, r1, r0
 8010966:	f04f 0000 	mov.w	r0, #0
 801096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801096e:	e7b6      	b.n	80108de <__aeabi_ddiv+0x82>
 8010970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010974:	bf04      	itt	eq
 8010976:	4301      	orreq	r1, r0
 8010978:	2000      	moveq	r0, #0
 801097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 801097e:	bf88      	it	hi
 8010980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8010984:	f63f aeaf 	bhi.w	80106e6 <__aeabi_dmul+0xde>
 8010988:	ebb5 0c03 	subs.w	ip, r5, r3
 801098c:	bf04      	itt	eq
 801098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8010992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8010996:	f150 0000 	adcs.w	r0, r0, #0
 801099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801099e:	bd70      	pop	{r4, r5, r6, pc}
 80109a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80109a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80109a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80109ac:	bfc2      	ittt	gt
 80109ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80109b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80109b6:	bd70      	popgt	{r4, r5, r6, pc}
 80109b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80109bc:	f04f 0e00 	mov.w	lr, #0
 80109c0:	3c01      	subs	r4, #1
 80109c2:	e690      	b.n	80106e6 <__aeabi_dmul+0xde>
 80109c4:	ea45 0e06 	orr.w	lr, r5, r6
 80109c8:	e68d      	b.n	80106e6 <__aeabi_dmul+0xde>
 80109ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80109ce:	ea94 0f0c 	teq	r4, ip
 80109d2:	bf08      	it	eq
 80109d4:	ea95 0f0c 	teqeq	r5, ip
 80109d8:	f43f af3b 	beq.w	8010852 <__aeabi_dmul+0x24a>
 80109dc:	ea94 0f0c 	teq	r4, ip
 80109e0:	d10a      	bne.n	80109f8 <__aeabi_ddiv+0x19c>
 80109e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80109e6:	f47f af34 	bne.w	8010852 <__aeabi_dmul+0x24a>
 80109ea:	ea95 0f0c 	teq	r5, ip
 80109ee:	f47f af25 	bne.w	801083c <__aeabi_dmul+0x234>
 80109f2:	4610      	mov	r0, r2
 80109f4:	4619      	mov	r1, r3
 80109f6:	e72c      	b.n	8010852 <__aeabi_dmul+0x24a>
 80109f8:	ea95 0f0c 	teq	r5, ip
 80109fc:	d106      	bne.n	8010a0c <__aeabi_ddiv+0x1b0>
 80109fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010a02:	f43f aefd 	beq.w	8010800 <__aeabi_dmul+0x1f8>
 8010a06:	4610      	mov	r0, r2
 8010a08:	4619      	mov	r1, r3
 8010a0a:	e722      	b.n	8010852 <__aeabi_dmul+0x24a>
 8010a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010a10:	bf18      	it	ne
 8010a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010a16:	f47f aec5 	bne.w	80107a4 <__aeabi_dmul+0x19c>
 8010a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010a1e:	f47f af0d 	bne.w	801083c <__aeabi_dmul+0x234>
 8010a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010a26:	f47f aeeb 	bne.w	8010800 <__aeabi_dmul+0x1f8>
 8010a2a:	e712      	b.n	8010852 <__aeabi_dmul+0x24a>

08010a2c <__gedf2>:
 8010a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8010a30:	e006      	b.n	8010a40 <__cmpdf2+0x4>
 8010a32:	bf00      	nop

08010a34 <__ledf2>:
 8010a34:	f04f 0c01 	mov.w	ip, #1
 8010a38:	e002      	b.n	8010a40 <__cmpdf2+0x4>
 8010a3a:	bf00      	nop

08010a3c <__cmpdf2>:
 8010a3c:	f04f 0c01 	mov.w	ip, #1
 8010a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a50:	bf18      	it	ne
 8010a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8010a56:	d01b      	beq.n	8010a90 <__cmpdf2+0x54>
 8010a58:	b001      	add	sp, #4
 8010a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010a5e:	bf0c      	ite	eq
 8010a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010a64:	ea91 0f03 	teqne	r1, r3
 8010a68:	bf02      	ittt	eq
 8010a6a:	ea90 0f02 	teqeq	r0, r2
 8010a6e:	2000      	moveq	r0, #0
 8010a70:	4770      	bxeq	lr
 8010a72:	f110 0f00 	cmn.w	r0, #0
 8010a76:	ea91 0f03 	teq	r1, r3
 8010a7a:	bf58      	it	pl
 8010a7c:	4299      	cmppl	r1, r3
 8010a7e:	bf08      	it	eq
 8010a80:	4290      	cmpeq	r0, r2
 8010a82:	bf2c      	ite	cs
 8010a84:	17d8      	asrcs	r0, r3, #31
 8010a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010a8a:	f040 0001 	orr.w	r0, r0, #1
 8010a8e:	4770      	bx	lr
 8010a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a98:	d102      	bne.n	8010aa0 <__cmpdf2+0x64>
 8010a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010a9e:	d107      	bne.n	8010ab0 <__cmpdf2+0x74>
 8010aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010aa8:	d1d6      	bne.n	8010a58 <__cmpdf2+0x1c>
 8010aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010aae:	d0d3      	beq.n	8010a58 <__cmpdf2+0x1c>
 8010ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010ab4:	4770      	bx	lr
 8010ab6:	bf00      	nop

08010ab8 <__aeabi_cdrcmple>:
 8010ab8:	4684      	mov	ip, r0
 8010aba:	4610      	mov	r0, r2
 8010abc:	4662      	mov	r2, ip
 8010abe:	468c      	mov	ip, r1
 8010ac0:	4619      	mov	r1, r3
 8010ac2:	4663      	mov	r3, ip
 8010ac4:	e000      	b.n	8010ac8 <__aeabi_cdcmpeq>
 8010ac6:	bf00      	nop

08010ac8 <__aeabi_cdcmpeq>:
 8010ac8:	b501      	push	{r0, lr}
 8010aca:	f7ff ffb7 	bl	8010a3c <__cmpdf2>
 8010ace:	2800      	cmp	r0, #0
 8010ad0:	bf48      	it	mi
 8010ad2:	f110 0f00 	cmnmi.w	r0, #0
 8010ad6:	bd01      	pop	{r0, pc}

08010ad8 <__aeabi_dcmpeq>:
 8010ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010adc:	f7ff fff4 	bl	8010ac8 <__aeabi_cdcmpeq>
 8010ae0:	bf0c      	ite	eq
 8010ae2:	2001      	moveq	r0, #1
 8010ae4:	2000      	movne	r0, #0
 8010ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8010aea:	bf00      	nop

08010aec <__aeabi_dcmplt>:
 8010aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010af0:	f7ff ffea 	bl	8010ac8 <__aeabi_cdcmpeq>
 8010af4:	bf34      	ite	cc
 8010af6:	2001      	movcc	r0, #1
 8010af8:	2000      	movcs	r0, #0
 8010afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8010afe:	bf00      	nop

08010b00 <__aeabi_dcmple>:
 8010b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b04:	f7ff ffe0 	bl	8010ac8 <__aeabi_cdcmpeq>
 8010b08:	bf94      	ite	ls
 8010b0a:	2001      	movls	r0, #1
 8010b0c:	2000      	movhi	r0, #0
 8010b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b12:	bf00      	nop

08010b14 <__aeabi_dcmpge>:
 8010b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b18:	f7ff ffce 	bl	8010ab8 <__aeabi_cdrcmple>
 8010b1c:	bf94      	ite	ls
 8010b1e:	2001      	movls	r0, #1
 8010b20:	2000      	movhi	r0, #0
 8010b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b26:	bf00      	nop

08010b28 <__aeabi_dcmpgt>:
 8010b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b2c:	f7ff ffc4 	bl	8010ab8 <__aeabi_cdrcmple>
 8010b30:	bf34      	ite	cc
 8010b32:	2001      	movcc	r0, #1
 8010b34:	2000      	movcs	r0, #0
 8010b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b3a:	bf00      	nop

08010b3c <__aeabi_dcmpun>:
 8010b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b44:	d102      	bne.n	8010b4c <__aeabi_dcmpun+0x10>
 8010b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010b4a:	d10a      	bne.n	8010b62 <__aeabi_dcmpun+0x26>
 8010b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b54:	d102      	bne.n	8010b5c <__aeabi_dcmpun+0x20>
 8010b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010b5a:	d102      	bne.n	8010b62 <__aeabi_dcmpun+0x26>
 8010b5c:	f04f 0000 	mov.w	r0, #0
 8010b60:	4770      	bx	lr
 8010b62:	f04f 0001 	mov.w	r0, #1
 8010b66:	4770      	bx	lr

08010b68 <__aeabi_d2iz>:
 8010b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010b70:	d215      	bcs.n	8010b9e <__aeabi_d2iz+0x36>
 8010b72:	d511      	bpl.n	8010b98 <__aeabi_d2iz+0x30>
 8010b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010b7c:	d912      	bls.n	8010ba4 <__aeabi_d2iz+0x3c>
 8010b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8010b92:	bf18      	it	ne
 8010b94:	4240      	negne	r0, r0
 8010b96:	4770      	bx	lr
 8010b98:	f04f 0000 	mov.w	r0, #0
 8010b9c:	4770      	bx	lr
 8010b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010ba2:	d105      	bne.n	8010bb0 <__aeabi_d2iz+0x48>
 8010ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8010ba8:	bf08      	it	eq
 8010baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8010bae:	4770      	bx	lr
 8010bb0:	f04f 0000 	mov.w	r0, #0
 8010bb4:	4770      	bx	lr
 8010bb6:	bf00      	nop

08010bb8 <__aeabi_d2uiz>:
 8010bb8:	004a      	lsls	r2, r1, #1
 8010bba:	d211      	bcs.n	8010be0 <__aeabi_d2uiz+0x28>
 8010bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010bc0:	d211      	bcs.n	8010be6 <__aeabi_d2uiz+0x2e>
 8010bc2:	d50d      	bpl.n	8010be0 <__aeabi_d2uiz+0x28>
 8010bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010bcc:	d40e      	bmi.n	8010bec <__aeabi_d2uiz+0x34>
 8010bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010bda:	fa23 f002 	lsr.w	r0, r3, r2
 8010bde:	4770      	bx	lr
 8010be0:	f04f 0000 	mov.w	r0, #0
 8010be4:	4770      	bx	lr
 8010be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010bea:	d102      	bne.n	8010bf2 <__aeabi_d2uiz+0x3a>
 8010bec:	f04f 30ff 	mov.w	r0, #4294967295
 8010bf0:	4770      	bx	lr
 8010bf2:	f04f 0000 	mov.w	r0, #0
 8010bf6:	4770      	bx	lr

08010bf8 <__aeabi_d2f>:
 8010bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8010c00:	bf24      	itt	cs
 8010c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8010c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8010c0a:	d90d      	bls.n	8010c28 <__aeabi_d2f+0x30>
 8010c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8010c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8010c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010c20:	bf08      	it	eq
 8010c22:	f020 0001 	biceq.w	r0, r0, #1
 8010c26:	4770      	bx	lr
 8010c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8010c2c:	d121      	bne.n	8010c72 <__aeabi_d2f+0x7a>
 8010c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8010c32:	bfbc      	itt	lt
 8010c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8010c38:	4770      	bxlt	lr
 8010c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010c42:	f1c2 0218 	rsb	r2, r2, #24
 8010c46:	f1c2 0c20 	rsb	ip, r2, #32
 8010c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8010c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8010c52:	bf18      	it	ne
 8010c54:	f040 0001 	orrne.w	r0, r0, #1
 8010c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010c64:	ea40 000c 	orr.w	r0, r0, ip
 8010c68:	fa23 f302 	lsr.w	r3, r3, r2
 8010c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010c70:	e7cc      	b.n	8010c0c <__aeabi_d2f+0x14>
 8010c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010c76:	d107      	bne.n	8010c88 <__aeabi_d2f+0x90>
 8010c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010c7c:	bf1e      	ittt	ne
 8010c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8010c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8010c86:	4770      	bxne	lr
 8010c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8010c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8010c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8010c94:	4770      	bx	lr
 8010c96:	bf00      	nop

08010c98 <__aeabi_uldivmod>:
 8010c98:	b953      	cbnz	r3, 8010cb0 <__aeabi_uldivmod+0x18>
 8010c9a:	b94a      	cbnz	r2, 8010cb0 <__aeabi_uldivmod+0x18>
 8010c9c:	2900      	cmp	r1, #0
 8010c9e:	bf08      	it	eq
 8010ca0:	2800      	cmpeq	r0, #0
 8010ca2:	bf1c      	itt	ne
 8010ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8010ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8010cac:	f000 b9be 	b.w	801102c <__aeabi_idiv0>
 8010cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8010cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010cb8:	f000 f83c 	bl	8010d34 <__udivmoddi4>
 8010cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010cc4:	b004      	add	sp, #16
 8010cc6:	4770      	bx	lr

08010cc8 <__aeabi_d2lz>:
 8010cc8:	b538      	push	{r3, r4, r5, lr}
 8010cca:	2200      	movs	r2, #0
 8010ccc:	2300      	movs	r3, #0
 8010cce:	4604      	mov	r4, r0
 8010cd0:	460d      	mov	r5, r1
 8010cd2:	f7ff ff0b 	bl	8010aec <__aeabi_dcmplt>
 8010cd6:	b928      	cbnz	r0, 8010ce4 <__aeabi_d2lz+0x1c>
 8010cd8:	4620      	mov	r0, r4
 8010cda:	4629      	mov	r1, r5
 8010cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ce0:	f000 b80a 	b.w	8010cf8 <__aeabi_d2ulz>
 8010ce4:	4620      	mov	r0, r4
 8010ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8010cea:	f000 f805 	bl	8010cf8 <__aeabi_d2ulz>
 8010cee:	4240      	negs	r0, r0
 8010cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010cf4:	bd38      	pop	{r3, r4, r5, pc}
 8010cf6:	bf00      	nop

08010cf8 <__aeabi_d2ulz>:
 8010cf8:	b5d0      	push	{r4, r6, r7, lr}
 8010cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8010d2c <__aeabi_d2ulz+0x34>)
 8010cfc:	2200      	movs	r2, #0
 8010cfe:	4606      	mov	r6, r0
 8010d00:	460f      	mov	r7, r1
 8010d02:	f7ff fc81 	bl	8010608 <__aeabi_dmul>
 8010d06:	f7ff ff57 	bl	8010bb8 <__aeabi_d2uiz>
 8010d0a:	4604      	mov	r4, r0
 8010d0c:	f7ff fc02 	bl	8010514 <__aeabi_ui2d>
 8010d10:	4b07      	ldr	r3, [pc, #28]	@ (8010d30 <__aeabi_d2ulz+0x38>)
 8010d12:	2200      	movs	r2, #0
 8010d14:	f7ff fc78 	bl	8010608 <__aeabi_dmul>
 8010d18:	4602      	mov	r2, r0
 8010d1a:	460b      	mov	r3, r1
 8010d1c:	4630      	mov	r0, r6
 8010d1e:	4639      	mov	r1, r7
 8010d20:	f7ff faba 	bl	8010298 <__aeabi_dsub>
 8010d24:	f7ff ff48 	bl	8010bb8 <__aeabi_d2uiz>
 8010d28:	4621      	mov	r1, r4
 8010d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8010d2c:	3df00000 	.word	0x3df00000
 8010d30:	41f00000 	.word	0x41f00000

08010d34 <__udivmoddi4>:
 8010d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d38:	9d08      	ldr	r5, [sp, #32]
 8010d3a:	468e      	mov	lr, r1
 8010d3c:	4604      	mov	r4, r0
 8010d3e:	4688      	mov	r8, r1
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d14a      	bne.n	8010dda <__udivmoddi4+0xa6>
 8010d44:	428a      	cmp	r2, r1
 8010d46:	4617      	mov	r7, r2
 8010d48:	d962      	bls.n	8010e10 <__udivmoddi4+0xdc>
 8010d4a:	fab2 f682 	clz	r6, r2
 8010d4e:	b14e      	cbz	r6, 8010d64 <__udivmoddi4+0x30>
 8010d50:	f1c6 0320 	rsb	r3, r6, #32
 8010d54:	fa01 f806 	lsl.w	r8, r1, r6
 8010d58:	fa20 f303 	lsr.w	r3, r0, r3
 8010d5c:	40b7      	lsls	r7, r6
 8010d5e:	ea43 0808 	orr.w	r8, r3, r8
 8010d62:	40b4      	lsls	r4, r6
 8010d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010d68:	fa1f fc87 	uxth.w	ip, r7
 8010d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8010d70:	0c23      	lsrs	r3, r4, #16
 8010d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8010d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8010d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8010d7e:	429a      	cmp	r2, r3
 8010d80:	d909      	bls.n	8010d96 <__udivmoddi4+0x62>
 8010d82:	18fb      	adds	r3, r7, r3
 8010d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8010d88:	f080 80ea 	bcs.w	8010f60 <__udivmoddi4+0x22c>
 8010d8c:	429a      	cmp	r2, r3
 8010d8e:	f240 80e7 	bls.w	8010f60 <__udivmoddi4+0x22c>
 8010d92:	3902      	subs	r1, #2
 8010d94:	443b      	add	r3, r7
 8010d96:	1a9a      	subs	r2, r3, r2
 8010d98:	b2a3      	uxth	r3, r4
 8010d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8010d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8010da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8010daa:	459c      	cmp	ip, r3
 8010dac:	d909      	bls.n	8010dc2 <__udivmoddi4+0x8e>
 8010dae:	18fb      	adds	r3, r7, r3
 8010db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8010db4:	f080 80d6 	bcs.w	8010f64 <__udivmoddi4+0x230>
 8010db8:	459c      	cmp	ip, r3
 8010dba:	f240 80d3 	bls.w	8010f64 <__udivmoddi4+0x230>
 8010dbe:	443b      	add	r3, r7
 8010dc0:	3802      	subs	r0, #2
 8010dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8010dc6:	eba3 030c 	sub.w	r3, r3, ip
 8010dca:	2100      	movs	r1, #0
 8010dcc:	b11d      	cbz	r5, 8010dd6 <__udivmoddi4+0xa2>
 8010dce:	40f3      	lsrs	r3, r6
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8010dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dda:	428b      	cmp	r3, r1
 8010ddc:	d905      	bls.n	8010dea <__udivmoddi4+0xb6>
 8010dde:	b10d      	cbz	r5, 8010de4 <__udivmoddi4+0xb0>
 8010de0:	e9c5 0100 	strd	r0, r1, [r5]
 8010de4:	2100      	movs	r1, #0
 8010de6:	4608      	mov	r0, r1
 8010de8:	e7f5      	b.n	8010dd6 <__udivmoddi4+0xa2>
 8010dea:	fab3 f183 	clz	r1, r3
 8010dee:	2900      	cmp	r1, #0
 8010df0:	d146      	bne.n	8010e80 <__udivmoddi4+0x14c>
 8010df2:	4573      	cmp	r3, lr
 8010df4:	d302      	bcc.n	8010dfc <__udivmoddi4+0xc8>
 8010df6:	4282      	cmp	r2, r0
 8010df8:	f200 8105 	bhi.w	8011006 <__udivmoddi4+0x2d2>
 8010dfc:	1a84      	subs	r4, r0, r2
 8010dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8010e02:	2001      	movs	r0, #1
 8010e04:	4690      	mov	r8, r2
 8010e06:	2d00      	cmp	r5, #0
 8010e08:	d0e5      	beq.n	8010dd6 <__udivmoddi4+0xa2>
 8010e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8010e0e:	e7e2      	b.n	8010dd6 <__udivmoddi4+0xa2>
 8010e10:	2a00      	cmp	r2, #0
 8010e12:	f000 8090 	beq.w	8010f36 <__udivmoddi4+0x202>
 8010e16:	fab2 f682 	clz	r6, r2
 8010e1a:	2e00      	cmp	r6, #0
 8010e1c:	f040 80a4 	bne.w	8010f68 <__udivmoddi4+0x234>
 8010e20:	1a8a      	subs	r2, r1, r2
 8010e22:	0c03      	lsrs	r3, r0, #16
 8010e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010e28:	b280      	uxth	r0, r0
 8010e2a:	b2bc      	uxth	r4, r7
 8010e2c:	2101      	movs	r1, #1
 8010e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8010e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8010e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8010e3e:	429a      	cmp	r2, r3
 8010e40:	d907      	bls.n	8010e52 <__udivmoddi4+0x11e>
 8010e42:	18fb      	adds	r3, r7, r3
 8010e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8010e48:	d202      	bcs.n	8010e50 <__udivmoddi4+0x11c>
 8010e4a:	429a      	cmp	r2, r3
 8010e4c:	f200 80e0 	bhi.w	8011010 <__udivmoddi4+0x2dc>
 8010e50:	46c4      	mov	ip, r8
 8010e52:	1a9b      	subs	r3, r3, r2
 8010e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8010e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8010e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8010e60:	fb02 f404 	mul.w	r4, r2, r4
 8010e64:	429c      	cmp	r4, r3
 8010e66:	d907      	bls.n	8010e78 <__udivmoddi4+0x144>
 8010e68:	18fb      	adds	r3, r7, r3
 8010e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8010e6e:	d202      	bcs.n	8010e76 <__udivmoddi4+0x142>
 8010e70:	429c      	cmp	r4, r3
 8010e72:	f200 80ca 	bhi.w	801100a <__udivmoddi4+0x2d6>
 8010e76:	4602      	mov	r2, r0
 8010e78:	1b1b      	subs	r3, r3, r4
 8010e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8010e7e:	e7a5      	b.n	8010dcc <__udivmoddi4+0x98>
 8010e80:	f1c1 0620 	rsb	r6, r1, #32
 8010e84:	408b      	lsls	r3, r1
 8010e86:	fa22 f706 	lsr.w	r7, r2, r6
 8010e8a:	431f      	orrs	r7, r3
 8010e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8010e90:	fa20 f306 	lsr.w	r3, r0, r6
 8010e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8010e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8010e9c:	4323      	orrs	r3, r4
 8010e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8010ea2:	fa1f fc87 	uxth.w	ip, r7
 8010ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8010eaa:	0c1c      	lsrs	r4, r3, #16
 8010eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8010eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8010eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8010eb8:	45a6      	cmp	lr, r4
 8010eba:	fa02 f201 	lsl.w	r2, r2, r1
 8010ebe:	d909      	bls.n	8010ed4 <__udivmoddi4+0x1a0>
 8010ec0:	193c      	adds	r4, r7, r4
 8010ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8010ec6:	f080 809c 	bcs.w	8011002 <__udivmoddi4+0x2ce>
 8010eca:	45a6      	cmp	lr, r4
 8010ecc:	f240 8099 	bls.w	8011002 <__udivmoddi4+0x2ce>
 8010ed0:	3802      	subs	r0, #2
 8010ed2:	443c      	add	r4, r7
 8010ed4:	eba4 040e 	sub.w	r4, r4, lr
 8010ed8:	fa1f fe83 	uxth.w	lr, r3
 8010edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8010ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8010ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8010ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8010eec:	45a4      	cmp	ip, r4
 8010eee:	d908      	bls.n	8010f02 <__udivmoddi4+0x1ce>
 8010ef0:	193c      	adds	r4, r7, r4
 8010ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8010ef6:	f080 8082 	bcs.w	8010ffe <__udivmoddi4+0x2ca>
 8010efa:	45a4      	cmp	ip, r4
 8010efc:	d97f      	bls.n	8010ffe <__udivmoddi4+0x2ca>
 8010efe:	3b02      	subs	r3, #2
 8010f00:	443c      	add	r4, r7
 8010f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8010f06:	eba4 040c 	sub.w	r4, r4, ip
 8010f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8010f0e:	4564      	cmp	r4, ip
 8010f10:	4673      	mov	r3, lr
 8010f12:	46e1      	mov	r9, ip
 8010f14:	d362      	bcc.n	8010fdc <__udivmoddi4+0x2a8>
 8010f16:	d05f      	beq.n	8010fd8 <__udivmoddi4+0x2a4>
 8010f18:	b15d      	cbz	r5, 8010f32 <__udivmoddi4+0x1fe>
 8010f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8010f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8010f22:	fa04 f606 	lsl.w	r6, r4, r6
 8010f26:	fa22 f301 	lsr.w	r3, r2, r1
 8010f2a:	431e      	orrs	r6, r3
 8010f2c:	40cc      	lsrs	r4, r1
 8010f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8010f32:	2100      	movs	r1, #0
 8010f34:	e74f      	b.n	8010dd6 <__udivmoddi4+0xa2>
 8010f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8010f3a:	0c01      	lsrs	r1, r0, #16
 8010f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8010f40:	b280      	uxth	r0, r0
 8010f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8010f46:	463b      	mov	r3, r7
 8010f48:	4638      	mov	r0, r7
 8010f4a:	463c      	mov	r4, r7
 8010f4c:	46b8      	mov	r8, r7
 8010f4e:	46be      	mov	lr, r7
 8010f50:	2620      	movs	r6, #32
 8010f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8010f56:	eba2 0208 	sub.w	r2, r2, r8
 8010f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8010f5e:	e766      	b.n	8010e2e <__udivmoddi4+0xfa>
 8010f60:	4601      	mov	r1, r0
 8010f62:	e718      	b.n	8010d96 <__udivmoddi4+0x62>
 8010f64:	4610      	mov	r0, r2
 8010f66:	e72c      	b.n	8010dc2 <__udivmoddi4+0x8e>
 8010f68:	f1c6 0220 	rsb	r2, r6, #32
 8010f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8010f70:	40b7      	lsls	r7, r6
 8010f72:	40b1      	lsls	r1, r6
 8010f74:	fa20 f202 	lsr.w	r2, r0, r2
 8010f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010f7c:	430a      	orrs	r2, r1
 8010f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8010f82:	b2bc      	uxth	r4, r7
 8010f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8010f88:	0c11      	lsrs	r1, r2, #16
 8010f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8010f8e:	fb08 f904 	mul.w	r9, r8, r4
 8010f92:	40b0      	lsls	r0, r6
 8010f94:	4589      	cmp	r9, r1
 8010f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8010f9a:	b280      	uxth	r0, r0
 8010f9c:	d93e      	bls.n	801101c <__udivmoddi4+0x2e8>
 8010f9e:	1879      	adds	r1, r7, r1
 8010fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8010fa4:	d201      	bcs.n	8010faa <__udivmoddi4+0x276>
 8010fa6:	4589      	cmp	r9, r1
 8010fa8:	d81f      	bhi.n	8010fea <__udivmoddi4+0x2b6>
 8010faa:	eba1 0109 	sub.w	r1, r1, r9
 8010fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8010fb2:	fb09 f804 	mul.w	r8, r9, r4
 8010fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8010fba:	b292      	uxth	r2, r2
 8010fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010fc0:	4542      	cmp	r2, r8
 8010fc2:	d229      	bcs.n	8011018 <__udivmoddi4+0x2e4>
 8010fc4:	18ba      	adds	r2, r7, r2
 8010fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8010fca:	d2c4      	bcs.n	8010f56 <__udivmoddi4+0x222>
 8010fcc:	4542      	cmp	r2, r8
 8010fce:	d2c2      	bcs.n	8010f56 <__udivmoddi4+0x222>
 8010fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8010fd4:	443a      	add	r2, r7
 8010fd6:	e7be      	b.n	8010f56 <__udivmoddi4+0x222>
 8010fd8:	45f0      	cmp	r8, lr
 8010fda:	d29d      	bcs.n	8010f18 <__udivmoddi4+0x1e4>
 8010fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8010fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8010fe4:	3801      	subs	r0, #1
 8010fe6:	46e1      	mov	r9, ip
 8010fe8:	e796      	b.n	8010f18 <__udivmoddi4+0x1e4>
 8010fea:	eba7 0909 	sub.w	r9, r7, r9
 8010fee:	4449      	add	r1, r9
 8010ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8010ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8010ff8:	fb09 f804 	mul.w	r8, r9, r4
 8010ffc:	e7db      	b.n	8010fb6 <__udivmoddi4+0x282>
 8010ffe:	4673      	mov	r3, lr
 8011000:	e77f      	b.n	8010f02 <__udivmoddi4+0x1ce>
 8011002:	4650      	mov	r0, sl
 8011004:	e766      	b.n	8010ed4 <__udivmoddi4+0x1a0>
 8011006:	4608      	mov	r0, r1
 8011008:	e6fd      	b.n	8010e06 <__udivmoddi4+0xd2>
 801100a:	443b      	add	r3, r7
 801100c:	3a02      	subs	r2, #2
 801100e:	e733      	b.n	8010e78 <__udivmoddi4+0x144>
 8011010:	f1ac 0c02 	sub.w	ip, ip, #2
 8011014:	443b      	add	r3, r7
 8011016:	e71c      	b.n	8010e52 <__udivmoddi4+0x11e>
 8011018:	4649      	mov	r1, r9
 801101a:	e79c      	b.n	8010f56 <__udivmoddi4+0x222>
 801101c:	eba1 0109 	sub.w	r1, r1, r9
 8011020:	46c4      	mov	ip, r8
 8011022:	fbb1 f9fe 	udiv	r9, r1, lr
 8011026:	fb09 f804 	mul.w	r8, r9, r4
 801102a:	e7c4      	b.n	8010fb6 <__udivmoddi4+0x282>

0801102c <__aeabi_idiv0>:
 801102c:	4770      	bx	lr
 801102e:	bf00      	nop

08011030 <audio_write_reg>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define AUDIO_DEV_ADDR 0x94

void audio_write_reg(uint8_t reg_addr, uint8_t reg_val) {
 8011030:	b580      	push	{r7, lr}
 8011032:	b086      	sub	sp, #24
 8011034:	af04      	add	r7, sp, #16
 8011036:	4603      	mov	r3, r0
 8011038:	460a      	mov	r2, r1
 801103a:	71fb      	strb	r3, [r7, #7]
 801103c:	4613      	mov	r3, r2
 801103e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, AUDIO_DEV_ADDR, reg_addr, 1, &reg_val, 1, HAL_MAX_DELAY);
 8011040:	79fb      	ldrb	r3, [r7, #7]
 8011042:	b29a      	uxth	r2, r3
 8011044:	f04f 33ff 	mov.w	r3, #4294967295
 8011048:	9302      	str	r3, [sp, #8]
 801104a:	2301      	movs	r3, #1
 801104c:	9301      	str	r3, [sp, #4]
 801104e:	1dbb      	adds	r3, r7, #6
 8011050:	9300      	str	r3, [sp, #0]
 8011052:	2301      	movs	r3, #1
 8011054:	2194      	movs	r1, #148	@ 0x94
 8011056:	4803      	ldr	r0, [pc, #12]	@ (8011064 <audio_write_reg+0x34>)
 8011058:	f001 f814 	bl	8012084 <HAL_I2C_Mem_Write>
}
 801105c:	bf00      	nop
 801105e:	3708      	adds	r7, #8
 8011060:	46bd      	mov	sp, r7
 8011062:	bd80      	pop	{r7, pc}
 8011064:	200001f0 	.word	0x200001f0

08011068 <audio_init>:
	uint8_t reg_val;
	HAL_I2C_Mem_Read(&hi2c1, AUDIO_DEV_ADDR, reg_addr, 1, &reg_val, 1, HAL_MAX_DELAY);
	return reg_val;
}

void audio_init() {
 8011068:	b580      	push	{r7, lr}
 801106a:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 801106c:	2064      	movs	r0, #100	@ 0x64
 801106e:	f000 fc1d 	bl	80118ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8011072:	2200      	movs	r2, #0
 8011074:	2110      	movs	r1, #16
 8011076:	480e      	ldr	r0, [pc, #56]	@ (80110b0 <audio_init+0x48>)
 8011078:	f000 fea6 	bl	8011dc8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 801107c:	2064      	movs	r0, #100	@ 0x64
 801107e:	f000 fc15 	bl	80118ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8011082:	2201      	movs	r2, #1
 8011084:	2110      	movs	r1, #16
 8011086:	480a      	ldr	r0, [pc, #40]	@ (80110b0 <audio_init+0x48>)
 8011088:	f000 fe9e 	bl	8011dc8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 801108c:	2064      	movs	r0, #100	@ 0x64
 801108e:	f000 fc0d 	bl	80118ac <HAL_Delay>

	audio_write_reg(0x02, 0b10011110);
 8011092:	219e      	movs	r1, #158	@ 0x9e
 8011094:	2002      	movs	r0, #2
 8011096:	f7ff ffcb 	bl	8011030 <audio_write_reg>
	audio_write_reg(0x04, 0b10101111);
 801109a:	21af      	movs	r1, #175	@ 0xaf
 801109c:	2004      	movs	r0, #4
 801109e:	f7ff ffc7 	bl	8011030 <audio_write_reg>
	audio_write_reg(0x06, 0b00000111);
 80110a2:	2107      	movs	r1, #7
 80110a4:	2006      	movs	r0, #6
 80110a6:	f7ff ffc3 	bl	8011030 <audio_write_reg>
}
 80110aa:	bf00      	nop
 80110ac:	bd80      	pop	{r7, pc}
 80110ae:	bf00      	nop
 80110b0:	40020c00 	.word	0x40020c00

080110b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b082      	sub	sp, #8
 80110b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80110ba:	f000 fb85 	bl	80117c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80110be:	f000 f82f 	bl	8011120 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80110c2:	f000 f8f7 	bl	80112b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80110c6:	f000 f899 	bl	80111fc <MX_I2C1_Init>
  MX_I2S3_Init();
 80110ca:	f000 f8c5 	bl	8011258 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */
  audio_init();
 80110ce:	f7ff ffcb 	bl	8011068 <audio_init>
  uint16_t* audio_data = (uint16_t*)0x08020000;
 80110d2:	4b10      	ldr	r3, [pc, #64]	@ (8011114 <main+0x60>)
 80110d4:	603b      	str	r3, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for (int i = 0; i < 127854; i++) {
 80110d6:	2300      	movs	r3, #0
 80110d8:	607b      	str	r3, [r7, #4]
 80110da:	e016      	b.n	801110a <main+0x56>
		  HAL_I2S_Transmit(&hi2s3, &audio_data[i], 1, HAL_MAX_DELAY);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	005b      	lsls	r3, r3, #1
 80110e0:	683a      	ldr	r2, [r7, #0]
 80110e2:	18d1      	adds	r1, r2, r3
 80110e4:	f04f 33ff 	mov.w	r3, #4294967295
 80110e8:	2201      	movs	r2, #1
 80110ea:	480b      	ldr	r0, [pc, #44]	@ (8011118 <main+0x64>)
 80110ec:	f001 fc74 	bl	80129d8 <HAL_I2S_Transmit>
		  HAL_I2S_Transmit(&hi2s3, &audio_data[i], 1, HAL_MAX_DELAY);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	005b      	lsls	r3, r3, #1
 80110f4:	683a      	ldr	r2, [r7, #0]
 80110f6:	18d1      	adds	r1, r2, r3
 80110f8:	f04f 33ff 	mov.w	r3, #4294967295
 80110fc:	2201      	movs	r2, #1
 80110fe:	4806      	ldr	r0, [pc, #24]	@ (8011118 <main+0x64>)
 8011100:	f001 fc6a 	bl	80129d8 <HAL_I2S_Transmit>
	  for (int i = 0; i < 127854; i++) {
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	3301      	adds	r3, #1
 8011108:	607b      	str	r3, [r7, #4]
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	4a03      	ldr	r2, [pc, #12]	@ (801111c <main+0x68>)
 801110e:	4293      	cmp	r3, r2
 8011110:	dde4      	ble.n	80110dc <main+0x28>
 8011112:	e7e0      	b.n	80110d6 <main+0x22>
 8011114:	08020000 	.word	0x08020000
 8011118:	20000244 	.word	0x20000244
 801111c:	0001f36d 	.word	0x0001f36d

08011120 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b094      	sub	sp, #80	@ 0x50
 8011124:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8011126:	f107 0320 	add.w	r3, r7, #32
 801112a:	2230      	movs	r2, #48	@ 0x30
 801112c:	2100      	movs	r1, #0
 801112e:	4618      	mov	r0, r3
 8011130:	f003 fdf9 	bl	8014d26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8011134:	f107 030c 	add.w	r3, r7, #12
 8011138:	2200      	movs	r2, #0
 801113a:	601a      	str	r2, [r3, #0]
 801113c:	605a      	str	r2, [r3, #4]
 801113e:	609a      	str	r2, [r3, #8]
 8011140:	60da      	str	r2, [r3, #12]
 8011142:	611a      	str	r2, [r3, #16]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(16);
 8011144:	4b2b      	ldr	r3, [pc, #172]	@ (80111f4 <SystemClock_Config+0xd4>)
 8011146:	685b      	ldr	r3, [r3, #4]
 8011148:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 801114c:	4a29      	ldr	r2, [pc, #164]	@ (80111f4 <SystemClock_Config+0xd4>)
 801114e:	f043 0310 	orr.w	r3, r3, #16
 8011152:	6053      	str	r3, [r2, #4]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8011154:	4b27      	ldr	r3, [pc, #156]	@ (80111f4 <SystemClock_Config+0xd4>)
 8011156:	685b      	ldr	r3, [r3, #4]
 8011158:	4a26      	ldr	r2, [pc, #152]	@ (80111f4 <SystemClock_Config+0xd4>)
 801115a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 801115e:	6053      	str	r3, [r2, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8011160:	2300      	movs	r3, #0
 8011162:	60bb      	str	r3, [r7, #8]
 8011164:	4b23      	ldr	r3, [pc, #140]	@ (80111f4 <SystemClock_Config+0xd4>)
 8011166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011168:	4a22      	ldr	r2, [pc, #136]	@ (80111f4 <SystemClock_Config+0xd4>)
 801116a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801116e:	6413      	str	r3, [r2, #64]	@ 0x40
 8011170:	4b20      	ldr	r3, [pc, #128]	@ (80111f4 <SystemClock_Config+0xd4>)
 8011172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011178:	60bb      	str	r3, [r7, #8]
 801117a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801117c:	2300      	movs	r3, #0
 801117e:	607b      	str	r3, [r7, #4]
 8011180:	4b1d      	ldr	r3, [pc, #116]	@ (80111f8 <SystemClock_Config+0xd8>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	4a1c      	ldr	r2, [pc, #112]	@ (80111f8 <SystemClock_Config+0xd8>)
 8011186:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801118a:	6013      	str	r3, [r2, #0]
 801118c:	4b1a      	ldr	r3, [pc, #104]	@ (80111f8 <SystemClock_Config+0xd8>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8011194:	607b      	str	r3, [r7, #4]
 8011196:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8011198:	2302      	movs	r3, #2
 801119a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801119c:	2301      	movs	r3, #1
 801119e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80111a0:	2310      	movs	r3, #16
 80111a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80111a4:	2300      	movs	r3, #0
 80111a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80111a8:	2300      	movs	r3, #0
 80111aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80111ac:	f107 0320 	add.w	r3, r7, #32
 80111b0:	4618      	mov	r0, r3
 80111b2:	f002 f897 	bl	80132e4 <HAL_RCC_OscConfig>
 80111b6:	4603      	mov	r3, r0
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d001      	beq.n	80111c0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80111bc:	f000 f8d8 	bl	8011370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80111c0:	230f      	movs	r3, #15
 80111c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80111c4:	2300      	movs	r3, #0
 80111c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80111c8:	2300      	movs	r3, #0
 80111ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80111cc:	2300      	movs	r3, #0
 80111ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80111d0:	2300      	movs	r3, #0
 80111d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80111d4:	f107 030c 	add.w	r3, r7, #12
 80111d8:	2100      	movs	r1, #0
 80111da:	4618      	mov	r0, r3
 80111dc:	f002 fafa 	bl	80137d4 <HAL_RCC_ClockConfig>
 80111e0:	4603      	mov	r3, r0
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d001      	beq.n	80111ea <SystemClock_Config+0xca>
  {
    Error_Handler();
 80111e6:	f000 f8c3 	bl	8011370 <Error_Handler>
  }
}
 80111ea:	bf00      	nop
 80111ec:	3750      	adds	r7, #80	@ 0x50
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}
 80111f2:	bf00      	nop
 80111f4:	40023800 	.word	0x40023800
 80111f8:	40007000 	.word	0x40007000

080111fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8011200:	4b12      	ldr	r3, [pc, #72]	@ (801124c <MX_I2C1_Init+0x50>)
 8011202:	4a13      	ldr	r2, [pc, #76]	@ (8011250 <MX_I2C1_Init+0x54>)
 8011204:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8011206:	4b11      	ldr	r3, [pc, #68]	@ (801124c <MX_I2C1_Init+0x50>)
 8011208:	4a12      	ldr	r2, [pc, #72]	@ (8011254 <MX_I2C1_Init+0x58>)
 801120a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 801120c:	4b0f      	ldr	r3, [pc, #60]	@ (801124c <MX_I2C1_Init+0x50>)
 801120e:	2200      	movs	r2, #0
 8011210:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8011212:	4b0e      	ldr	r3, [pc, #56]	@ (801124c <MX_I2C1_Init+0x50>)
 8011214:	2200      	movs	r2, #0
 8011216:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8011218:	4b0c      	ldr	r3, [pc, #48]	@ (801124c <MX_I2C1_Init+0x50>)
 801121a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 801121e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8011220:	4b0a      	ldr	r3, [pc, #40]	@ (801124c <MX_I2C1_Init+0x50>)
 8011222:	2200      	movs	r2, #0
 8011224:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8011226:	4b09      	ldr	r3, [pc, #36]	@ (801124c <MX_I2C1_Init+0x50>)
 8011228:	2200      	movs	r2, #0
 801122a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801122c:	4b07      	ldr	r3, [pc, #28]	@ (801124c <MX_I2C1_Init+0x50>)
 801122e:	2200      	movs	r2, #0
 8011230:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8011232:	4b06      	ldr	r3, [pc, #24]	@ (801124c <MX_I2C1_Init+0x50>)
 8011234:	2200      	movs	r2, #0
 8011236:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8011238:	4804      	ldr	r0, [pc, #16]	@ (801124c <MX_I2C1_Init+0x50>)
 801123a:	f000 fddf 	bl	8011dfc <HAL_I2C_Init>
 801123e:	4603      	mov	r3, r0
 8011240:	2b00      	cmp	r3, #0
 8011242:	d001      	beq.n	8011248 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8011244:	f000 f894 	bl	8011370 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8011248:	bf00      	nop
 801124a:	bd80      	pop	{r7, pc}
 801124c:	200001f0 	.word	0x200001f0
 8011250:	40005400 	.word	0x40005400
 8011254:	000186a0 	.word	0x000186a0

08011258 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 801125c:	4b13      	ldr	r3, [pc, #76]	@ (80112ac <MX_I2S3_Init+0x54>)
 801125e:	4a14      	ldr	r2, [pc, #80]	@ (80112b0 <MX_I2S3_Init+0x58>)
 8011260:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8011262:	4b12      	ldr	r3, [pc, #72]	@ (80112ac <MX_I2S3_Init+0x54>)
 8011264:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011268:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 801126a:	4b10      	ldr	r3, [pc, #64]	@ (80112ac <MX_I2S3_Init+0x54>)
 801126c:	2200      	movs	r2, #0
 801126e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8011270:	4b0e      	ldr	r3, [pc, #56]	@ (80112ac <MX_I2S3_Init+0x54>)
 8011272:	2200      	movs	r2, #0
 8011274:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8011276:	4b0d      	ldr	r3, [pc, #52]	@ (80112ac <MX_I2S3_Init+0x54>)
 8011278:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801127c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 801127e:	4b0b      	ldr	r3, [pc, #44]	@ (80112ac <MX_I2S3_Init+0x54>)
 8011280:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8011284:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8011286:	4b09      	ldr	r3, [pc, #36]	@ (80112ac <MX_I2S3_Init+0x54>)
 8011288:	2200      	movs	r2, #0
 801128a:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 801128c:	4b07      	ldr	r3, [pc, #28]	@ (80112ac <MX_I2S3_Init+0x54>)
 801128e:	2200      	movs	r2, #0
 8011290:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8011292:	4b06      	ldr	r3, [pc, #24]	@ (80112ac <MX_I2S3_Init+0x54>)
 8011294:	2200      	movs	r2, #0
 8011296:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8011298:	4804      	ldr	r0, [pc, #16]	@ (80112ac <MX_I2S3_Init+0x54>)
 801129a:	f001 fa5d 	bl	8012758 <HAL_I2S_Init>
 801129e:	4603      	mov	r3, r0
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d001      	beq.n	80112a8 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80112a4:	f000 f864 	bl	8011370 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80112a8:	bf00      	nop
 80112aa:	bd80      	pop	{r7, pc}
 80112ac:	20000244 	.word	0x20000244
 80112b0:	40003c00 	.word	0x40003c00

080112b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b08a      	sub	sp, #40	@ 0x28
 80112b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80112ba:	f107 0314 	add.w	r3, r7, #20
 80112be:	2200      	movs	r2, #0
 80112c0:	601a      	str	r2, [r3, #0]
 80112c2:	605a      	str	r2, [r3, #4]
 80112c4:	609a      	str	r2, [r3, #8]
 80112c6:	60da      	str	r2, [r3, #12]
 80112c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80112ca:	2300      	movs	r3, #0
 80112cc:	613b      	str	r3, [r7, #16]
 80112ce:	4b26      	ldr	r3, [pc, #152]	@ (8011368 <MX_GPIO_Init+0xb4>)
 80112d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80112d2:	4a25      	ldr	r2, [pc, #148]	@ (8011368 <MX_GPIO_Init+0xb4>)
 80112d4:	f043 0301 	orr.w	r3, r3, #1
 80112d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80112da:	4b23      	ldr	r3, [pc, #140]	@ (8011368 <MX_GPIO_Init+0xb4>)
 80112dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80112de:	f003 0301 	and.w	r3, r3, #1
 80112e2:	613b      	str	r3, [r7, #16]
 80112e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80112e6:	2300      	movs	r3, #0
 80112e8:	60fb      	str	r3, [r7, #12]
 80112ea:	4b1f      	ldr	r3, [pc, #124]	@ (8011368 <MX_GPIO_Init+0xb4>)
 80112ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80112ee:	4a1e      	ldr	r2, [pc, #120]	@ (8011368 <MX_GPIO_Init+0xb4>)
 80112f0:	f043 0304 	orr.w	r3, r3, #4
 80112f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80112f6:	4b1c      	ldr	r3, [pc, #112]	@ (8011368 <MX_GPIO_Init+0xb4>)
 80112f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80112fa:	f003 0304 	and.w	r3, r3, #4
 80112fe:	60fb      	str	r3, [r7, #12]
 8011300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8011302:	2300      	movs	r3, #0
 8011304:	60bb      	str	r3, [r7, #8]
 8011306:	4b18      	ldr	r3, [pc, #96]	@ (8011368 <MX_GPIO_Init+0xb4>)
 8011308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801130a:	4a17      	ldr	r2, [pc, #92]	@ (8011368 <MX_GPIO_Init+0xb4>)
 801130c:	f043 0308 	orr.w	r3, r3, #8
 8011310:	6313      	str	r3, [r2, #48]	@ 0x30
 8011312:	4b15      	ldr	r3, [pc, #84]	@ (8011368 <MX_GPIO_Init+0xb4>)
 8011314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011316:	f003 0308 	and.w	r3, r3, #8
 801131a:	60bb      	str	r3, [r7, #8]
 801131c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801131e:	2300      	movs	r3, #0
 8011320:	607b      	str	r3, [r7, #4]
 8011322:	4b11      	ldr	r3, [pc, #68]	@ (8011368 <MX_GPIO_Init+0xb4>)
 8011324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011326:	4a10      	ldr	r2, [pc, #64]	@ (8011368 <MX_GPIO_Init+0xb4>)
 8011328:	f043 0302 	orr.w	r3, r3, #2
 801132c:	6313      	str	r3, [r2, #48]	@ 0x30
 801132e:	4b0e      	ldr	r3, [pc, #56]	@ (8011368 <MX_GPIO_Init+0xb4>)
 8011330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011332:	f003 0302 	and.w	r3, r3, #2
 8011336:	607b      	str	r3, [r7, #4]
 8011338:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 801133a:	2200      	movs	r2, #0
 801133c:	2110      	movs	r1, #16
 801133e:	480b      	ldr	r0, [pc, #44]	@ (801136c <MX_GPIO_Init+0xb8>)
 8011340:	f000 fd42 	bl	8011dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8011344:	2310      	movs	r3, #16
 8011346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011348:	2301      	movs	r3, #1
 801134a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801134c:	2300      	movs	r3, #0
 801134e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011350:	2300      	movs	r3, #0
 8011352:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011354:	f107 0314 	add.w	r3, r7, #20
 8011358:	4619      	mov	r1, r3
 801135a:	4804      	ldr	r0, [pc, #16]	@ (801136c <MX_GPIO_Init+0xb8>)
 801135c:	f000 fbb0 	bl	8011ac0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8011360:	bf00      	nop
 8011362:	3728      	adds	r7, #40	@ 0x28
 8011364:	46bd      	mov	sp, r7
 8011366:	bd80      	pop	{r7, pc}
 8011368:	40023800 	.word	0x40023800
 801136c:	40020c00 	.word	0x40020c00

08011370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8011370:	b480      	push	{r7}
 8011372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8011374:	b672      	cpsid	i
}
 8011376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8011378:	bf00      	nop
 801137a:	e7fd      	b.n	8011378 <Error_Handler+0x8>

0801137c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801137c:	b480      	push	{r7}
 801137e:	b083      	sub	sp, #12
 8011380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011382:	2300      	movs	r3, #0
 8011384:	607b      	str	r3, [r7, #4]
 8011386:	4b10      	ldr	r3, [pc, #64]	@ (80113c8 <HAL_MspInit+0x4c>)
 8011388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801138a:	4a0f      	ldr	r2, [pc, #60]	@ (80113c8 <HAL_MspInit+0x4c>)
 801138c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8011390:	6453      	str	r3, [r2, #68]	@ 0x44
 8011392:	4b0d      	ldr	r3, [pc, #52]	@ (80113c8 <HAL_MspInit+0x4c>)
 8011394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801139a:	607b      	str	r3, [r7, #4]
 801139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801139e:	2300      	movs	r3, #0
 80113a0:	603b      	str	r3, [r7, #0]
 80113a2:	4b09      	ldr	r3, [pc, #36]	@ (80113c8 <HAL_MspInit+0x4c>)
 80113a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80113a6:	4a08      	ldr	r2, [pc, #32]	@ (80113c8 <HAL_MspInit+0x4c>)
 80113a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80113ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80113ae:	4b06      	ldr	r3, [pc, #24]	@ (80113c8 <HAL_MspInit+0x4c>)
 80113b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80113b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80113b6:	603b      	str	r3, [r7, #0]
 80113b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80113ba:	bf00      	nop
 80113bc:	370c      	adds	r7, #12
 80113be:	46bd      	mov	sp, r7
 80113c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c4:	4770      	bx	lr
 80113c6:	bf00      	nop
 80113c8:	40023800 	.word	0x40023800

080113cc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b08a      	sub	sp, #40	@ 0x28
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80113d4:	f107 0314 	add.w	r3, r7, #20
 80113d8:	2200      	movs	r2, #0
 80113da:	601a      	str	r2, [r3, #0]
 80113dc:	605a      	str	r2, [r3, #4]
 80113de:	609a      	str	r2, [r3, #8]
 80113e0:	60da      	str	r2, [r3, #12]
 80113e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	4a19      	ldr	r2, [pc, #100]	@ (8011450 <HAL_I2C_MspInit+0x84>)
 80113ea:	4293      	cmp	r3, r2
 80113ec:	d12c      	bne.n	8011448 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80113ee:	2300      	movs	r3, #0
 80113f0:	613b      	str	r3, [r7, #16]
 80113f2:	4b18      	ldr	r3, [pc, #96]	@ (8011454 <HAL_I2C_MspInit+0x88>)
 80113f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80113f6:	4a17      	ldr	r2, [pc, #92]	@ (8011454 <HAL_I2C_MspInit+0x88>)
 80113f8:	f043 0302 	orr.w	r3, r3, #2
 80113fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80113fe:	4b15      	ldr	r3, [pc, #84]	@ (8011454 <HAL_I2C_MspInit+0x88>)
 8011400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011402:	f003 0302 	and.w	r3, r3, #2
 8011406:	613b      	str	r3, [r7, #16]
 8011408:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 801140a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 801140e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011410:	2312      	movs	r3, #18
 8011412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011414:	2300      	movs	r3, #0
 8011416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011418:	2303      	movs	r3, #3
 801141a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801141c:	2304      	movs	r3, #4
 801141e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011420:	f107 0314 	add.w	r3, r7, #20
 8011424:	4619      	mov	r1, r3
 8011426:	480c      	ldr	r0, [pc, #48]	@ (8011458 <HAL_I2C_MspInit+0x8c>)
 8011428:	f000 fb4a 	bl	8011ac0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 801142c:	2300      	movs	r3, #0
 801142e:	60fb      	str	r3, [r7, #12]
 8011430:	4b08      	ldr	r3, [pc, #32]	@ (8011454 <HAL_I2C_MspInit+0x88>)
 8011432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011434:	4a07      	ldr	r2, [pc, #28]	@ (8011454 <HAL_I2C_MspInit+0x88>)
 8011436:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801143a:	6413      	str	r3, [r2, #64]	@ 0x40
 801143c:	4b05      	ldr	r3, [pc, #20]	@ (8011454 <HAL_I2C_MspInit+0x88>)
 801143e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011440:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011444:	60fb      	str	r3, [r7, #12]
 8011446:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8011448:	bf00      	nop
 801144a:	3728      	adds	r7, #40	@ 0x28
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}
 8011450:	40005400 	.word	0x40005400
 8011454:	40023800 	.word	0x40023800
 8011458:	40020400 	.word	0x40020400

0801145c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b090      	sub	sp, #64	@ 0x40
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011464:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011468:	2200      	movs	r2, #0
 801146a:	601a      	str	r2, [r3, #0]
 801146c:	605a      	str	r2, [r3, #4]
 801146e:	609a      	str	r2, [r3, #8]
 8011470:	60da      	str	r2, [r3, #12]
 8011472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011474:	f107 0314 	add.w	r3, r7, #20
 8011478:	2200      	movs	r2, #0
 801147a:	601a      	str	r2, [r3, #0]
 801147c:	605a      	str	r2, [r3, #4]
 801147e:	609a      	str	r2, [r3, #8]
 8011480:	60da      	str	r2, [r3, #12]
 8011482:	611a      	str	r2, [r3, #16]
 8011484:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI3)
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	4a32      	ldr	r2, [pc, #200]	@ (8011554 <HAL_I2S_MspInit+0xf8>)
 801148c:	4293      	cmp	r3, r2
 801148e:	d15c      	bne.n	801154a <HAL_I2S_MspInit+0xee>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8011490:	2301      	movs	r3, #1
 8011492:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8011494:	23c0      	movs	r3, #192	@ 0xc0
 8011496:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 8011498:	2310      	movs	r3, #16
 801149a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 801149c:	2302      	movs	r3, #2
 801149e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80114a0:	f107 0314 	add.w	r3, r7, #20
 80114a4:	4618      	mov	r0, r3
 80114a6:	f002 fb61 	bl	8013b6c <HAL_RCCEx_PeriphCLKConfig>
 80114aa:	4603      	mov	r3, r0
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d001      	beq.n	80114b4 <HAL_I2S_MspInit+0x58>
    {
      Error_Handler();
 80114b0:	f7ff ff5e 	bl	8011370 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80114b4:	2300      	movs	r3, #0
 80114b6:	613b      	str	r3, [r7, #16]
 80114b8:	4b27      	ldr	r3, [pc, #156]	@ (8011558 <HAL_I2S_MspInit+0xfc>)
 80114ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80114bc:	4a26      	ldr	r2, [pc, #152]	@ (8011558 <HAL_I2S_MspInit+0xfc>)
 80114be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80114c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80114c4:	4b24      	ldr	r3, [pc, #144]	@ (8011558 <HAL_I2S_MspInit+0xfc>)
 80114c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80114c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80114cc:	613b      	str	r3, [r7, #16]
 80114ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80114d0:	2300      	movs	r3, #0
 80114d2:	60fb      	str	r3, [r7, #12]
 80114d4:	4b20      	ldr	r3, [pc, #128]	@ (8011558 <HAL_I2S_MspInit+0xfc>)
 80114d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114d8:	4a1f      	ldr	r2, [pc, #124]	@ (8011558 <HAL_I2S_MspInit+0xfc>)
 80114da:	f043 0301 	orr.w	r3, r3, #1
 80114de:	6313      	str	r3, [r2, #48]	@ 0x30
 80114e0:	4b1d      	ldr	r3, [pc, #116]	@ (8011558 <HAL_I2S_MspInit+0xfc>)
 80114e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114e4:	f003 0301 	and.w	r3, r3, #1
 80114e8:	60fb      	str	r3, [r7, #12]
 80114ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80114ec:	2300      	movs	r3, #0
 80114ee:	60bb      	str	r3, [r7, #8]
 80114f0:	4b19      	ldr	r3, [pc, #100]	@ (8011558 <HAL_I2S_MspInit+0xfc>)
 80114f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114f4:	4a18      	ldr	r2, [pc, #96]	@ (8011558 <HAL_I2S_MspInit+0xfc>)
 80114f6:	f043 0304 	orr.w	r3, r3, #4
 80114fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80114fc:	4b16      	ldr	r3, [pc, #88]	@ (8011558 <HAL_I2S_MspInit+0xfc>)
 80114fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011500:	f003 0304 	and.w	r3, r3, #4
 8011504:	60bb      	str	r3, [r7, #8]
 8011506:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8011508:	2310      	movs	r3, #16
 801150a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801150c:	2302      	movs	r3, #2
 801150e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011510:	2300      	movs	r3, #0
 8011512:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011514:	2300      	movs	r3, #0
 8011516:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8011518:	2306      	movs	r3, #6
 801151a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801151c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011520:	4619      	mov	r1, r3
 8011522:	480e      	ldr	r0, [pc, #56]	@ (801155c <HAL_I2S_MspInit+0x100>)
 8011524:	f000 facc 	bl	8011ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8011528:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 801152c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801152e:	2302      	movs	r3, #2
 8011530:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011532:	2300      	movs	r3, #0
 8011534:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011536:	2300      	movs	r3, #0
 8011538:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 801153a:	2306      	movs	r3, #6
 801153c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801153e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011542:	4619      	mov	r1, r3
 8011544:	4806      	ldr	r0, [pc, #24]	@ (8011560 <HAL_I2S_MspInit+0x104>)
 8011546:	f000 fabb 	bl	8011ac0 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 801154a:	bf00      	nop
 801154c:	3740      	adds	r7, #64	@ 0x40
 801154e:	46bd      	mov	sp, r7
 8011550:	bd80      	pop	{r7, pc}
 8011552:	bf00      	nop
 8011554:	40003c00 	.word	0x40003c00
 8011558:	40023800 	.word	0x40023800
 801155c:	40020000 	.word	0x40020000
 8011560:	40020800 	.word	0x40020800

08011564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8011564:	b480      	push	{r7}
 8011566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8011568:	bf00      	nop
 801156a:	e7fd      	b.n	8011568 <NMI_Handler+0x4>

0801156c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801156c:	b480      	push	{r7}
 801156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8011570:	bf00      	nop
 8011572:	e7fd      	b.n	8011570 <HardFault_Handler+0x4>

08011574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8011574:	b480      	push	{r7}
 8011576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8011578:	bf00      	nop
 801157a:	e7fd      	b.n	8011578 <MemManage_Handler+0x4>

0801157c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801157c:	b480      	push	{r7}
 801157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8011580:	bf00      	nop
 8011582:	e7fd      	b.n	8011580 <BusFault_Handler+0x4>

08011584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8011584:	b480      	push	{r7}
 8011586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8011588:	bf00      	nop
 801158a:	e7fd      	b.n	8011588 <UsageFault_Handler+0x4>

0801158c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801158c:	b480      	push	{r7}
 801158e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8011590:	bf00      	nop
 8011592:	46bd      	mov	sp, r7
 8011594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011598:	4770      	bx	lr

0801159a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801159a:	b480      	push	{r7}
 801159c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801159e:	bf00      	nop
 80115a0:	46bd      	mov	sp, r7
 80115a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a6:	4770      	bx	lr

080115a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80115a8:	b480      	push	{r7}
 80115aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80115ac:	bf00      	nop
 80115ae:	46bd      	mov	sp, r7
 80115b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b4:	4770      	bx	lr

080115b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80115b6:	b580      	push	{r7, lr}
 80115b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80115ba:	f000 f957 	bl	801186c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80115be:	bf00      	nop
 80115c0:	bd80      	pop	{r7, pc}

080115c2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80115c2:	b480      	push	{r7}
 80115c4:	af00      	add	r7, sp, #0
  return 1;
 80115c6:	2301      	movs	r3, #1
}
 80115c8:	4618      	mov	r0, r3
 80115ca:	46bd      	mov	sp, r7
 80115cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d0:	4770      	bx	lr

080115d2 <_kill>:

int _kill(int pid, int sig)
{
 80115d2:	b580      	push	{r7, lr}
 80115d4:	b082      	sub	sp, #8
 80115d6:	af00      	add	r7, sp, #0
 80115d8:	6078      	str	r0, [r7, #4]
 80115da:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80115dc:	f003 fbf6 	bl	8014dcc <__errno>
 80115e0:	4603      	mov	r3, r0
 80115e2:	2216      	movs	r2, #22
 80115e4:	601a      	str	r2, [r3, #0]
  return -1;
 80115e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80115ea:	4618      	mov	r0, r3
 80115ec:	3708      	adds	r7, #8
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bd80      	pop	{r7, pc}

080115f2 <_exit>:

void _exit (int status)
{
 80115f2:	b580      	push	{r7, lr}
 80115f4:	b082      	sub	sp, #8
 80115f6:	af00      	add	r7, sp, #0
 80115f8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80115fa:	f04f 31ff 	mov.w	r1, #4294967295
 80115fe:	6878      	ldr	r0, [r7, #4]
 8011600:	f7ff ffe7 	bl	80115d2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8011604:	bf00      	nop
 8011606:	e7fd      	b.n	8011604 <_exit+0x12>

08011608 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8011608:	b580      	push	{r7, lr}
 801160a:	b086      	sub	sp, #24
 801160c:	af00      	add	r7, sp, #0
 801160e:	60f8      	str	r0, [r7, #12]
 8011610:	60b9      	str	r1, [r7, #8]
 8011612:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011614:	2300      	movs	r3, #0
 8011616:	617b      	str	r3, [r7, #20]
 8011618:	e00a      	b.n	8011630 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 801161a:	f3af 8000 	nop.w
 801161e:	4601      	mov	r1, r0
 8011620:	68bb      	ldr	r3, [r7, #8]
 8011622:	1c5a      	adds	r2, r3, #1
 8011624:	60ba      	str	r2, [r7, #8]
 8011626:	b2ca      	uxtb	r2, r1
 8011628:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801162a:	697b      	ldr	r3, [r7, #20]
 801162c:	3301      	adds	r3, #1
 801162e:	617b      	str	r3, [r7, #20]
 8011630:	697a      	ldr	r2, [r7, #20]
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	429a      	cmp	r2, r3
 8011636:	dbf0      	blt.n	801161a <_read+0x12>
  }

  return len;
 8011638:	687b      	ldr	r3, [r7, #4]
}
 801163a:	4618      	mov	r0, r3
 801163c:	3718      	adds	r7, #24
 801163e:	46bd      	mov	sp, r7
 8011640:	bd80      	pop	{r7, pc}

08011642 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8011642:	b580      	push	{r7, lr}
 8011644:	b086      	sub	sp, #24
 8011646:	af00      	add	r7, sp, #0
 8011648:	60f8      	str	r0, [r7, #12]
 801164a:	60b9      	str	r1, [r7, #8]
 801164c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801164e:	2300      	movs	r3, #0
 8011650:	617b      	str	r3, [r7, #20]
 8011652:	e009      	b.n	8011668 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8011654:	68bb      	ldr	r3, [r7, #8]
 8011656:	1c5a      	adds	r2, r3, #1
 8011658:	60ba      	str	r2, [r7, #8]
 801165a:	781b      	ldrb	r3, [r3, #0]
 801165c:	4618      	mov	r0, r3
 801165e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011662:	697b      	ldr	r3, [r7, #20]
 8011664:	3301      	adds	r3, #1
 8011666:	617b      	str	r3, [r7, #20]
 8011668:	697a      	ldr	r2, [r7, #20]
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	429a      	cmp	r2, r3
 801166e:	dbf1      	blt.n	8011654 <_write+0x12>
  }
  return len;
 8011670:	687b      	ldr	r3, [r7, #4]
}
 8011672:	4618      	mov	r0, r3
 8011674:	3718      	adds	r7, #24
 8011676:	46bd      	mov	sp, r7
 8011678:	bd80      	pop	{r7, pc}

0801167a <_close>:

int _close(int file)
{
 801167a:	b480      	push	{r7}
 801167c:	b083      	sub	sp, #12
 801167e:	af00      	add	r7, sp, #0
 8011680:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8011682:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011686:	4618      	mov	r0, r3
 8011688:	370c      	adds	r7, #12
 801168a:	46bd      	mov	sp, r7
 801168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011690:	4770      	bx	lr

08011692 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8011692:	b480      	push	{r7}
 8011694:	b083      	sub	sp, #12
 8011696:	af00      	add	r7, sp, #0
 8011698:	6078      	str	r0, [r7, #4]
 801169a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80116a2:	605a      	str	r2, [r3, #4]
  return 0;
 80116a4:	2300      	movs	r3, #0
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	370c      	adds	r7, #12
 80116aa:	46bd      	mov	sp, r7
 80116ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b0:	4770      	bx	lr

080116b2 <_isatty>:

int _isatty(int file)
{
 80116b2:	b480      	push	{r7}
 80116b4:	b083      	sub	sp, #12
 80116b6:	af00      	add	r7, sp, #0
 80116b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80116ba:	2301      	movs	r3, #1
}
 80116bc:	4618      	mov	r0, r3
 80116be:	370c      	adds	r7, #12
 80116c0:	46bd      	mov	sp, r7
 80116c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c6:	4770      	bx	lr

080116c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80116c8:	b480      	push	{r7}
 80116ca:	b085      	sub	sp, #20
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	60f8      	str	r0, [r7, #12]
 80116d0:	60b9      	str	r1, [r7, #8]
 80116d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80116d4:	2300      	movs	r3, #0
}
 80116d6:	4618      	mov	r0, r3
 80116d8:	3714      	adds	r7, #20
 80116da:	46bd      	mov	sp, r7
 80116dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e0:	4770      	bx	lr
	...

080116e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b086      	sub	sp, #24
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80116ec:	4a14      	ldr	r2, [pc, #80]	@ (8011740 <_sbrk+0x5c>)
 80116ee:	4b15      	ldr	r3, [pc, #84]	@ (8011744 <_sbrk+0x60>)
 80116f0:	1ad3      	subs	r3, r2, r3
 80116f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80116f8:	4b13      	ldr	r3, [pc, #76]	@ (8011748 <_sbrk+0x64>)
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d102      	bne.n	8011706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8011700:	4b11      	ldr	r3, [pc, #68]	@ (8011748 <_sbrk+0x64>)
 8011702:	4a12      	ldr	r2, [pc, #72]	@ (801174c <_sbrk+0x68>)
 8011704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8011706:	4b10      	ldr	r3, [pc, #64]	@ (8011748 <_sbrk+0x64>)
 8011708:	681a      	ldr	r2, [r3, #0]
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	4413      	add	r3, r2
 801170e:	693a      	ldr	r2, [r7, #16]
 8011710:	429a      	cmp	r2, r3
 8011712:	d207      	bcs.n	8011724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8011714:	f003 fb5a 	bl	8014dcc <__errno>
 8011718:	4603      	mov	r3, r0
 801171a:	220c      	movs	r2, #12
 801171c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801171e:	f04f 33ff 	mov.w	r3, #4294967295
 8011722:	e009      	b.n	8011738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8011724:	4b08      	ldr	r3, [pc, #32]	@ (8011748 <_sbrk+0x64>)
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801172a:	4b07      	ldr	r3, [pc, #28]	@ (8011748 <_sbrk+0x64>)
 801172c:	681a      	ldr	r2, [r3, #0]
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	4413      	add	r3, r2
 8011732:	4a05      	ldr	r2, [pc, #20]	@ (8011748 <_sbrk+0x64>)
 8011734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8011736:	68fb      	ldr	r3, [r7, #12]
}
 8011738:	4618      	mov	r0, r3
 801173a:	3718      	adds	r7, #24
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}
 8011740:	20020000 	.word	0x20020000
 8011744:	00000400 	.word	0x00000400
 8011748:	2000028c 	.word	0x2000028c
 801174c:	200003e0 	.word	0x200003e0

08011750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8011750:	b480      	push	{r7}
 8011752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8011754:	4b06      	ldr	r3, [pc, #24]	@ (8011770 <SystemInit+0x20>)
 8011756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801175a:	4a05      	ldr	r2, [pc, #20]	@ (8011770 <SystemInit+0x20>)
 801175c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011760:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8011764:	bf00      	nop
 8011766:	46bd      	mov	sp, r7
 8011768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176c:	4770      	bx	lr
 801176e:	bf00      	nop
 8011770:	e000ed00 	.word	0xe000ed00

08011774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8011774:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80117ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8011778:	f7ff ffea 	bl	8011750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 801177c:	480c      	ldr	r0, [pc, #48]	@ (80117b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 801177e:	490d      	ldr	r1, [pc, #52]	@ (80117b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8011780:	4a0d      	ldr	r2, [pc, #52]	@ (80117b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8011782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8011784:	e002      	b.n	801178c <LoopCopyDataInit>

08011786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8011786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8011788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801178a:	3304      	adds	r3, #4

0801178c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801178c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801178e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8011790:	d3f9      	bcc.n	8011786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8011792:	4a0a      	ldr	r2, [pc, #40]	@ (80117bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8011794:	4c0a      	ldr	r4, [pc, #40]	@ (80117c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8011796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8011798:	e001      	b.n	801179e <LoopFillZerobss>

0801179a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801179a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801179c:	3204      	adds	r2, #4

0801179e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801179e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80117a0:	d3fb      	bcc.n	801179a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80117a2:	f003 fb19 	bl	8014dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80117a6:	f7ff fc85 	bl	80110b4 <main>
  bx  lr    
 80117aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80117ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80117b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80117b4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80117b8:	0801894c 	.word	0x0801894c
  ldr r2, =_sbss
 80117bc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80117c0:	200003e0 	.word	0x200003e0

080117c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80117c4:	e7fe      	b.n	80117c4 <ADC_IRQHandler>
	...

080117c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80117cc:	4b0e      	ldr	r3, [pc, #56]	@ (8011808 <HAL_Init+0x40>)
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	4a0d      	ldr	r2, [pc, #52]	@ (8011808 <HAL_Init+0x40>)
 80117d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80117d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80117d8:	4b0b      	ldr	r3, [pc, #44]	@ (8011808 <HAL_Init+0x40>)
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	4a0a      	ldr	r2, [pc, #40]	@ (8011808 <HAL_Init+0x40>)
 80117de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80117e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80117e4:	4b08      	ldr	r3, [pc, #32]	@ (8011808 <HAL_Init+0x40>)
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	4a07      	ldr	r2, [pc, #28]	@ (8011808 <HAL_Init+0x40>)
 80117ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80117ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80117f0:	2003      	movs	r0, #3
 80117f2:	f000 f931 	bl	8011a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80117f6:	200f      	movs	r0, #15
 80117f8:	f000 f808 	bl	801180c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80117fc:	f7ff fdbe 	bl	801137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8011800:	2300      	movs	r3, #0
}
 8011802:	4618      	mov	r0, r3
 8011804:	bd80      	pop	{r7, pc}
 8011806:	bf00      	nop
 8011808:	40023c00 	.word	0x40023c00

0801180c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801180c:	b580      	push	{r7, lr}
 801180e:	b082      	sub	sp, #8
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8011814:	4b12      	ldr	r3, [pc, #72]	@ (8011860 <HAL_InitTick+0x54>)
 8011816:	681a      	ldr	r2, [r3, #0]
 8011818:	4b12      	ldr	r3, [pc, #72]	@ (8011864 <HAL_InitTick+0x58>)
 801181a:	781b      	ldrb	r3, [r3, #0]
 801181c:	4619      	mov	r1, r3
 801181e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011822:	fbb3 f3f1 	udiv	r3, r3, r1
 8011826:	fbb2 f3f3 	udiv	r3, r2, r3
 801182a:	4618      	mov	r0, r3
 801182c:	f000 f93b 	bl	8011aa6 <HAL_SYSTICK_Config>
 8011830:	4603      	mov	r3, r0
 8011832:	2b00      	cmp	r3, #0
 8011834:	d001      	beq.n	801183a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8011836:	2301      	movs	r3, #1
 8011838:	e00e      	b.n	8011858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	2b0f      	cmp	r3, #15
 801183e:	d80a      	bhi.n	8011856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8011840:	2200      	movs	r2, #0
 8011842:	6879      	ldr	r1, [r7, #4]
 8011844:	f04f 30ff 	mov.w	r0, #4294967295
 8011848:	f000 f911 	bl	8011a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801184c:	4a06      	ldr	r2, [pc, #24]	@ (8011868 <HAL_InitTick+0x5c>)
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8011852:	2300      	movs	r3, #0
 8011854:	e000      	b.n	8011858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8011856:	2301      	movs	r3, #1
}
 8011858:	4618      	mov	r0, r3
 801185a:	3708      	adds	r7, #8
 801185c:	46bd      	mov	sp, r7
 801185e:	bd80      	pop	{r7, pc}
 8011860:	20000000 	.word	0x20000000
 8011864:	20000008 	.word	0x20000008
 8011868:	20000004 	.word	0x20000004

0801186c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801186c:	b480      	push	{r7}
 801186e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8011870:	4b06      	ldr	r3, [pc, #24]	@ (801188c <HAL_IncTick+0x20>)
 8011872:	781b      	ldrb	r3, [r3, #0]
 8011874:	461a      	mov	r2, r3
 8011876:	4b06      	ldr	r3, [pc, #24]	@ (8011890 <HAL_IncTick+0x24>)
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	4413      	add	r3, r2
 801187c:	4a04      	ldr	r2, [pc, #16]	@ (8011890 <HAL_IncTick+0x24>)
 801187e:	6013      	str	r3, [r2, #0]
}
 8011880:	bf00      	nop
 8011882:	46bd      	mov	sp, r7
 8011884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011888:	4770      	bx	lr
 801188a:	bf00      	nop
 801188c:	20000008 	.word	0x20000008
 8011890:	20000290 	.word	0x20000290

08011894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011894:	b480      	push	{r7}
 8011896:	af00      	add	r7, sp, #0
  return uwTick;
 8011898:	4b03      	ldr	r3, [pc, #12]	@ (80118a8 <HAL_GetTick+0x14>)
 801189a:	681b      	ldr	r3, [r3, #0]
}
 801189c:	4618      	mov	r0, r3
 801189e:	46bd      	mov	sp, r7
 80118a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a4:	4770      	bx	lr
 80118a6:	bf00      	nop
 80118a8:	20000290 	.word	0x20000290

080118ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b084      	sub	sp, #16
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80118b4:	f7ff ffee 	bl	8011894 <HAL_GetTick>
 80118b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118c4:	d005      	beq.n	80118d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80118c6:	4b0a      	ldr	r3, [pc, #40]	@ (80118f0 <HAL_Delay+0x44>)
 80118c8:	781b      	ldrb	r3, [r3, #0]
 80118ca:	461a      	mov	r2, r3
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	4413      	add	r3, r2
 80118d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80118d2:	bf00      	nop
 80118d4:	f7ff ffde 	bl	8011894 <HAL_GetTick>
 80118d8:	4602      	mov	r2, r0
 80118da:	68bb      	ldr	r3, [r7, #8]
 80118dc:	1ad3      	subs	r3, r2, r3
 80118de:	68fa      	ldr	r2, [r7, #12]
 80118e0:	429a      	cmp	r2, r3
 80118e2:	d8f7      	bhi.n	80118d4 <HAL_Delay+0x28>
  {
  }
}
 80118e4:	bf00      	nop
 80118e6:	bf00      	nop
 80118e8:	3710      	adds	r7, #16
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd80      	pop	{r7, pc}
 80118ee:	bf00      	nop
 80118f0:	20000008 	.word	0x20000008

080118f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80118f4:	b480      	push	{r7}
 80118f6:	b085      	sub	sp, #20
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	f003 0307 	and.w	r3, r3, #7
 8011902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011904:	4b0c      	ldr	r3, [pc, #48]	@ (8011938 <__NVIC_SetPriorityGrouping+0x44>)
 8011906:	68db      	ldr	r3, [r3, #12]
 8011908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801190a:	68ba      	ldr	r2, [r7, #8]
 801190c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8011910:	4013      	ands	r3, r2
 8011912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011918:	68bb      	ldr	r3, [r7, #8]
 801191a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801191c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8011920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8011926:	4a04      	ldr	r2, [pc, #16]	@ (8011938 <__NVIC_SetPriorityGrouping+0x44>)
 8011928:	68bb      	ldr	r3, [r7, #8]
 801192a:	60d3      	str	r3, [r2, #12]
}
 801192c:	bf00      	nop
 801192e:	3714      	adds	r7, #20
 8011930:	46bd      	mov	sp, r7
 8011932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011936:	4770      	bx	lr
 8011938:	e000ed00 	.word	0xe000ed00

0801193c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801193c:	b480      	push	{r7}
 801193e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011940:	4b04      	ldr	r3, [pc, #16]	@ (8011954 <__NVIC_GetPriorityGrouping+0x18>)
 8011942:	68db      	ldr	r3, [r3, #12]
 8011944:	0a1b      	lsrs	r3, r3, #8
 8011946:	f003 0307 	and.w	r3, r3, #7
}
 801194a:	4618      	mov	r0, r3
 801194c:	46bd      	mov	sp, r7
 801194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011952:	4770      	bx	lr
 8011954:	e000ed00 	.word	0xe000ed00

08011958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8011958:	b480      	push	{r7}
 801195a:	b083      	sub	sp, #12
 801195c:	af00      	add	r7, sp, #0
 801195e:	4603      	mov	r3, r0
 8011960:	6039      	str	r1, [r7, #0]
 8011962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011968:	2b00      	cmp	r3, #0
 801196a:	db0a      	blt.n	8011982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801196c:	683b      	ldr	r3, [r7, #0]
 801196e:	b2da      	uxtb	r2, r3
 8011970:	490c      	ldr	r1, [pc, #48]	@ (80119a4 <__NVIC_SetPriority+0x4c>)
 8011972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011976:	0112      	lsls	r2, r2, #4
 8011978:	b2d2      	uxtb	r2, r2
 801197a:	440b      	add	r3, r1
 801197c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011980:	e00a      	b.n	8011998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011982:	683b      	ldr	r3, [r7, #0]
 8011984:	b2da      	uxtb	r2, r3
 8011986:	4908      	ldr	r1, [pc, #32]	@ (80119a8 <__NVIC_SetPriority+0x50>)
 8011988:	79fb      	ldrb	r3, [r7, #7]
 801198a:	f003 030f 	and.w	r3, r3, #15
 801198e:	3b04      	subs	r3, #4
 8011990:	0112      	lsls	r2, r2, #4
 8011992:	b2d2      	uxtb	r2, r2
 8011994:	440b      	add	r3, r1
 8011996:	761a      	strb	r2, [r3, #24]
}
 8011998:	bf00      	nop
 801199a:	370c      	adds	r7, #12
 801199c:	46bd      	mov	sp, r7
 801199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a2:	4770      	bx	lr
 80119a4:	e000e100 	.word	0xe000e100
 80119a8:	e000ed00 	.word	0xe000ed00

080119ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80119ac:	b480      	push	{r7}
 80119ae:	b089      	sub	sp, #36	@ 0x24
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	60f8      	str	r0, [r7, #12]
 80119b4:	60b9      	str	r1, [r7, #8]
 80119b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	f003 0307 	and.w	r3, r3, #7
 80119be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80119c0:	69fb      	ldr	r3, [r7, #28]
 80119c2:	f1c3 0307 	rsb	r3, r3, #7
 80119c6:	2b04      	cmp	r3, #4
 80119c8:	bf28      	it	cs
 80119ca:	2304      	movcs	r3, #4
 80119cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80119ce:	69fb      	ldr	r3, [r7, #28]
 80119d0:	3304      	adds	r3, #4
 80119d2:	2b06      	cmp	r3, #6
 80119d4:	d902      	bls.n	80119dc <NVIC_EncodePriority+0x30>
 80119d6:	69fb      	ldr	r3, [r7, #28]
 80119d8:	3b03      	subs	r3, #3
 80119da:	e000      	b.n	80119de <NVIC_EncodePriority+0x32>
 80119dc:	2300      	movs	r3, #0
 80119de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80119e0:	f04f 32ff 	mov.w	r2, #4294967295
 80119e4:	69bb      	ldr	r3, [r7, #24]
 80119e6:	fa02 f303 	lsl.w	r3, r2, r3
 80119ea:	43da      	mvns	r2, r3
 80119ec:	68bb      	ldr	r3, [r7, #8]
 80119ee:	401a      	ands	r2, r3
 80119f0:	697b      	ldr	r3, [r7, #20]
 80119f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80119f4:	f04f 31ff 	mov.w	r1, #4294967295
 80119f8:	697b      	ldr	r3, [r7, #20]
 80119fa:	fa01 f303 	lsl.w	r3, r1, r3
 80119fe:	43d9      	mvns	r1, r3
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011a04:	4313      	orrs	r3, r2
         );
}
 8011a06:	4618      	mov	r0, r3
 8011a08:	3724      	adds	r7, #36	@ 0x24
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a10:	4770      	bx	lr
	...

08011a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b082      	sub	sp, #8
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	3b01      	subs	r3, #1
 8011a20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011a24:	d301      	bcc.n	8011a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8011a26:	2301      	movs	r3, #1
 8011a28:	e00f      	b.n	8011a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8011a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8011a54 <SysTick_Config+0x40>)
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	3b01      	subs	r3, #1
 8011a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8011a32:	210f      	movs	r1, #15
 8011a34:	f04f 30ff 	mov.w	r0, #4294967295
 8011a38:	f7ff ff8e 	bl	8011958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8011a3c:	4b05      	ldr	r3, [pc, #20]	@ (8011a54 <SysTick_Config+0x40>)
 8011a3e:	2200      	movs	r2, #0
 8011a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011a42:	4b04      	ldr	r3, [pc, #16]	@ (8011a54 <SysTick_Config+0x40>)
 8011a44:	2207      	movs	r2, #7
 8011a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8011a48:	2300      	movs	r3, #0
}
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	3708      	adds	r7, #8
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	bd80      	pop	{r7, pc}
 8011a52:	bf00      	nop
 8011a54:	e000e010 	.word	0xe000e010

08011a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b082      	sub	sp, #8
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011a60:	6878      	ldr	r0, [r7, #4]
 8011a62:	f7ff ff47 	bl	80118f4 <__NVIC_SetPriorityGrouping>
}
 8011a66:	bf00      	nop
 8011a68:	3708      	adds	r7, #8
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	bd80      	pop	{r7, pc}

08011a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011a6e:	b580      	push	{r7, lr}
 8011a70:	b086      	sub	sp, #24
 8011a72:	af00      	add	r7, sp, #0
 8011a74:	4603      	mov	r3, r0
 8011a76:	60b9      	str	r1, [r7, #8]
 8011a78:	607a      	str	r2, [r7, #4]
 8011a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8011a80:	f7ff ff5c 	bl	801193c <__NVIC_GetPriorityGrouping>
 8011a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8011a86:	687a      	ldr	r2, [r7, #4]
 8011a88:	68b9      	ldr	r1, [r7, #8]
 8011a8a:	6978      	ldr	r0, [r7, #20]
 8011a8c:	f7ff ff8e 	bl	80119ac <NVIC_EncodePriority>
 8011a90:	4602      	mov	r2, r0
 8011a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a96:	4611      	mov	r1, r2
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f7ff ff5d 	bl	8011958 <__NVIC_SetPriority>
}
 8011a9e:	bf00      	nop
 8011aa0:	3718      	adds	r7, #24
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bd80      	pop	{r7, pc}

08011aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8011aa6:	b580      	push	{r7, lr}
 8011aa8:	b082      	sub	sp, #8
 8011aaa:	af00      	add	r7, sp, #0
 8011aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8011aae:	6878      	ldr	r0, [r7, #4]
 8011ab0:	f7ff ffb0 	bl	8011a14 <SysTick_Config>
 8011ab4:	4603      	mov	r3, r0
}
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	3708      	adds	r7, #8
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd80      	pop	{r7, pc}
	...

08011ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011ac0:	b480      	push	{r7}
 8011ac2:	b089      	sub	sp, #36	@ 0x24
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
 8011ac8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8011aca:	2300      	movs	r3, #0
 8011acc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	61fb      	str	r3, [r7, #28]
 8011ada:	e159      	b.n	8011d90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8011adc:	2201      	movs	r2, #1
 8011ade:	69fb      	ldr	r3, [r7, #28]
 8011ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8011ae4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8011ae6:	683b      	ldr	r3, [r7, #0]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	697a      	ldr	r2, [r7, #20]
 8011aec:	4013      	ands	r3, r2
 8011aee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8011af0:	693a      	ldr	r2, [r7, #16]
 8011af2:	697b      	ldr	r3, [r7, #20]
 8011af4:	429a      	cmp	r2, r3
 8011af6:	f040 8148 	bne.w	8011d8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	685b      	ldr	r3, [r3, #4]
 8011afe:	f003 0303 	and.w	r3, r3, #3
 8011b02:	2b01      	cmp	r3, #1
 8011b04:	d005      	beq.n	8011b12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011b06:	683b      	ldr	r3, [r7, #0]
 8011b08:	685b      	ldr	r3, [r3, #4]
 8011b0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8011b0e:	2b02      	cmp	r3, #2
 8011b10:	d130      	bne.n	8011b74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	689b      	ldr	r3, [r3, #8]
 8011b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8011b18:	69fb      	ldr	r3, [r7, #28]
 8011b1a:	005b      	lsls	r3, r3, #1
 8011b1c:	2203      	movs	r2, #3
 8011b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8011b22:	43db      	mvns	r3, r3
 8011b24:	69ba      	ldr	r2, [r7, #24]
 8011b26:	4013      	ands	r3, r2
 8011b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8011b2a:	683b      	ldr	r3, [r7, #0]
 8011b2c:	68da      	ldr	r2, [r3, #12]
 8011b2e:	69fb      	ldr	r3, [r7, #28]
 8011b30:	005b      	lsls	r3, r3, #1
 8011b32:	fa02 f303 	lsl.w	r3, r2, r3
 8011b36:	69ba      	ldr	r2, [r7, #24]
 8011b38:	4313      	orrs	r3, r2
 8011b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	69ba      	ldr	r2, [r7, #24]
 8011b40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	685b      	ldr	r3, [r3, #4]
 8011b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8011b48:	2201      	movs	r2, #1
 8011b4a:	69fb      	ldr	r3, [r7, #28]
 8011b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8011b50:	43db      	mvns	r3, r3
 8011b52:	69ba      	ldr	r2, [r7, #24]
 8011b54:	4013      	ands	r3, r2
 8011b56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8011b58:	683b      	ldr	r3, [r7, #0]
 8011b5a:	685b      	ldr	r3, [r3, #4]
 8011b5c:	091b      	lsrs	r3, r3, #4
 8011b5e:	f003 0201 	and.w	r2, r3, #1
 8011b62:	69fb      	ldr	r3, [r7, #28]
 8011b64:	fa02 f303 	lsl.w	r3, r2, r3
 8011b68:	69ba      	ldr	r2, [r7, #24]
 8011b6a:	4313      	orrs	r3, r2
 8011b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	69ba      	ldr	r2, [r7, #24]
 8011b72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8011b74:	683b      	ldr	r3, [r7, #0]
 8011b76:	685b      	ldr	r3, [r3, #4]
 8011b78:	f003 0303 	and.w	r3, r3, #3
 8011b7c:	2b03      	cmp	r3, #3
 8011b7e:	d017      	beq.n	8011bb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	68db      	ldr	r3, [r3, #12]
 8011b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8011b86:	69fb      	ldr	r3, [r7, #28]
 8011b88:	005b      	lsls	r3, r3, #1
 8011b8a:	2203      	movs	r2, #3
 8011b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8011b90:	43db      	mvns	r3, r3
 8011b92:	69ba      	ldr	r2, [r7, #24]
 8011b94:	4013      	ands	r3, r2
 8011b96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8011b98:	683b      	ldr	r3, [r7, #0]
 8011b9a:	689a      	ldr	r2, [r3, #8]
 8011b9c:	69fb      	ldr	r3, [r7, #28]
 8011b9e:	005b      	lsls	r3, r3, #1
 8011ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8011ba4:	69ba      	ldr	r2, [r7, #24]
 8011ba6:	4313      	orrs	r3, r2
 8011ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	69ba      	ldr	r2, [r7, #24]
 8011bae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	685b      	ldr	r3, [r3, #4]
 8011bb4:	f003 0303 	and.w	r3, r3, #3
 8011bb8:	2b02      	cmp	r3, #2
 8011bba:	d123      	bne.n	8011c04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8011bbc:	69fb      	ldr	r3, [r7, #28]
 8011bbe:	08da      	lsrs	r2, r3, #3
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	3208      	adds	r2, #8
 8011bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8011bca:	69fb      	ldr	r3, [r7, #28]
 8011bcc:	f003 0307 	and.w	r3, r3, #7
 8011bd0:	009b      	lsls	r3, r3, #2
 8011bd2:	220f      	movs	r2, #15
 8011bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8011bd8:	43db      	mvns	r3, r3
 8011bda:	69ba      	ldr	r2, [r7, #24]
 8011bdc:	4013      	ands	r3, r2
 8011bde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8011be0:	683b      	ldr	r3, [r7, #0]
 8011be2:	691a      	ldr	r2, [r3, #16]
 8011be4:	69fb      	ldr	r3, [r7, #28]
 8011be6:	f003 0307 	and.w	r3, r3, #7
 8011bea:	009b      	lsls	r3, r3, #2
 8011bec:	fa02 f303 	lsl.w	r3, r2, r3
 8011bf0:	69ba      	ldr	r2, [r7, #24]
 8011bf2:	4313      	orrs	r3, r2
 8011bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8011bf6:	69fb      	ldr	r3, [r7, #28]
 8011bf8:	08da      	lsrs	r2, r3, #3
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	3208      	adds	r2, #8
 8011bfe:	69b9      	ldr	r1, [r7, #24]
 8011c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8011c0a:	69fb      	ldr	r3, [r7, #28]
 8011c0c:	005b      	lsls	r3, r3, #1
 8011c0e:	2203      	movs	r2, #3
 8011c10:	fa02 f303 	lsl.w	r3, r2, r3
 8011c14:	43db      	mvns	r3, r3
 8011c16:	69ba      	ldr	r2, [r7, #24]
 8011c18:	4013      	ands	r3, r2
 8011c1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011c1c:	683b      	ldr	r3, [r7, #0]
 8011c1e:	685b      	ldr	r3, [r3, #4]
 8011c20:	f003 0203 	and.w	r2, r3, #3
 8011c24:	69fb      	ldr	r3, [r7, #28]
 8011c26:	005b      	lsls	r3, r3, #1
 8011c28:	fa02 f303 	lsl.w	r3, r2, r3
 8011c2c:	69ba      	ldr	r2, [r7, #24]
 8011c2e:	4313      	orrs	r3, r2
 8011c30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	69ba      	ldr	r2, [r7, #24]
 8011c36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8011c38:	683b      	ldr	r3, [r7, #0]
 8011c3a:	685b      	ldr	r3, [r3, #4]
 8011c3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	f000 80a2 	beq.w	8011d8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011c46:	2300      	movs	r3, #0
 8011c48:	60fb      	str	r3, [r7, #12]
 8011c4a:	4b57      	ldr	r3, [pc, #348]	@ (8011da8 <HAL_GPIO_Init+0x2e8>)
 8011c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c4e:	4a56      	ldr	r2, [pc, #344]	@ (8011da8 <HAL_GPIO_Init+0x2e8>)
 8011c50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8011c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8011c56:	4b54      	ldr	r3, [pc, #336]	@ (8011da8 <HAL_GPIO_Init+0x2e8>)
 8011c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011c5e:	60fb      	str	r3, [r7, #12]
 8011c60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8011c62:	4a52      	ldr	r2, [pc, #328]	@ (8011dac <HAL_GPIO_Init+0x2ec>)
 8011c64:	69fb      	ldr	r3, [r7, #28]
 8011c66:	089b      	lsrs	r3, r3, #2
 8011c68:	3302      	adds	r3, #2
 8011c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8011c70:	69fb      	ldr	r3, [r7, #28]
 8011c72:	f003 0303 	and.w	r3, r3, #3
 8011c76:	009b      	lsls	r3, r3, #2
 8011c78:	220f      	movs	r2, #15
 8011c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8011c7e:	43db      	mvns	r3, r3
 8011c80:	69ba      	ldr	r2, [r7, #24]
 8011c82:	4013      	ands	r3, r2
 8011c84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	4a49      	ldr	r2, [pc, #292]	@ (8011db0 <HAL_GPIO_Init+0x2f0>)
 8011c8a:	4293      	cmp	r3, r2
 8011c8c:	d019      	beq.n	8011cc2 <HAL_GPIO_Init+0x202>
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	4a48      	ldr	r2, [pc, #288]	@ (8011db4 <HAL_GPIO_Init+0x2f4>)
 8011c92:	4293      	cmp	r3, r2
 8011c94:	d013      	beq.n	8011cbe <HAL_GPIO_Init+0x1fe>
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	4a47      	ldr	r2, [pc, #284]	@ (8011db8 <HAL_GPIO_Init+0x2f8>)
 8011c9a:	4293      	cmp	r3, r2
 8011c9c:	d00d      	beq.n	8011cba <HAL_GPIO_Init+0x1fa>
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	4a46      	ldr	r2, [pc, #280]	@ (8011dbc <HAL_GPIO_Init+0x2fc>)
 8011ca2:	4293      	cmp	r3, r2
 8011ca4:	d007      	beq.n	8011cb6 <HAL_GPIO_Init+0x1f6>
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	4a45      	ldr	r2, [pc, #276]	@ (8011dc0 <HAL_GPIO_Init+0x300>)
 8011caa:	4293      	cmp	r3, r2
 8011cac:	d101      	bne.n	8011cb2 <HAL_GPIO_Init+0x1f2>
 8011cae:	2304      	movs	r3, #4
 8011cb0:	e008      	b.n	8011cc4 <HAL_GPIO_Init+0x204>
 8011cb2:	2307      	movs	r3, #7
 8011cb4:	e006      	b.n	8011cc4 <HAL_GPIO_Init+0x204>
 8011cb6:	2303      	movs	r3, #3
 8011cb8:	e004      	b.n	8011cc4 <HAL_GPIO_Init+0x204>
 8011cba:	2302      	movs	r3, #2
 8011cbc:	e002      	b.n	8011cc4 <HAL_GPIO_Init+0x204>
 8011cbe:	2301      	movs	r3, #1
 8011cc0:	e000      	b.n	8011cc4 <HAL_GPIO_Init+0x204>
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	69fa      	ldr	r2, [r7, #28]
 8011cc6:	f002 0203 	and.w	r2, r2, #3
 8011cca:	0092      	lsls	r2, r2, #2
 8011ccc:	4093      	lsls	r3, r2
 8011cce:	69ba      	ldr	r2, [r7, #24]
 8011cd0:	4313      	orrs	r3, r2
 8011cd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8011cd4:	4935      	ldr	r1, [pc, #212]	@ (8011dac <HAL_GPIO_Init+0x2ec>)
 8011cd6:	69fb      	ldr	r3, [r7, #28]
 8011cd8:	089b      	lsrs	r3, r3, #2
 8011cda:	3302      	adds	r3, #2
 8011cdc:	69ba      	ldr	r2, [r7, #24]
 8011cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011ce2:	4b38      	ldr	r3, [pc, #224]	@ (8011dc4 <HAL_GPIO_Init+0x304>)
 8011ce4:	689b      	ldr	r3, [r3, #8]
 8011ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011ce8:	693b      	ldr	r3, [r7, #16]
 8011cea:	43db      	mvns	r3, r3
 8011cec:	69ba      	ldr	r2, [r7, #24]
 8011cee:	4013      	ands	r3, r2
 8011cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8011cf2:	683b      	ldr	r3, [r7, #0]
 8011cf4:	685b      	ldr	r3, [r3, #4]
 8011cf6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d003      	beq.n	8011d06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8011cfe:	69ba      	ldr	r2, [r7, #24]
 8011d00:	693b      	ldr	r3, [r7, #16]
 8011d02:	4313      	orrs	r3, r2
 8011d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8011d06:	4a2f      	ldr	r2, [pc, #188]	@ (8011dc4 <HAL_GPIO_Init+0x304>)
 8011d08:	69bb      	ldr	r3, [r7, #24]
 8011d0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8011d0c:	4b2d      	ldr	r3, [pc, #180]	@ (8011dc4 <HAL_GPIO_Init+0x304>)
 8011d0e:	68db      	ldr	r3, [r3, #12]
 8011d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011d12:	693b      	ldr	r3, [r7, #16]
 8011d14:	43db      	mvns	r3, r3
 8011d16:	69ba      	ldr	r2, [r7, #24]
 8011d18:	4013      	ands	r3, r2
 8011d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	685b      	ldr	r3, [r3, #4]
 8011d20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d003      	beq.n	8011d30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8011d28:	69ba      	ldr	r2, [r7, #24]
 8011d2a:	693b      	ldr	r3, [r7, #16]
 8011d2c:	4313      	orrs	r3, r2
 8011d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8011d30:	4a24      	ldr	r2, [pc, #144]	@ (8011dc4 <HAL_GPIO_Init+0x304>)
 8011d32:	69bb      	ldr	r3, [r7, #24]
 8011d34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8011d36:	4b23      	ldr	r3, [pc, #140]	@ (8011dc4 <HAL_GPIO_Init+0x304>)
 8011d38:	685b      	ldr	r3, [r3, #4]
 8011d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011d3c:	693b      	ldr	r3, [r7, #16]
 8011d3e:	43db      	mvns	r3, r3
 8011d40:	69ba      	ldr	r2, [r7, #24]
 8011d42:	4013      	ands	r3, r2
 8011d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8011d46:	683b      	ldr	r3, [r7, #0]
 8011d48:	685b      	ldr	r3, [r3, #4]
 8011d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d003      	beq.n	8011d5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8011d52:	69ba      	ldr	r2, [r7, #24]
 8011d54:	693b      	ldr	r3, [r7, #16]
 8011d56:	4313      	orrs	r3, r2
 8011d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8011d5a:	4a1a      	ldr	r2, [pc, #104]	@ (8011dc4 <HAL_GPIO_Init+0x304>)
 8011d5c:	69bb      	ldr	r3, [r7, #24]
 8011d5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011d60:	4b18      	ldr	r3, [pc, #96]	@ (8011dc4 <HAL_GPIO_Init+0x304>)
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011d66:	693b      	ldr	r3, [r7, #16]
 8011d68:	43db      	mvns	r3, r3
 8011d6a:	69ba      	ldr	r2, [r7, #24]
 8011d6c:	4013      	ands	r3, r2
 8011d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8011d70:	683b      	ldr	r3, [r7, #0]
 8011d72:	685b      	ldr	r3, [r3, #4]
 8011d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d003      	beq.n	8011d84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8011d7c:	69ba      	ldr	r2, [r7, #24]
 8011d7e:	693b      	ldr	r3, [r7, #16]
 8011d80:	4313      	orrs	r3, r2
 8011d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8011d84:	4a0f      	ldr	r2, [pc, #60]	@ (8011dc4 <HAL_GPIO_Init+0x304>)
 8011d86:	69bb      	ldr	r3, [r7, #24]
 8011d88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011d8a:	69fb      	ldr	r3, [r7, #28]
 8011d8c:	3301      	adds	r3, #1
 8011d8e:	61fb      	str	r3, [r7, #28]
 8011d90:	69fb      	ldr	r3, [r7, #28]
 8011d92:	2b0f      	cmp	r3, #15
 8011d94:	f67f aea2 	bls.w	8011adc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8011d98:	bf00      	nop
 8011d9a:	bf00      	nop
 8011d9c:	3724      	adds	r7, #36	@ 0x24
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da4:	4770      	bx	lr
 8011da6:	bf00      	nop
 8011da8:	40023800 	.word	0x40023800
 8011dac:	40013800 	.word	0x40013800
 8011db0:	40020000 	.word	0x40020000
 8011db4:	40020400 	.word	0x40020400
 8011db8:	40020800 	.word	0x40020800
 8011dbc:	40020c00 	.word	0x40020c00
 8011dc0:	40021000 	.word	0x40021000
 8011dc4:	40013c00 	.word	0x40013c00

08011dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011dc8:	b480      	push	{r7}
 8011dca:	b083      	sub	sp, #12
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
 8011dd0:	460b      	mov	r3, r1
 8011dd2:	807b      	strh	r3, [r7, #2]
 8011dd4:	4613      	mov	r3, r2
 8011dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8011dd8:	787b      	ldrb	r3, [r7, #1]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d003      	beq.n	8011de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8011dde:	887a      	ldrh	r2, [r7, #2]
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8011de4:	e003      	b.n	8011dee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8011de6:	887b      	ldrh	r3, [r7, #2]
 8011de8:	041a      	lsls	r2, r3, #16
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	619a      	str	r2, [r3, #24]
}
 8011dee:	bf00      	nop
 8011df0:	370c      	adds	r7, #12
 8011df2:	46bd      	mov	sp, r7
 8011df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df8:	4770      	bx	lr
	...

08011dfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b084      	sub	sp, #16
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d101      	bne.n	8011e0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8011e0a:	2301      	movs	r3, #1
 8011e0c:	e12b      	b.n	8012066 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011e14:	b2db      	uxtb	r3, r3
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d106      	bne.n	8011e28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	2200      	movs	r2, #0
 8011e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8011e22:	6878      	ldr	r0, [r7, #4]
 8011e24:	f7ff fad2 	bl	80113cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	2224      	movs	r2, #36	@ 0x24
 8011e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	681a      	ldr	r2, [r3, #0]
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	f022 0201 	bic.w	r2, r2, #1
 8011e3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	681a      	ldr	r2, [r3, #0]
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011e4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	681a      	ldr	r2, [r3, #0]
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8011e5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8011e60:	f001 fe70 	bl	8013b44 <HAL_RCC_GetPCLK1Freq>
 8011e64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	685b      	ldr	r3, [r3, #4]
 8011e6a:	4a81      	ldr	r2, [pc, #516]	@ (8012070 <HAL_I2C_Init+0x274>)
 8011e6c:	4293      	cmp	r3, r2
 8011e6e:	d807      	bhi.n	8011e80 <HAL_I2C_Init+0x84>
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	4a80      	ldr	r2, [pc, #512]	@ (8012074 <HAL_I2C_Init+0x278>)
 8011e74:	4293      	cmp	r3, r2
 8011e76:	bf94      	ite	ls
 8011e78:	2301      	movls	r3, #1
 8011e7a:	2300      	movhi	r3, #0
 8011e7c:	b2db      	uxtb	r3, r3
 8011e7e:	e006      	b.n	8011e8e <HAL_I2C_Init+0x92>
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	4a7d      	ldr	r2, [pc, #500]	@ (8012078 <HAL_I2C_Init+0x27c>)
 8011e84:	4293      	cmp	r3, r2
 8011e86:	bf94      	ite	ls
 8011e88:	2301      	movls	r3, #1
 8011e8a:	2300      	movhi	r3, #0
 8011e8c:	b2db      	uxtb	r3, r3
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d001      	beq.n	8011e96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8011e92:	2301      	movs	r3, #1
 8011e94:	e0e7      	b.n	8012066 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	4a78      	ldr	r2, [pc, #480]	@ (801207c <HAL_I2C_Init+0x280>)
 8011e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8011e9e:	0c9b      	lsrs	r3, r3, #18
 8011ea0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	685b      	ldr	r3, [r3, #4]
 8011ea8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	68ba      	ldr	r2, [r7, #8]
 8011eb2:	430a      	orrs	r2, r1
 8011eb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	6a1b      	ldr	r3, [r3, #32]
 8011ebc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	685b      	ldr	r3, [r3, #4]
 8011ec4:	4a6a      	ldr	r2, [pc, #424]	@ (8012070 <HAL_I2C_Init+0x274>)
 8011ec6:	4293      	cmp	r3, r2
 8011ec8:	d802      	bhi.n	8011ed0 <HAL_I2C_Init+0xd4>
 8011eca:	68bb      	ldr	r3, [r7, #8]
 8011ecc:	3301      	adds	r3, #1
 8011ece:	e009      	b.n	8011ee4 <HAL_I2C_Init+0xe8>
 8011ed0:	68bb      	ldr	r3, [r7, #8]
 8011ed2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8011ed6:	fb02 f303 	mul.w	r3, r2, r3
 8011eda:	4a69      	ldr	r2, [pc, #420]	@ (8012080 <HAL_I2C_Init+0x284>)
 8011edc:	fba2 2303 	umull	r2, r3, r2, r3
 8011ee0:	099b      	lsrs	r3, r3, #6
 8011ee2:	3301      	adds	r3, #1
 8011ee4:	687a      	ldr	r2, [r7, #4]
 8011ee6:	6812      	ldr	r2, [r2, #0]
 8011ee8:	430b      	orrs	r3, r1
 8011eea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	69db      	ldr	r3, [r3, #28]
 8011ef2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8011ef6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	685b      	ldr	r3, [r3, #4]
 8011efe:	495c      	ldr	r1, [pc, #368]	@ (8012070 <HAL_I2C_Init+0x274>)
 8011f00:	428b      	cmp	r3, r1
 8011f02:	d819      	bhi.n	8011f38 <HAL_I2C_Init+0x13c>
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	1e59      	subs	r1, r3, #1
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	685b      	ldr	r3, [r3, #4]
 8011f0c:	005b      	lsls	r3, r3, #1
 8011f0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8011f12:	1c59      	adds	r1, r3, #1
 8011f14:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8011f18:	400b      	ands	r3, r1
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d00a      	beq.n	8011f34 <HAL_I2C_Init+0x138>
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	1e59      	subs	r1, r3, #1
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	685b      	ldr	r3, [r3, #4]
 8011f26:	005b      	lsls	r3, r3, #1
 8011f28:	fbb1 f3f3 	udiv	r3, r1, r3
 8011f2c:	3301      	adds	r3, #1
 8011f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011f32:	e051      	b.n	8011fd8 <HAL_I2C_Init+0x1dc>
 8011f34:	2304      	movs	r3, #4
 8011f36:	e04f      	b.n	8011fd8 <HAL_I2C_Init+0x1dc>
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	689b      	ldr	r3, [r3, #8]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d111      	bne.n	8011f64 <HAL_I2C_Init+0x168>
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	1e58      	subs	r0, r3, #1
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	6859      	ldr	r1, [r3, #4]
 8011f48:	460b      	mov	r3, r1
 8011f4a:	005b      	lsls	r3, r3, #1
 8011f4c:	440b      	add	r3, r1
 8011f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8011f52:	3301      	adds	r3, #1
 8011f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	bf0c      	ite	eq
 8011f5c:	2301      	moveq	r3, #1
 8011f5e:	2300      	movne	r3, #0
 8011f60:	b2db      	uxtb	r3, r3
 8011f62:	e012      	b.n	8011f8a <HAL_I2C_Init+0x18e>
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	1e58      	subs	r0, r3, #1
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	6859      	ldr	r1, [r3, #4]
 8011f6c:	460b      	mov	r3, r1
 8011f6e:	009b      	lsls	r3, r3, #2
 8011f70:	440b      	add	r3, r1
 8011f72:	0099      	lsls	r1, r3, #2
 8011f74:	440b      	add	r3, r1
 8011f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8011f7a:	3301      	adds	r3, #1
 8011f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	bf0c      	ite	eq
 8011f84:	2301      	moveq	r3, #1
 8011f86:	2300      	movne	r3, #0
 8011f88:	b2db      	uxtb	r3, r3
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d001      	beq.n	8011f92 <HAL_I2C_Init+0x196>
 8011f8e:	2301      	movs	r3, #1
 8011f90:	e022      	b.n	8011fd8 <HAL_I2C_Init+0x1dc>
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	689b      	ldr	r3, [r3, #8]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d10e      	bne.n	8011fb8 <HAL_I2C_Init+0x1bc>
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	1e58      	subs	r0, r3, #1
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	6859      	ldr	r1, [r3, #4]
 8011fa2:	460b      	mov	r3, r1
 8011fa4:	005b      	lsls	r3, r3, #1
 8011fa6:	440b      	add	r3, r1
 8011fa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8011fac:	3301      	adds	r3, #1
 8011fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011fb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011fb6:	e00f      	b.n	8011fd8 <HAL_I2C_Init+0x1dc>
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	1e58      	subs	r0, r3, #1
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	6859      	ldr	r1, [r3, #4]
 8011fc0:	460b      	mov	r3, r1
 8011fc2:	009b      	lsls	r3, r3, #2
 8011fc4:	440b      	add	r3, r1
 8011fc6:	0099      	lsls	r1, r3, #2
 8011fc8:	440b      	add	r3, r1
 8011fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8011fce:	3301      	adds	r3, #1
 8011fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011fd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011fd8:	6879      	ldr	r1, [r7, #4]
 8011fda:	6809      	ldr	r1, [r1, #0]
 8011fdc:	4313      	orrs	r3, r2
 8011fde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	69da      	ldr	r2, [r3, #28]
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	6a1b      	ldr	r3, [r3, #32]
 8011ff2:	431a      	orrs	r2, r3
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	430a      	orrs	r2, r1
 8011ffa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	689b      	ldr	r3, [r3, #8]
 8012002:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8012006:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801200a:	687a      	ldr	r2, [r7, #4]
 801200c:	6911      	ldr	r1, [r2, #16]
 801200e:	687a      	ldr	r2, [r7, #4]
 8012010:	68d2      	ldr	r2, [r2, #12]
 8012012:	4311      	orrs	r1, r2
 8012014:	687a      	ldr	r2, [r7, #4]
 8012016:	6812      	ldr	r2, [r2, #0]
 8012018:	430b      	orrs	r3, r1
 801201a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	68db      	ldr	r3, [r3, #12]
 8012022:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	695a      	ldr	r2, [r3, #20]
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	699b      	ldr	r3, [r3, #24]
 801202e:	431a      	orrs	r2, r3
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	430a      	orrs	r2, r1
 8012036:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	681a      	ldr	r2, [r3, #0]
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	f042 0201 	orr.w	r2, r2, #1
 8012046:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2200      	movs	r2, #0
 801204c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	2220      	movs	r2, #32
 8012052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	2200      	movs	r2, #0
 801205a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	2200      	movs	r2, #0
 8012060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8012064:	2300      	movs	r3, #0
}
 8012066:	4618      	mov	r0, r3
 8012068:	3710      	adds	r7, #16
 801206a:	46bd      	mov	sp, r7
 801206c:	bd80      	pop	{r7, pc}
 801206e:	bf00      	nop
 8012070:	000186a0 	.word	0x000186a0
 8012074:	001e847f 	.word	0x001e847f
 8012078:	003d08ff 	.word	0x003d08ff
 801207c:	431bde83 	.word	0x431bde83
 8012080:	10624dd3 	.word	0x10624dd3

08012084 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012084:	b580      	push	{r7, lr}
 8012086:	b088      	sub	sp, #32
 8012088:	af02      	add	r7, sp, #8
 801208a:	60f8      	str	r0, [r7, #12]
 801208c:	4608      	mov	r0, r1
 801208e:	4611      	mov	r1, r2
 8012090:	461a      	mov	r2, r3
 8012092:	4603      	mov	r3, r0
 8012094:	817b      	strh	r3, [r7, #10]
 8012096:	460b      	mov	r3, r1
 8012098:	813b      	strh	r3, [r7, #8]
 801209a:	4613      	mov	r3, r2
 801209c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801209e:	f7ff fbf9 	bl	8011894 <HAL_GetTick>
 80120a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80120aa:	b2db      	uxtb	r3, r3
 80120ac:	2b20      	cmp	r3, #32
 80120ae:	f040 80d9 	bne.w	8012264 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80120b2:	697b      	ldr	r3, [r7, #20]
 80120b4:	9300      	str	r3, [sp, #0]
 80120b6:	2319      	movs	r3, #25
 80120b8:	2201      	movs	r2, #1
 80120ba:	496d      	ldr	r1, [pc, #436]	@ (8012270 <HAL_I2C_Mem_Write+0x1ec>)
 80120bc:	68f8      	ldr	r0, [r7, #12]
 80120be:	f000 f971 	bl	80123a4 <I2C_WaitOnFlagUntilTimeout>
 80120c2:	4603      	mov	r3, r0
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d001      	beq.n	80120cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80120c8:	2302      	movs	r3, #2
 80120ca:	e0cc      	b.n	8012266 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80120d2:	2b01      	cmp	r3, #1
 80120d4:	d101      	bne.n	80120da <HAL_I2C_Mem_Write+0x56>
 80120d6:	2302      	movs	r3, #2
 80120d8:	e0c5      	b.n	8012266 <HAL_I2C_Mem_Write+0x1e2>
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	2201      	movs	r2, #1
 80120de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	f003 0301 	and.w	r3, r3, #1
 80120ec:	2b01      	cmp	r3, #1
 80120ee:	d007      	beq.n	8012100 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	681a      	ldr	r2, [r3, #0]
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	f042 0201 	orr.w	r2, r2, #1
 80120fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	681a      	ldr	r2, [r3, #0]
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801210e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	2221      	movs	r2, #33	@ 0x21
 8012114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	2240      	movs	r2, #64	@ 0x40
 801211c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	2200      	movs	r2, #0
 8012124:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	6a3a      	ldr	r2, [r7, #32]
 801212a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012130:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012136:	b29a      	uxth	r2, r3
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	4a4d      	ldr	r2, [pc, #308]	@ (8012274 <HAL_I2C_Mem_Write+0x1f0>)
 8012140:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8012142:	88f8      	ldrh	r0, [r7, #6]
 8012144:	893a      	ldrh	r2, [r7, #8]
 8012146:	8979      	ldrh	r1, [r7, #10]
 8012148:	697b      	ldr	r3, [r7, #20]
 801214a:	9301      	str	r3, [sp, #4]
 801214c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801214e:	9300      	str	r3, [sp, #0]
 8012150:	4603      	mov	r3, r0
 8012152:	68f8      	ldr	r0, [r7, #12]
 8012154:	f000 f890 	bl	8012278 <I2C_RequestMemoryWrite>
 8012158:	4603      	mov	r3, r0
 801215a:	2b00      	cmp	r3, #0
 801215c:	d052      	beq.n	8012204 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 801215e:	2301      	movs	r3, #1
 8012160:	e081      	b.n	8012266 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012162:	697a      	ldr	r2, [r7, #20]
 8012164:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012166:	68f8      	ldr	r0, [r7, #12]
 8012168:	f000 fa36 	bl	80125d8 <I2C_WaitOnTXEFlagUntilTimeout>
 801216c:	4603      	mov	r3, r0
 801216e:	2b00      	cmp	r3, #0
 8012170:	d00d      	beq.n	801218e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012176:	2b04      	cmp	r3, #4
 8012178:	d107      	bne.n	801218a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	681a      	ldr	r2, [r3, #0]
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012188:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 801218a:	2301      	movs	r3, #1
 801218c:	e06b      	b.n	8012266 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012192:	781a      	ldrb	r2, [r3, #0]
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801219e:	1c5a      	adds	r2, r3, #1
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80121a8:	3b01      	subs	r3, #1
 80121aa:	b29a      	uxth	r2, r3
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80121b4:	b29b      	uxth	r3, r3
 80121b6:	3b01      	subs	r3, #1
 80121b8:	b29a      	uxth	r2, r3
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	695b      	ldr	r3, [r3, #20]
 80121c4:	f003 0304 	and.w	r3, r3, #4
 80121c8:	2b04      	cmp	r3, #4
 80121ca:	d11b      	bne.n	8012204 <HAL_I2C_Mem_Write+0x180>
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d017      	beq.n	8012204 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121d8:	781a      	ldrb	r2, [r3, #0]
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121e4:	1c5a      	adds	r2, r3, #1
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80121ee:	3b01      	subs	r3, #1
 80121f0:	b29a      	uxth	r2, r3
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80121fa:	b29b      	uxth	r3, r3
 80121fc:	3b01      	subs	r3, #1
 80121fe:	b29a      	uxth	r2, r3
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012208:	2b00      	cmp	r3, #0
 801220a:	d1aa      	bne.n	8012162 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801220c:	697a      	ldr	r2, [r7, #20]
 801220e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012210:	68f8      	ldr	r0, [r7, #12]
 8012212:	f000 fa29 	bl	8012668 <I2C_WaitOnBTFFlagUntilTimeout>
 8012216:	4603      	mov	r3, r0
 8012218:	2b00      	cmp	r3, #0
 801221a:	d00d      	beq.n	8012238 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012220:	2b04      	cmp	r3, #4
 8012222:	d107      	bne.n	8012234 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	681a      	ldr	r2, [r3, #0]
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012232:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8012234:	2301      	movs	r3, #1
 8012236:	e016      	b.n	8012266 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	681a      	ldr	r2, [r3, #0]
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012246:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	2220      	movs	r2, #32
 801224c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	2200      	movs	r2, #0
 8012254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	2200      	movs	r2, #0
 801225c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8012260:	2300      	movs	r3, #0
 8012262:	e000      	b.n	8012266 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8012264:	2302      	movs	r3, #2
  }
}
 8012266:	4618      	mov	r0, r3
 8012268:	3718      	adds	r7, #24
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}
 801226e:	bf00      	nop
 8012270:	00100002 	.word	0x00100002
 8012274:	ffff0000 	.word	0xffff0000

08012278 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b088      	sub	sp, #32
 801227c:	af02      	add	r7, sp, #8
 801227e:	60f8      	str	r0, [r7, #12]
 8012280:	4608      	mov	r0, r1
 8012282:	4611      	mov	r1, r2
 8012284:	461a      	mov	r2, r3
 8012286:	4603      	mov	r3, r0
 8012288:	817b      	strh	r3, [r7, #10]
 801228a:	460b      	mov	r3, r1
 801228c:	813b      	strh	r3, [r7, #8]
 801228e:	4613      	mov	r3, r2
 8012290:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	681a      	ldr	r2, [r3, #0]
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80122a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80122a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122a4:	9300      	str	r3, [sp, #0]
 80122a6:	6a3b      	ldr	r3, [r7, #32]
 80122a8:	2200      	movs	r2, #0
 80122aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80122ae:	68f8      	ldr	r0, [r7, #12]
 80122b0:	f000 f878 	bl	80123a4 <I2C_WaitOnFlagUntilTimeout>
 80122b4:	4603      	mov	r3, r0
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d00d      	beq.n	80122d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80122c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80122c8:	d103      	bne.n	80122d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80122d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80122d2:	2303      	movs	r3, #3
 80122d4:	e05f      	b.n	8012396 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80122d6:	897b      	ldrh	r3, [r7, #10]
 80122d8:	b2db      	uxtb	r3, r3
 80122da:	461a      	mov	r2, r3
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80122e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80122e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122e8:	6a3a      	ldr	r2, [r7, #32]
 80122ea:	492d      	ldr	r1, [pc, #180]	@ (80123a0 <I2C_RequestMemoryWrite+0x128>)
 80122ec:	68f8      	ldr	r0, [r7, #12]
 80122ee:	f000 f8d3 	bl	8012498 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80122f2:	4603      	mov	r3, r0
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d001      	beq.n	80122fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80122f8:	2301      	movs	r3, #1
 80122fa:	e04c      	b.n	8012396 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80122fc:	2300      	movs	r3, #0
 80122fe:	617b      	str	r3, [r7, #20]
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	695b      	ldr	r3, [r3, #20]
 8012306:	617b      	str	r3, [r7, #20]
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	699b      	ldr	r3, [r3, #24]
 801230e:	617b      	str	r3, [r7, #20]
 8012310:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8012312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012314:	6a39      	ldr	r1, [r7, #32]
 8012316:	68f8      	ldr	r0, [r7, #12]
 8012318:	f000 f95e 	bl	80125d8 <I2C_WaitOnTXEFlagUntilTimeout>
 801231c:	4603      	mov	r3, r0
 801231e:	2b00      	cmp	r3, #0
 8012320:	d00d      	beq.n	801233e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012326:	2b04      	cmp	r3, #4
 8012328:	d107      	bne.n	801233a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	681a      	ldr	r2, [r3, #0]
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012338:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801233a:	2301      	movs	r3, #1
 801233c:	e02b      	b.n	8012396 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801233e:	88fb      	ldrh	r3, [r7, #6]
 8012340:	2b01      	cmp	r3, #1
 8012342:	d105      	bne.n	8012350 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8012344:	893b      	ldrh	r3, [r7, #8]
 8012346:	b2da      	uxtb	r2, r3
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	611a      	str	r2, [r3, #16]
 801234e:	e021      	b.n	8012394 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8012350:	893b      	ldrh	r3, [r7, #8]
 8012352:	0a1b      	lsrs	r3, r3, #8
 8012354:	b29b      	uxth	r3, r3
 8012356:	b2da      	uxtb	r2, r3
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801235e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012360:	6a39      	ldr	r1, [r7, #32]
 8012362:	68f8      	ldr	r0, [r7, #12]
 8012364:	f000 f938 	bl	80125d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8012368:	4603      	mov	r3, r0
 801236a:	2b00      	cmp	r3, #0
 801236c:	d00d      	beq.n	801238a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012372:	2b04      	cmp	r3, #4
 8012374:	d107      	bne.n	8012386 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	681a      	ldr	r2, [r3, #0]
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012384:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8012386:	2301      	movs	r3, #1
 8012388:	e005      	b.n	8012396 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801238a:	893b      	ldrh	r3, [r7, #8]
 801238c:	b2da      	uxtb	r2, r3
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8012394:	2300      	movs	r3, #0
}
 8012396:	4618      	mov	r0, r3
 8012398:	3718      	adds	r7, #24
 801239a:	46bd      	mov	sp, r7
 801239c:	bd80      	pop	{r7, pc}
 801239e:	bf00      	nop
 80123a0:	00010002 	.word	0x00010002

080123a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b084      	sub	sp, #16
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	60f8      	str	r0, [r7, #12]
 80123ac:	60b9      	str	r1, [r7, #8]
 80123ae:	603b      	str	r3, [r7, #0]
 80123b0:	4613      	mov	r3, r2
 80123b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80123b4:	e048      	b.n	8012448 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80123b6:	683b      	ldr	r3, [r7, #0]
 80123b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123bc:	d044      	beq.n	8012448 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80123be:	f7ff fa69 	bl	8011894 <HAL_GetTick>
 80123c2:	4602      	mov	r2, r0
 80123c4:	69bb      	ldr	r3, [r7, #24]
 80123c6:	1ad3      	subs	r3, r2, r3
 80123c8:	683a      	ldr	r2, [r7, #0]
 80123ca:	429a      	cmp	r2, r3
 80123cc:	d302      	bcc.n	80123d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80123ce:	683b      	ldr	r3, [r7, #0]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d139      	bne.n	8012448 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80123d4:	68bb      	ldr	r3, [r7, #8]
 80123d6:	0c1b      	lsrs	r3, r3, #16
 80123d8:	b2db      	uxtb	r3, r3
 80123da:	2b01      	cmp	r3, #1
 80123dc:	d10d      	bne.n	80123fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	695b      	ldr	r3, [r3, #20]
 80123e4:	43da      	mvns	r2, r3
 80123e6:	68bb      	ldr	r3, [r7, #8]
 80123e8:	4013      	ands	r3, r2
 80123ea:	b29b      	uxth	r3, r3
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	bf0c      	ite	eq
 80123f0:	2301      	moveq	r3, #1
 80123f2:	2300      	movne	r3, #0
 80123f4:	b2db      	uxtb	r3, r3
 80123f6:	461a      	mov	r2, r3
 80123f8:	e00c      	b.n	8012414 <I2C_WaitOnFlagUntilTimeout+0x70>
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	699b      	ldr	r3, [r3, #24]
 8012400:	43da      	mvns	r2, r3
 8012402:	68bb      	ldr	r3, [r7, #8]
 8012404:	4013      	ands	r3, r2
 8012406:	b29b      	uxth	r3, r3
 8012408:	2b00      	cmp	r3, #0
 801240a:	bf0c      	ite	eq
 801240c:	2301      	moveq	r3, #1
 801240e:	2300      	movne	r3, #0
 8012410:	b2db      	uxtb	r3, r3
 8012412:	461a      	mov	r2, r3
 8012414:	79fb      	ldrb	r3, [r7, #7]
 8012416:	429a      	cmp	r2, r3
 8012418:	d116      	bne.n	8012448 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	2200      	movs	r2, #0
 801241e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	2220      	movs	r2, #32
 8012424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	2200      	movs	r2, #0
 801242c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012434:	f043 0220 	orr.w	r2, r3, #32
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	2200      	movs	r2, #0
 8012440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8012444:	2301      	movs	r3, #1
 8012446:	e023      	b.n	8012490 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012448:	68bb      	ldr	r3, [r7, #8]
 801244a:	0c1b      	lsrs	r3, r3, #16
 801244c:	b2db      	uxtb	r3, r3
 801244e:	2b01      	cmp	r3, #1
 8012450:	d10d      	bne.n	801246e <I2C_WaitOnFlagUntilTimeout+0xca>
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	695b      	ldr	r3, [r3, #20]
 8012458:	43da      	mvns	r2, r3
 801245a:	68bb      	ldr	r3, [r7, #8]
 801245c:	4013      	ands	r3, r2
 801245e:	b29b      	uxth	r3, r3
 8012460:	2b00      	cmp	r3, #0
 8012462:	bf0c      	ite	eq
 8012464:	2301      	moveq	r3, #1
 8012466:	2300      	movne	r3, #0
 8012468:	b2db      	uxtb	r3, r3
 801246a:	461a      	mov	r2, r3
 801246c:	e00c      	b.n	8012488 <I2C_WaitOnFlagUntilTimeout+0xe4>
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	699b      	ldr	r3, [r3, #24]
 8012474:	43da      	mvns	r2, r3
 8012476:	68bb      	ldr	r3, [r7, #8]
 8012478:	4013      	ands	r3, r2
 801247a:	b29b      	uxth	r3, r3
 801247c:	2b00      	cmp	r3, #0
 801247e:	bf0c      	ite	eq
 8012480:	2301      	moveq	r3, #1
 8012482:	2300      	movne	r3, #0
 8012484:	b2db      	uxtb	r3, r3
 8012486:	461a      	mov	r2, r3
 8012488:	79fb      	ldrb	r3, [r7, #7]
 801248a:	429a      	cmp	r2, r3
 801248c:	d093      	beq.n	80123b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801248e:	2300      	movs	r3, #0
}
 8012490:	4618      	mov	r0, r3
 8012492:	3710      	adds	r7, #16
 8012494:	46bd      	mov	sp, r7
 8012496:	bd80      	pop	{r7, pc}

08012498 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b084      	sub	sp, #16
 801249c:	af00      	add	r7, sp, #0
 801249e:	60f8      	str	r0, [r7, #12]
 80124a0:	60b9      	str	r1, [r7, #8]
 80124a2:	607a      	str	r2, [r7, #4]
 80124a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80124a6:	e071      	b.n	801258c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	695b      	ldr	r3, [r3, #20]
 80124ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80124b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80124b6:	d123      	bne.n	8012500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	681a      	ldr	r2, [r3, #0]
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80124c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80124d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	2200      	movs	r2, #0
 80124d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	2220      	movs	r2, #32
 80124dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	2200      	movs	r2, #0
 80124e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80124ec:	f043 0204 	orr.w	r2, r3, #4
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	2200      	movs	r2, #0
 80124f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80124fc:	2301      	movs	r3, #1
 80124fe:	e067      	b.n	80125d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012506:	d041      	beq.n	801258c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012508:	f7ff f9c4 	bl	8011894 <HAL_GetTick>
 801250c:	4602      	mov	r2, r0
 801250e:	683b      	ldr	r3, [r7, #0]
 8012510:	1ad3      	subs	r3, r2, r3
 8012512:	687a      	ldr	r2, [r7, #4]
 8012514:	429a      	cmp	r2, r3
 8012516:	d302      	bcc.n	801251e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d136      	bne.n	801258c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 801251e:	68bb      	ldr	r3, [r7, #8]
 8012520:	0c1b      	lsrs	r3, r3, #16
 8012522:	b2db      	uxtb	r3, r3
 8012524:	2b01      	cmp	r3, #1
 8012526:	d10c      	bne.n	8012542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	695b      	ldr	r3, [r3, #20]
 801252e:	43da      	mvns	r2, r3
 8012530:	68bb      	ldr	r3, [r7, #8]
 8012532:	4013      	ands	r3, r2
 8012534:	b29b      	uxth	r3, r3
 8012536:	2b00      	cmp	r3, #0
 8012538:	bf14      	ite	ne
 801253a:	2301      	movne	r3, #1
 801253c:	2300      	moveq	r3, #0
 801253e:	b2db      	uxtb	r3, r3
 8012540:	e00b      	b.n	801255a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	699b      	ldr	r3, [r3, #24]
 8012548:	43da      	mvns	r2, r3
 801254a:	68bb      	ldr	r3, [r7, #8]
 801254c:	4013      	ands	r3, r2
 801254e:	b29b      	uxth	r3, r3
 8012550:	2b00      	cmp	r3, #0
 8012552:	bf14      	ite	ne
 8012554:	2301      	movne	r3, #1
 8012556:	2300      	moveq	r3, #0
 8012558:	b2db      	uxtb	r3, r3
 801255a:	2b00      	cmp	r3, #0
 801255c:	d016      	beq.n	801258c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	2200      	movs	r2, #0
 8012562:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	2220      	movs	r2, #32
 8012568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	2200      	movs	r2, #0
 8012570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012578:	f043 0220 	orr.w	r2, r3, #32
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	2200      	movs	r2, #0
 8012584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8012588:	2301      	movs	r3, #1
 801258a:	e021      	b.n	80125d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801258c:	68bb      	ldr	r3, [r7, #8]
 801258e:	0c1b      	lsrs	r3, r3, #16
 8012590:	b2db      	uxtb	r3, r3
 8012592:	2b01      	cmp	r3, #1
 8012594:	d10c      	bne.n	80125b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	695b      	ldr	r3, [r3, #20]
 801259c:	43da      	mvns	r2, r3
 801259e:	68bb      	ldr	r3, [r7, #8]
 80125a0:	4013      	ands	r3, r2
 80125a2:	b29b      	uxth	r3, r3
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	bf14      	ite	ne
 80125a8:	2301      	movne	r3, #1
 80125aa:	2300      	moveq	r3, #0
 80125ac:	b2db      	uxtb	r3, r3
 80125ae:	e00b      	b.n	80125c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	699b      	ldr	r3, [r3, #24]
 80125b6:	43da      	mvns	r2, r3
 80125b8:	68bb      	ldr	r3, [r7, #8]
 80125ba:	4013      	ands	r3, r2
 80125bc:	b29b      	uxth	r3, r3
 80125be:	2b00      	cmp	r3, #0
 80125c0:	bf14      	ite	ne
 80125c2:	2301      	movne	r3, #1
 80125c4:	2300      	moveq	r3, #0
 80125c6:	b2db      	uxtb	r3, r3
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	f47f af6d 	bne.w	80124a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80125ce:	2300      	movs	r3, #0
}
 80125d0:	4618      	mov	r0, r3
 80125d2:	3710      	adds	r7, #16
 80125d4:	46bd      	mov	sp, r7
 80125d6:	bd80      	pop	{r7, pc}

080125d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b084      	sub	sp, #16
 80125dc:	af00      	add	r7, sp, #0
 80125de:	60f8      	str	r0, [r7, #12]
 80125e0:	60b9      	str	r1, [r7, #8]
 80125e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80125e4:	e034      	b.n	8012650 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80125e6:	68f8      	ldr	r0, [r7, #12]
 80125e8:	f000 f886 	bl	80126f8 <I2C_IsAcknowledgeFailed>
 80125ec:	4603      	mov	r3, r0
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d001      	beq.n	80125f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80125f2:	2301      	movs	r3, #1
 80125f4:	e034      	b.n	8012660 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80125f6:	68bb      	ldr	r3, [r7, #8]
 80125f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125fc:	d028      	beq.n	8012650 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80125fe:	f7ff f949 	bl	8011894 <HAL_GetTick>
 8012602:	4602      	mov	r2, r0
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	1ad3      	subs	r3, r2, r3
 8012608:	68ba      	ldr	r2, [r7, #8]
 801260a:	429a      	cmp	r2, r3
 801260c:	d302      	bcc.n	8012614 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 801260e:	68bb      	ldr	r3, [r7, #8]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d11d      	bne.n	8012650 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	695b      	ldr	r3, [r3, #20]
 801261a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801261e:	2b80      	cmp	r3, #128	@ 0x80
 8012620:	d016      	beq.n	8012650 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	2200      	movs	r2, #0
 8012626:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	2220      	movs	r2, #32
 801262c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	2200      	movs	r2, #0
 8012634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801263c:	f043 0220 	orr.w	r2, r3, #32
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	2200      	movs	r2, #0
 8012648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 801264c:	2301      	movs	r3, #1
 801264e:	e007      	b.n	8012660 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	695b      	ldr	r3, [r3, #20]
 8012656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801265a:	2b80      	cmp	r3, #128	@ 0x80
 801265c:	d1c3      	bne.n	80125e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801265e:	2300      	movs	r3, #0
}
 8012660:	4618      	mov	r0, r3
 8012662:	3710      	adds	r7, #16
 8012664:	46bd      	mov	sp, r7
 8012666:	bd80      	pop	{r7, pc}

08012668 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b084      	sub	sp, #16
 801266c:	af00      	add	r7, sp, #0
 801266e:	60f8      	str	r0, [r7, #12]
 8012670:	60b9      	str	r1, [r7, #8]
 8012672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8012674:	e034      	b.n	80126e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8012676:	68f8      	ldr	r0, [r7, #12]
 8012678:	f000 f83e 	bl	80126f8 <I2C_IsAcknowledgeFailed>
 801267c:	4603      	mov	r3, r0
 801267e:	2b00      	cmp	r3, #0
 8012680:	d001      	beq.n	8012686 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8012682:	2301      	movs	r3, #1
 8012684:	e034      	b.n	80126f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012686:	68bb      	ldr	r3, [r7, #8]
 8012688:	f1b3 3fff 	cmp.w	r3, #4294967295
 801268c:	d028      	beq.n	80126e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801268e:	f7ff f901 	bl	8011894 <HAL_GetTick>
 8012692:	4602      	mov	r2, r0
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	1ad3      	subs	r3, r2, r3
 8012698:	68ba      	ldr	r2, [r7, #8]
 801269a:	429a      	cmp	r2, r3
 801269c:	d302      	bcc.n	80126a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 801269e:	68bb      	ldr	r3, [r7, #8]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d11d      	bne.n	80126e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	695b      	ldr	r3, [r3, #20]
 80126aa:	f003 0304 	and.w	r3, r3, #4
 80126ae:	2b04      	cmp	r3, #4
 80126b0:	d016      	beq.n	80126e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	2200      	movs	r2, #0
 80126b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	2220      	movs	r2, #32
 80126bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	2200      	movs	r2, #0
 80126c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80126cc:	f043 0220 	orr.w	r2, r3, #32
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	2200      	movs	r2, #0
 80126d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80126dc:	2301      	movs	r3, #1
 80126de:	e007      	b.n	80126f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	695b      	ldr	r3, [r3, #20]
 80126e6:	f003 0304 	and.w	r3, r3, #4
 80126ea:	2b04      	cmp	r3, #4
 80126ec:	d1c3      	bne.n	8012676 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80126ee:	2300      	movs	r3, #0
}
 80126f0:	4618      	mov	r0, r3
 80126f2:	3710      	adds	r7, #16
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd80      	pop	{r7, pc}

080126f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80126f8:	b480      	push	{r7}
 80126fa:	b083      	sub	sp, #12
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	695b      	ldr	r3, [r3, #20]
 8012706:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801270a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801270e:	d11b      	bne.n	8012748 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8012718:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	2200      	movs	r2, #0
 801271e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	2220      	movs	r2, #32
 8012724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	2200      	movs	r2, #0
 801272c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012734:	f043 0204 	orr.w	r2, r3, #4
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	2200      	movs	r2, #0
 8012740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8012744:	2301      	movs	r3, #1
 8012746:	e000      	b.n	801274a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8012748:	2300      	movs	r3, #0
}
 801274a:	4618      	mov	r0, r3
 801274c:	370c      	adds	r7, #12
 801274e:	46bd      	mov	sp, r7
 8012750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012754:	4770      	bx	lr
	...

08012758 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b088      	sub	sp, #32
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d101      	bne.n	801276a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8012766:	2301      	movs	r3, #1
 8012768:	e128      	b.n	80129bc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012770:	b2db      	uxtb	r3, r3
 8012772:	2b00      	cmp	r3, #0
 8012774:	d109      	bne.n	801278a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	2200      	movs	r2, #0
 801277a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	4a90      	ldr	r2, [pc, #576]	@ (80129c4 <HAL_I2S_Init+0x26c>)
 8012782:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8012784:	6878      	ldr	r0, [r7, #4]
 8012786:	f7fe fe69 	bl	801145c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	2202      	movs	r2, #2
 801278e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	69db      	ldr	r3, [r3, #28]
 8012798:	687a      	ldr	r2, [r7, #4]
 801279a:	6812      	ldr	r2, [r2, #0]
 801279c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80127a0:	f023 030f 	bic.w	r3, r3, #15
 80127a4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	2202      	movs	r2, #2
 80127ac:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	695b      	ldr	r3, [r3, #20]
 80127b2:	2b02      	cmp	r3, #2
 80127b4:	d060      	beq.n	8012878 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	68db      	ldr	r3, [r3, #12]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d102      	bne.n	80127c4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80127be:	2310      	movs	r3, #16
 80127c0:	617b      	str	r3, [r7, #20]
 80127c2:	e001      	b.n	80127c8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80127c4:	2320      	movs	r3, #32
 80127c6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	689b      	ldr	r3, [r3, #8]
 80127cc:	2b20      	cmp	r3, #32
 80127ce:	d802      	bhi.n	80127d6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80127d0:	697b      	ldr	r3, [r7, #20]
 80127d2:	005b      	lsls	r3, r3, #1
 80127d4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80127d6:	2001      	movs	r0, #1
 80127d8:	f001 fab8 	bl	8013d4c <HAL_RCCEx_GetPeriphCLKFreq>
 80127dc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	691b      	ldr	r3, [r3, #16]
 80127e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80127e6:	d125      	bne.n	8012834 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	68db      	ldr	r3, [r3, #12]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d010      	beq.n	8012812 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80127f0:	697b      	ldr	r3, [r7, #20]
 80127f2:	009b      	lsls	r3, r3, #2
 80127f4:	68fa      	ldr	r2, [r7, #12]
 80127f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80127fa:	4613      	mov	r3, r2
 80127fc:	009b      	lsls	r3, r3, #2
 80127fe:	4413      	add	r3, r2
 8012800:	005b      	lsls	r3, r3, #1
 8012802:	461a      	mov	r2, r3
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	695b      	ldr	r3, [r3, #20]
 8012808:	fbb2 f3f3 	udiv	r3, r2, r3
 801280c:	3305      	adds	r3, #5
 801280e:	613b      	str	r3, [r7, #16]
 8012810:	e01f      	b.n	8012852 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012812:	697b      	ldr	r3, [r7, #20]
 8012814:	00db      	lsls	r3, r3, #3
 8012816:	68fa      	ldr	r2, [r7, #12]
 8012818:	fbb2 f2f3 	udiv	r2, r2, r3
 801281c:	4613      	mov	r3, r2
 801281e:	009b      	lsls	r3, r3, #2
 8012820:	4413      	add	r3, r2
 8012822:	005b      	lsls	r3, r3, #1
 8012824:	461a      	mov	r2, r3
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	695b      	ldr	r3, [r3, #20]
 801282a:	fbb2 f3f3 	udiv	r3, r2, r3
 801282e:	3305      	adds	r3, #5
 8012830:	613b      	str	r3, [r7, #16]
 8012832:	e00e      	b.n	8012852 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012834:	68fa      	ldr	r2, [r7, #12]
 8012836:	697b      	ldr	r3, [r7, #20]
 8012838:	fbb2 f2f3 	udiv	r2, r2, r3
 801283c:	4613      	mov	r3, r2
 801283e:	009b      	lsls	r3, r3, #2
 8012840:	4413      	add	r3, r2
 8012842:	005b      	lsls	r3, r3, #1
 8012844:	461a      	mov	r2, r3
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	695b      	ldr	r3, [r3, #20]
 801284a:	fbb2 f3f3 	udiv	r3, r2, r3
 801284e:	3305      	adds	r3, #5
 8012850:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8012852:	693b      	ldr	r3, [r7, #16]
 8012854:	4a5c      	ldr	r2, [pc, #368]	@ (80129c8 <HAL_I2S_Init+0x270>)
 8012856:	fba2 2303 	umull	r2, r3, r2, r3
 801285a:	08db      	lsrs	r3, r3, #3
 801285c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 801285e:	693b      	ldr	r3, [r7, #16]
 8012860:	f003 0301 	and.w	r3, r3, #1
 8012864:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8012866:	693a      	ldr	r2, [r7, #16]
 8012868:	69bb      	ldr	r3, [r7, #24]
 801286a:	1ad3      	subs	r3, r2, r3
 801286c:	085b      	lsrs	r3, r3, #1
 801286e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8012870:	69bb      	ldr	r3, [r7, #24]
 8012872:	021b      	lsls	r3, r3, #8
 8012874:	61bb      	str	r3, [r7, #24]
 8012876:	e003      	b.n	8012880 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8012878:	2302      	movs	r3, #2
 801287a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 801287c:	2300      	movs	r3, #0
 801287e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8012880:	69fb      	ldr	r3, [r7, #28]
 8012882:	2b01      	cmp	r3, #1
 8012884:	d902      	bls.n	801288c <HAL_I2S_Init+0x134>
 8012886:	69fb      	ldr	r3, [r7, #28]
 8012888:	2bff      	cmp	r3, #255	@ 0xff
 801288a:	d907      	bls.n	801289c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012890:	f043 0210 	orr.w	r2, r3, #16
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8012898:	2301      	movs	r3, #1
 801289a:	e08f      	b.n	80129bc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	691a      	ldr	r2, [r3, #16]
 80128a0:	69bb      	ldr	r3, [r7, #24]
 80128a2:	ea42 0103 	orr.w	r1, r2, r3
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	69fa      	ldr	r2, [r7, #28]
 80128ac:	430a      	orrs	r2, r1
 80128ae:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	69db      	ldr	r3, [r3, #28]
 80128b6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80128ba:	f023 030f 	bic.w	r3, r3, #15
 80128be:	687a      	ldr	r2, [r7, #4]
 80128c0:	6851      	ldr	r1, [r2, #4]
 80128c2:	687a      	ldr	r2, [r7, #4]
 80128c4:	6892      	ldr	r2, [r2, #8]
 80128c6:	4311      	orrs	r1, r2
 80128c8:	687a      	ldr	r2, [r7, #4]
 80128ca:	68d2      	ldr	r2, [r2, #12]
 80128cc:	4311      	orrs	r1, r2
 80128ce:	687a      	ldr	r2, [r7, #4]
 80128d0:	6992      	ldr	r2, [r2, #24]
 80128d2:	430a      	orrs	r2, r1
 80128d4:	431a      	orrs	r2, r3
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80128de:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	6a1b      	ldr	r3, [r3, #32]
 80128e4:	2b01      	cmp	r3, #1
 80128e6:	d161      	bne.n	80129ac <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	4a38      	ldr	r2, [pc, #224]	@ (80129cc <HAL_I2S_Init+0x274>)
 80128ec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	4a37      	ldr	r2, [pc, #220]	@ (80129d0 <HAL_I2S_Init+0x278>)
 80128f4:	4293      	cmp	r3, r2
 80128f6:	d101      	bne.n	80128fc <HAL_I2S_Init+0x1a4>
 80128f8:	4b36      	ldr	r3, [pc, #216]	@ (80129d4 <HAL_I2S_Init+0x27c>)
 80128fa:	e001      	b.n	8012900 <HAL_I2S_Init+0x1a8>
 80128fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8012900:	69db      	ldr	r3, [r3, #28]
 8012902:	687a      	ldr	r2, [r7, #4]
 8012904:	6812      	ldr	r2, [r2, #0]
 8012906:	4932      	ldr	r1, [pc, #200]	@ (80129d0 <HAL_I2S_Init+0x278>)
 8012908:	428a      	cmp	r2, r1
 801290a:	d101      	bne.n	8012910 <HAL_I2S_Init+0x1b8>
 801290c:	4a31      	ldr	r2, [pc, #196]	@ (80129d4 <HAL_I2S_Init+0x27c>)
 801290e:	e001      	b.n	8012914 <HAL_I2S_Init+0x1bc>
 8012910:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8012914:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8012918:	f023 030f 	bic.w	r3, r3, #15
 801291c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	4a2b      	ldr	r2, [pc, #172]	@ (80129d0 <HAL_I2S_Init+0x278>)
 8012924:	4293      	cmp	r3, r2
 8012926:	d101      	bne.n	801292c <HAL_I2S_Init+0x1d4>
 8012928:	4b2a      	ldr	r3, [pc, #168]	@ (80129d4 <HAL_I2S_Init+0x27c>)
 801292a:	e001      	b.n	8012930 <HAL_I2S_Init+0x1d8>
 801292c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8012930:	2202      	movs	r2, #2
 8012932:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	4a25      	ldr	r2, [pc, #148]	@ (80129d0 <HAL_I2S_Init+0x278>)
 801293a:	4293      	cmp	r3, r2
 801293c:	d101      	bne.n	8012942 <HAL_I2S_Init+0x1ea>
 801293e:	4b25      	ldr	r3, [pc, #148]	@ (80129d4 <HAL_I2S_Init+0x27c>)
 8012940:	e001      	b.n	8012946 <HAL_I2S_Init+0x1ee>
 8012942:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8012946:	69db      	ldr	r3, [r3, #28]
 8012948:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	685b      	ldr	r3, [r3, #4]
 801294e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012952:	d003      	beq.n	801295c <HAL_I2S_Init+0x204>
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	685b      	ldr	r3, [r3, #4]
 8012958:	2b00      	cmp	r3, #0
 801295a:	d103      	bne.n	8012964 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 801295c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012960:	613b      	str	r3, [r7, #16]
 8012962:	e001      	b.n	8012968 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8012964:	2300      	movs	r3, #0
 8012966:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8012968:	693b      	ldr	r3, [r7, #16]
 801296a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	689b      	ldr	r3, [r3, #8]
 8012970:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8012972:	4313      	orrs	r3, r2
 8012974:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	68db      	ldr	r3, [r3, #12]
 801297a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 801297c:	4313      	orrs	r3, r2
 801297e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	699b      	ldr	r3, [r3, #24]
 8012984:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8012986:	4313      	orrs	r3, r2
 8012988:	b29a      	uxth	r2, r3
 801298a:	897b      	ldrh	r3, [r7, #10]
 801298c:	4313      	orrs	r3, r2
 801298e:	b29b      	uxth	r3, r3
 8012990:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8012994:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	4a0d      	ldr	r2, [pc, #52]	@ (80129d0 <HAL_I2S_Init+0x278>)
 801299c:	4293      	cmp	r3, r2
 801299e:	d101      	bne.n	80129a4 <HAL_I2S_Init+0x24c>
 80129a0:	4b0c      	ldr	r3, [pc, #48]	@ (80129d4 <HAL_I2S_Init+0x27c>)
 80129a2:	e001      	b.n	80129a8 <HAL_I2S_Init+0x250>
 80129a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80129a8:	897a      	ldrh	r2, [r7, #10]
 80129aa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	2200      	movs	r2, #0
 80129b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	2201      	movs	r2, #1
 80129b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80129ba:	2300      	movs	r3, #0
}
 80129bc:	4618      	mov	r0, r3
 80129be:	3720      	adds	r7, #32
 80129c0:	46bd      	mov	sp, r7
 80129c2:	bd80      	pop	{r7, pc}
 80129c4:	08012ca9 	.word	0x08012ca9
 80129c8:	cccccccd 	.word	0xcccccccd
 80129cc:	08012e31 	.word	0x08012e31
 80129d0:	40003800 	.word	0x40003800
 80129d4:	40003400 	.word	0x40003400

080129d8 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b086      	sub	sp, #24
 80129dc:	af00      	add	r7, sp, #0
 80129de:	60f8      	str	r0, [r7, #12]
 80129e0:	60b9      	str	r1, [r7, #8]
 80129e2:	603b      	str	r3, [r7, #0]
 80129e4:	4613      	mov	r3, r2
 80129e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80129e8:	68bb      	ldr	r3, [r7, #8]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d002      	beq.n	80129f4 <HAL_I2S_Transmit+0x1c>
 80129ee:	88fb      	ldrh	r3, [r7, #6]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d101      	bne.n	80129f8 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 80129f4:	2301      	movs	r3, #1
 80129f6:	e0d8      	b.n	8012baa <HAL_I2S_Transmit+0x1d2>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80129fe:	b2db      	uxtb	r3, r3
 8012a00:	2b01      	cmp	r3, #1
 8012a02:	d001      	beq.n	8012a08 <HAL_I2S_Transmit+0x30>
  {
    return HAL_BUSY;
 8012a04:	2302      	movs	r3, #2
 8012a06:	e0d0      	b.n	8012baa <HAL_I2S_Transmit+0x1d2>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012a0e:	b2db      	uxtb	r3, r3
 8012a10:	2b01      	cmp	r3, #1
 8012a12:	d101      	bne.n	8012a18 <HAL_I2S_Transmit+0x40>
 8012a14:	2302      	movs	r3, #2
 8012a16:	e0c8      	b.n	8012baa <HAL_I2S_Transmit+0x1d2>
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	2201      	movs	r2, #1
 8012a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	2203      	movs	r2, #3
 8012a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	68ba      	ldr	r2, [r7, #8]
 8012a32:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	69db      	ldr	r3, [r3, #28]
 8012a3a:	f003 0307 	and.w	r3, r3, #7
 8012a3e:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8012a40:	697b      	ldr	r3, [r7, #20]
 8012a42:	2b03      	cmp	r3, #3
 8012a44:	d002      	beq.n	8012a4c <HAL_I2S_Transmit+0x74>
 8012a46:	697b      	ldr	r3, [r7, #20]
 8012a48:	2b05      	cmp	r3, #5
 8012a4a:	d10a      	bne.n	8012a62 <HAL_I2S_Transmit+0x8a>
  {
    hi2s->TxXferSize = (Size << 1U);
 8012a4c:	88fb      	ldrh	r3, [r7, #6]
 8012a4e:	005b      	lsls	r3, r3, #1
 8012a50:	b29a      	uxth	r2, r3
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8012a56:	88fb      	ldrh	r3, [r7, #6]
 8012a58:	005b      	lsls	r3, r3, #1
 8012a5a:	b29a      	uxth	r2, r3
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012a60:	e005      	b.n	8012a6e <HAL_I2S_Transmit+0x96>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	88fa      	ldrh	r2, [r7, #6]
 8012a66:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	88fa      	ldrh	r2, [r7, #6]
 8012a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	69db      	ldr	r3, [r3, #28]
 8012a74:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	69db      	ldr	r3, [r3, #28]
 8012a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8012a80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012a84:	d007      	beq.n	8012a96 <HAL_I2S_Transmit+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	69da      	ldr	r2, [r3, #28]
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8012a94:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8012a96:	683b      	ldr	r3, [r7, #0]
 8012a98:	2201      	movs	r2, #1
 8012a9a:	2102      	movs	r1, #2
 8012a9c:	68f8      	ldr	r0, [r7, #12]
 8012a9e:	f000 f98d 	bl	8012dbc <I2S_WaitFlagStateUntilTimeout>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d04e      	beq.n	8012b46 <HAL_I2S_Transmit+0x16e>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012aac:	f043 0201 	orr.w	r2, r3, #1
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	2201      	movs	r2, #1
 8012ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2s);
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	2200      	movs	r2, #0
 8012ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8012ac4:	2301      	movs	r3, #1
 8012ac6:	e070      	b.n	8012baa <HAL_I2S_Transmit+0x1d2>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012acc:	881a      	ldrh	r2, [r3, #0]
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ad8:	1c9a      	adds	r2, r3, #2
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2s->TxXferCount--;
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012ae2:	b29b      	uxth	r3, r3
 8012ae4:	3b01      	subs	r3, #1
 8012ae6:	b29a      	uxth	r2, r3
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8012aec:	683b      	ldr	r3, [r7, #0]
 8012aee:	2201      	movs	r2, #1
 8012af0:	2102      	movs	r1, #2
 8012af2:	68f8      	ldr	r0, [r7, #12]
 8012af4:	f000 f962 	bl	8012dbc <I2S_WaitFlagStateUntilTimeout>
 8012af8:	4603      	mov	r3, r0
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d00f      	beq.n	8012b1e <HAL_I2S_Transmit+0x146>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012b02:	f043 0201 	orr.w	r2, r3, #1
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	2201      	movs	r2, #1
 8012b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	2200      	movs	r2, #0
 8012b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8012b1a:	2301      	movs	r3, #1
 8012b1c:	e045      	b.n	8012baa <HAL_I2S_Transmit+0x1d2>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	689b      	ldr	r3, [r3, #8]
 8012b24:	f003 0308 	and.w	r3, r3, #8
 8012b28:	2b08      	cmp	r3, #8
 8012b2a:	d10c      	bne.n	8012b46 <HAL_I2S_Transmit+0x16e>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	613b      	str	r3, [r7, #16]
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	689b      	ldr	r3, [r3, #8]
 8012b36:	613b      	str	r3, [r7, #16]
 8012b38:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012b3e:	f043 0204 	orr.w	r2, r3, #4
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	645a      	str	r2, [r3, #68]	@ 0x44
  while (hi2s->TxXferCount > 0U)
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012b4a:	b29b      	uxth	r3, r3
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d1bb      	bne.n	8012ac8 <HAL_I2S_Transmit+0xf0>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 8012b50:	697b      	ldr	r3, [r7, #20]
 8012b52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d005      	beq.n	8012b66 <HAL_I2S_Transmit+0x18e>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 8012b5a:	697b      	ldr	r3, [r7, #20]
 8012b5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012b60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012b64:	d118      	bne.n	8012b98 <HAL_I2S_Transmit+0x1c0>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 8012b66:	683b      	ldr	r3, [r7, #0]
 8012b68:	2200      	movs	r2, #0
 8012b6a:	2180      	movs	r1, #128	@ 0x80
 8012b6c:	68f8      	ldr	r0, [r7, #12]
 8012b6e:	f000 f925 	bl	8012dbc <I2S_WaitFlagStateUntilTimeout>
 8012b72:	4603      	mov	r3, r0
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d00f      	beq.n	8012b98 <HAL_I2S_Transmit+0x1c0>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012b7c:	f043 0201 	orr.w	r2, r3, #1
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	2201      	movs	r2, #1
 8012b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	2200      	movs	r2, #0
 8012b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8012b94:	2301      	movs	r3, #1
 8012b96:	e008      	b.n	8012baa <HAL_I2S_Transmit+0x1d2>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	2201      	movs	r2, #1
 8012b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  __HAL_UNLOCK(hi2s);
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 8012ba8:	2300      	movs	r3, #0
}
 8012baa:	4618      	mov	r0, r3
 8012bac:	3718      	adds	r7, #24
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	bd80      	pop	{r7, pc}

08012bb2 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8012bb2:	b480      	push	{r7}
 8012bb4:	b083      	sub	sp, #12
 8012bb6:	af00      	add	r7, sp, #0
 8012bb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8012bba:	bf00      	nop
 8012bbc:	370c      	adds	r7, #12
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc4:	4770      	bx	lr

08012bc6 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8012bc6:	b480      	push	{r7}
 8012bc8:	b083      	sub	sp, #12
 8012bca:	af00      	add	r7, sp, #0
 8012bcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8012bce:	bf00      	nop
 8012bd0:	370c      	adds	r7, #12
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd8:	4770      	bx	lr

08012bda <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8012bda:	b480      	push	{r7}
 8012bdc:	b083      	sub	sp, #12
 8012bde:	af00      	add	r7, sp, #0
 8012be0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8012be2:	bf00      	nop
 8012be4:	370c      	adds	r7, #12
 8012be6:	46bd      	mov	sp, r7
 8012be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bec:	4770      	bx	lr

08012bee <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8012bee:	b580      	push	{r7, lr}
 8012bf0:	b082      	sub	sp, #8
 8012bf2:	af00      	add	r7, sp, #0
 8012bf4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012bfa:	881a      	ldrh	r2, [r3, #0]
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c06:	1c9a      	adds	r2, r3, #2
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012c10:	b29b      	uxth	r3, r3
 8012c12:	3b01      	subs	r3, #1
 8012c14:	b29a      	uxth	r2, r3
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012c1e:	b29b      	uxth	r3, r3
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d10e      	bne.n	8012c42 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	685a      	ldr	r2, [r3, #4]
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8012c32:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	2201      	movs	r2, #1
 8012c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8012c3c:	6878      	ldr	r0, [r7, #4]
 8012c3e:	f7ff ffb8 	bl	8012bb2 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8012c42:	bf00      	nop
 8012c44:	3708      	adds	r7, #8
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bd80      	pop	{r7, pc}

08012c4a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8012c4a:	b580      	push	{r7, lr}
 8012c4c:	b082      	sub	sp, #8
 8012c4e:	af00      	add	r7, sp, #0
 8012c50:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	68da      	ldr	r2, [r3, #12]
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c5c:	b292      	uxth	r2, r2
 8012c5e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c64:	1c9a      	adds	r2, r3, #2
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012c6e:	b29b      	uxth	r3, r3
 8012c70:	3b01      	subs	r3, #1
 8012c72:	b29a      	uxth	r2, r3
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012c7c:	b29b      	uxth	r3, r3
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d10e      	bne.n	8012ca0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	685a      	ldr	r2, [r3, #4]
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8012c90:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	2201      	movs	r2, #1
 8012c96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8012c9a:	6878      	ldr	r0, [r7, #4]
 8012c9c:	f7ff ff93 	bl	8012bc6 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8012ca0:	bf00      	nop
 8012ca2:	3708      	adds	r7, #8
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	bd80      	pop	{r7, pc}

08012ca8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b086      	sub	sp, #24
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	689b      	ldr	r3, [r3, #8]
 8012cb6:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012cbe:	b2db      	uxtb	r3, r3
 8012cc0:	2b04      	cmp	r3, #4
 8012cc2:	d13a      	bne.n	8012d3a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8012cc4:	697b      	ldr	r3, [r7, #20]
 8012cc6:	f003 0301 	and.w	r3, r3, #1
 8012cca:	2b01      	cmp	r3, #1
 8012ccc:	d109      	bne.n	8012ce2 <I2S_IRQHandler+0x3a>
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	685b      	ldr	r3, [r3, #4]
 8012cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012cd8:	2b40      	cmp	r3, #64	@ 0x40
 8012cda:	d102      	bne.n	8012ce2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8012cdc:	6878      	ldr	r0, [r7, #4]
 8012cde:	f7ff ffb4 	bl	8012c4a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8012ce2:	697b      	ldr	r3, [r7, #20]
 8012ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012ce8:	2b40      	cmp	r3, #64	@ 0x40
 8012cea:	d126      	bne.n	8012d3a <I2S_IRQHandler+0x92>
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	685b      	ldr	r3, [r3, #4]
 8012cf2:	f003 0320 	and.w	r3, r3, #32
 8012cf6:	2b20      	cmp	r3, #32
 8012cf8:	d11f      	bne.n	8012d3a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	685a      	ldr	r2, [r3, #4]
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8012d08:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8012d0a:	2300      	movs	r3, #0
 8012d0c:	613b      	str	r3, [r7, #16]
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	68db      	ldr	r3, [r3, #12]
 8012d14:	613b      	str	r3, [r7, #16]
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	689b      	ldr	r3, [r3, #8]
 8012d1c:	613b      	str	r3, [r7, #16]
 8012d1e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	2201      	movs	r2, #1
 8012d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012d2c:	f043 0202 	orr.w	r2, r3, #2
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8012d34:	6878      	ldr	r0, [r7, #4]
 8012d36:	f7ff ff50 	bl	8012bda <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012d40:	b2db      	uxtb	r3, r3
 8012d42:	2b03      	cmp	r3, #3
 8012d44:	d136      	bne.n	8012db4 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8012d46:	697b      	ldr	r3, [r7, #20]
 8012d48:	f003 0302 	and.w	r3, r3, #2
 8012d4c:	2b02      	cmp	r3, #2
 8012d4e:	d109      	bne.n	8012d64 <I2S_IRQHandler+0xbc>
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	685b      	ldr	r3, [r3, #4]
 8012d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012d5a:	2b80      	cmp	r3, #128	@ 0x80
 8012d5c:	d102      	bne.n	8012d64 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8012d5e:	6878      	ldr	r0, [r7, #4]
 8012d60:	f7ff ff45 	bl	8012bee <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8012d64:	697b      	ldr	r3, [r7, #20]
 8012d66:	f003 0308 	and.w	r3, r3, #8
 8012d6a:	2b08      	cmp	r3, #8
 8012d6c:	d122      	bne.n	8012db4 <I2S_IRQHandler+0x10c>
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	685b      	ldr	r3, [r3, #4]
 8012d74:	f003 0320 	and.w	r3, r3, #32
 8012d78:	2b20      	cmp	r3, #32
 8012d7a:	d11b      	bne.n	8012db4 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	685a      	ldr	r2, [r3, #4]
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8012d8a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	60fb      	str	r3, [r7, #12]
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	689b      	ldr	r3, [r3, #8]
 8012d96:	60fb      	str	r3, [r7, #12]
 8012d98:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	2201      	movs	r2, #1
 8012d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012da6:	f043 0204 	orr.w	r2, r3, #4
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8012dae:	6878      	ldr	r0, [r7, #4]
 8012db0:	f7ff ff13 	bl	8012bda <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8012db4:	bf00      	nop
 8012db6:	3718      	adds	r7, #24
 8012db8:	46bd      	mov	sp, r7
 8012dba:	bd80      	pop	{r7, pc}

08012dbc <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b086      	sub	sp, #24
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	60f8      	str	r0, [r7, #12]
 8012dc4:	60b9      	str	r1, [r7, #8]
 8012dc6:	603b      	str	r3, [r7, #0]
 8012dc8:	4613      	mov	r3, r2
 8012dca:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8012dcc:	f7fe fd62 	bl	8011894 <HAL_GetTick>
 8012dd0:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8012dd2:	e018      	b.n	8012e06 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8012dd4:	683b      	ldr	r3, [r7, #0]
 8012dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dda:	d014      	beq.n	8012e06 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8012ddc:	f7fe fd5a 	bl	8011894 <HAL_GetTick>
 8012de0:	4602      	mov	r2, r0
 8012de2:	697b      	ldr	r3, [r7, #20]
 8012de4:	1ad3      	subs	r3, r2, r3
 8012de6:	683a      	ldr	r2, [r7, #0]
 8012de8:	429a      	cmp	r2, r3
 8012dea:	d902      	bls.n	8012df2 <I2S_WaitFlagStateUntilTimeout+0x36>
 8012dec:	683b      	ldr	r3, [r7, #0]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d109      	bne.n	8012e06 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	2201      	movs	r2, #1
 8012df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8012e02:	2303      	movs	r3, #3
 8012e04:	e00f      	b.n	8012e26 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	689a      	ldr	r2, [r3, #8]
 8012e0c:	68bb      	ldr	r3, [r7, #8]
 8012e0e:	4013      	ands	r3, r2
 8012e10:	68ba      	ldr	r2, [r7, #8]
 8012e12:	429a      	cmp	r2, r3
 8012e14:	bf0c      	ite	eq
 8012e16:	2301      	moveq	r3, #1
 8012e18:	2300      	movne	r3, #0
 8012e1a:	b2db      	uxtb	r3, r3
 8012e1c:	461a      	mov	r2, r3
 8012e1e:	79fb      	ldrb	r3, [r7, #7]
 8012e20:	429a      	cmp	r2, r3
 8012e22:	d1d7      	bne.n	8012dd4 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8012e24:	2300      	movs	r3, #0
}
 8012e26:	4618      	mov	r0, r3
 8012e28:	3718      	adds	r7, #24
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	bd80      	pop	{r7, pc}
	...

08012e30 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8012e30:	b580      	push	{r7, lr}
 8012e32:	b088      	sub	sp, #32
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	689b      	ldr	r3, [r3, #8]
 8012e3e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	4a92      	ldr	r2, [pc, #584]	@ (8013090 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8012e46:	4293      	cmp	r3, r2
 8012e48:	d101      	bne.n	8012e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8012e4a:	4b92      	ldr	r3, [pc, #584]	@ (8013094 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8012e4c:	e001      	b.n	8012e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8012e4e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8012e52:	689b      	ldr	r3, [r3, #8]
 8012e54:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	685b      	ldr	r3, [r3, #4]
 8012e5c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	4a8b      	ldr	r2, [pc, #556]	@ (8013090 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8012e64:	4293      	cmp	r3, r2
 8012e66:	d101      	bne.n	8012e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8012e68:	4b8a      	ldr	r3, [pc, #552]	@ (8013094 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8012e6a:	e001      	b.n	8012e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8012e6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8012e70:	685b      	ldr	r3, [r3, #4]
 8012e72:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	685b      	ldr	r3, [r3, #4]
 8012e78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012e7c:	d004      	beq.n	8012e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	685b      	ldr	r3, [r3, #4]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	f040 8099 	bne.w	8012fba <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8012e88:	69fb      	ldr	r3, [r7, #28]
 8012e8a:	f003 0302 	and.w	r3, r3, #2
 8012e8e:	2b02      	cmp	r3, #2
 8012e90:	d107      	bne.n	8012ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8012e92:	697b      	ldr	r3, [r7, #20]
 8012e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d002      	beq.n	8012ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8012e9c:	6878      	ldr	r0, [r7, #4]
 8012e9e:	f000 f925 	bl	80130ec <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8012ea2:	69bb      	ldr	r3, [r7, #24]
 8012ea4:	f003 0301 	and.w	r3, r3, #1
 8012ea8:	2b01      	cmp	r3, #1
 8012eaa:	d107      	bne.n	8012ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8012eac:	693b      	ldr	r3, [r7, #16]
 8012eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d002      	beq.n	8012ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8012eb6:	6878      	ldr	r0, [r7, #4]
 8012eb8:	f000 f9c8 	bl	801324c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8012ebc:	69bb      	ldr	r3, [r7, #24]
 8012ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012ec2:	2b40      	cmp	r3, #64	@ 0x40
 8012ec4:	d13a      	bne.n	8012f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8012ec6:	693b      	ldr	r3, [r7, #16]
 8012ec8:	f003 0320 	and.w	r3, r3, #32
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d035      	beq.n	8012f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	4a6e      	ldr	r2, [pc, #440]	@ (8013090 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8012ed6:	4293      	cmp	r3, r2
 8012ed8:	d101      	bne.n	8012ede <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8012eda:	4b6e      	ldr	r3, [pc, #440]	@ (8013094 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8012edc:	e001      	b.n	8012ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8012ede:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8012ee2:	685a      	ldr	r2, [r3, #4]
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	4969      	ldr	r1, [pc, #420]	@ (8013090 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8012eea:	428b      	cmp	r3, r1
 8012eec:	d101      	bne.n	8012ef2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8012eee:	4b69      	ldr	r3, [pc, #420]	@ (8013094 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8012ef0:	e001      	b.n	8012ef6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8012ef2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8012ef6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8012efa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	685a      	ldr	r2, [r3, #4]
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8012f0a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	60fb      	str	r3, [r7, #12]
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	68db      	ldr	r3, [r3, #12]
 8012f16:	60fb      	str	r3, [r7, #12]
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	689b      	ldr	r3, [r3, #8]
 8012f1e:	60fb      	str	r3, [r7, #12]
 8012f20:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	2201      	movs	r2, #1
 8012f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012f2e:	f043 0202 	orr.w	r2, r3, #2
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8012f36:	6878      	ldr	r0, [r7, #4]
 8012f38:	f7ff fe4f 	bl	8012bda <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8012f3c:	69fb      	ldr	r3, [r7, #28]
 8012f3e:	f003 0308 	and.w	r3, r3, #8
 8012f42:	2b08      	cmp	r3, #8
 8012f44:	f040 80c3 	bne.w	80130ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8012f48:	697b      	ldr	r3, [r7, #20]
 8012f4a:	f003 0320 	and.w	r3, r3, #32
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	f000 80bd 	beq.w	80130ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	685a      	ldr	r2, [r3, #4]
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8012f62:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	4a49      	ldr	r2, [pc, #292]	@ (8013090 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8012f6a:	4293      	cmp	r3, r2
 8012f6c:	d101      	bne.n	8012f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8012f6e:	4b49      	ldr	r3, [pc, #292]	@ (8013094 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8012f70:	e001      	b.n	8012f76 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8012f72:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8012f76:	685a      	ldr	r2, [r3, #4]
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	4944      	ldr	r1, [pc, #272]	@ (8013090 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8012f7e:	428b      	cmp	r3, r1
 8012f80:	d101      	bne.n	8012f86 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8012f82:	4b44      	ldr	r3, [pc, #272]	@ (8013094 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8012f84:	e001      	b.n	8012f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8012f86:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8012f8a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8012f8e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8012f90:	2300      	movs	r3, #0
 8012f92:	60bb      	str	r3, [r7, #8]
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	689b      	ldr	r3, [r3, #8]
 8012f9a:	60bb      	str	r3, [r7, #8]
 8012f9c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	2201      	movs	r2, #1
 8012fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012faa:	f043 0204 	orr.w	r2, r3, #4
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8012fb2:	6878      	ldr	r0, [r7, #4]
 8012fb4:	f7ff fe11 	bl	8012bda <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8012fb8:	e089      	b.n	80130ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8012fba:	69bb      	ldr	r3, [r7, #24]
 8012fbc:	f003 0302 	and.w	r3, r3, #2
 8012fc0:	2b02      	cmp	r3, #2
 8012fc2:	d107      	bne.n	8012fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8012fc4:	693b      	ldr	r3, [r7, #16]
 8012fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d002      	beq.n	8012fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8012fce:	6878      	ldr	r0, [r7, #4]
 8012fd0:	f000 f8be 	bl	8013150 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8012fd4:	69fb      	ldr	r3, [r7, #28]
 8012fd6:	f003 0301 	and.w	r3, r3, #1
 8012fda:	2b01      	cmp	r3, #1
 8012fdc:	d107      	bne.n	8012fee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8012fde:	697b      	ldr	r3, [r7, #20]
 8012fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d002      	beq.n	8012fee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8012fe8:	6878      	ldr	r0, [r7, #4]
 8012fea:	f000 f8fd 	bl	80131e8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8012fee:	69fb      	ldr	r3, [r7, #28]
 8012ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012ff4:	2b40      	cmp	r3, #64	@ 0x40
 8012ff6:	d12f      	bne.n	8013058 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8012ff8:	697b      	ldr	r3, [r7, #20]
 8012ffa:	f003 0320 	and.w	r3, r3, #32
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d02a      	beq.n	8013058 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	685a      	ldr	r2, [r3, #4]
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8013010:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	4a1e      	ldr	r2, [pc, #120]	@ (8013090 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8013018:	4293      	cmp	r3, r2
 801301a:	d101      	bne.n	8013020 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 801301c:	4b1d      	ldr	r3, [pc, #116]	@ (8013094 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 801301e:	e001      	b.n	8013024 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8013020:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8013024:	685a      	ldr	r2, [r3, #4]
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	4919      	ldr	r1, [pc, #100]	@ (8013090 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 801302c:	428b      	cmp	r3, r1
 801302e:	d101      	bne.n	8013034 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8013030:	4b18      	ldr	r3, [pc, #96]	@ (8013094 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8013032:	e001      	b.n	8013038 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8013034:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8013038:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 801303c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	2201      	movs	r2, #1
 8013042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801304a:	f043 0202 	orr.w	r2, r3, #2
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8013052:	6878      	ldr	r0, [r7, #4]
 8013054:	f7ff fdc1 	bl	8012bda <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8013058:	69bb      	ldr	r3, [r7, #24]
 801305a:	f003 0308 	and.w	r3, r3, #8
 801305e:	2b08      	cmp	r3, #8
 8013060:	d136      	bne.n	80130d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8013062:	693b      	ldr	r3, [r7, #16]
 8013064:	f003 0320 	and.w	r3, r3, #32
 8013068:	2b00      	cmp	r3, #0
 801306a:	d031      	beq.n	80130d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	4a07      	ldr	r2, [pc, #28]	@ (8013090 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8013072:	4293      	cmp	r3, r2
 8013074:	d101      	bne.n	801307a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8013076:	4b07      	ldr	r3, [pc, #28]	@ (8013094 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8013078:	e001      	b.n	801307e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 801307a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 801307e:	685a      	ldr	r2, [r3, #4]
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	4902      	ldr	r1, [pc, #8]	@ (8013090 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8013086:	428b      	cmp	r3, r1
 8013088:	d106      	bne.n	8013098 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 801308a:	4b02      	ldr	r3, [pc, #8]	@ (8013094 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 801308c:	e006      	b.n	801309c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 801308e:	bf00      	nop
 8013090:	40003800 	.word	0x40003800
 8013094:	40003400 	.word	0x40003400
 8013098:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 801309c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80130a0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	685a      	ldr	r2, [r3, #4]
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80130b0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	2201      	movs	r2, #1
 80130b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80130be:	f043 0204 	orr.w	r2, r3, #4
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80130c6:	6878      	ldr	r0, [r7, #4]
 80130c8:	f7ff fd87 	bl	8012bda <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80130cc:	e000      	b.n	80130d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80130ce:	bf00      	nop
}
 80130d0:	bf00      	nop
 80130d2:	3720      	adds	r7, #32
 80130d4:	46bd      	mov	sp, r7
 80130d6:	bd80      	pop	{r7, pc}

080130d8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80130d8:	b480      	push	{r7}
 80130da:	b083      	sub	sp, #12
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80130e0:	bf00      	nop
 80130e2:	370c      	adds	r7, #12
 80130e4:	46bd      	mov	sp, r7
 80130e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ea:	4770      	bx	lr

080130ec <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b082      	sub	sp, #8
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80130f8:	1c99      	adds	r1, r3, #2
 80130fa:	687a      	ldr	r2, [r7, #4]
 80130fc:	6251      	str	r1, [r2, #36]	@ 0x24
 80130fe:	881a      	ldrh	r2, [r3, #0]
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801310a:	b29b      	uxth	r3, r3
 801310c:	3b01      	subs	r3, #1
 801310e:	b29a      	uxth	r2, r3
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013118:	b29b      	uxth	r3, r3
 801311a:	2b00      	cmp	r3, #0
 801311c:	d113      	bne.n	8013146 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	685a      	ldr	r2, [r3, #4]
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 801312c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013132:	b29b      	uxth	r3, r3
 8013134:	2b00      	cmp	r3, #0
 8013136:	d106      	bne.n	8013146 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	2201      	movs	r2, #1
 801313c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8013140:	6878      	ldr	r0, [r7, #4]
 8013142:	f7ff ffc9 	bl	80130d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8013146:	bf00      	nop
 8013148:	3708      	adds	r7, #8
 801314a:	46bd      	mov	sp, r7
 801314c:	bd80      	pop	{r7, pc}
	...

08013150 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b082      	sub	sp, #8
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801315c:	1c99      	adds	r1, r3, #2
 801315e:	687a      	ldr	r2, [r7, #4]
 8013160:	6251      	str	r1, [r2, #36]	@ 0x24
 8013162:	8819      	ldrh	r1, [r3, #0]
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	4a1d      	ldr	r2, [pc, #116]	@ (80131e0 <I2SEx_TxISR_I2SExt+0x90>)
 801316a:	4293      	cmp	r3, r2
 801316c:	d101      	bne.n	8013172 <I2SEx_TxISR_I2SExt+0x22>
 801316e:	4b1d      	ldr	r3, [pc, #116]	@ (80131e4 <I2SEx_TxISR_I2SExt+0x94>)
 8013170:	e001      	b.n	8013176 <I2SEx_TxISR_I2SExt+0x26>
 8013172:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8013176:	460a      	mov	r2, r1
 8013178:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801317e:	b29b      	uxth	r3, r3
 8013180:	3b01      	subs	r3, #1
 8013182:	b29a      	uxth	r2, r3
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801318c:	b29b      	uxth	r3, r3
 801318e:	2b00      	cmp	r3, #0
 8013190:	d121      	bne.n	80131d6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	4a12      	ldr	r2, [pc, #72]	@ (80131e0 <I2SEx_TxISR_I2SExt+0x90>)
 8013198:	4293      	cmp	r3, r2
 801319a:	d101      	bne.n	80131a0 <I2SEx_TxISR_I2SExt+0x50>
 801319c:	4b11      	ldr	r3, [pc, #68]	@ (80131e4 <I2SEx_TxISR_I2SExt+0x94>)
 801319e:	e001      	b.n	80131a4 <I2SEx_TxISR_I2SExt+0x54>
 80131a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80131a4:	685a      	ldr	r2, [r3, #4]
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	490d      	ldr	r1, [pc, #52]	@ (80131e0 <I2SEx_TxISR_I2SExt+0x90>)
 80131ac:	428b      	cmp	r3, r1
 80131ae:	d101      	bne.n	80131b4 <I2SEx_TxISR_I2SExt+0x64>
 80131b0:	4b0c      	ldr	r3, [pc, #48]	@ (80131e4 <I2SEx_TxISR_I2SExt+0x94>)
 80131b2:	e001      	b.n	80131b8 <I2SEx_TxISR_I2SExt+0x68>
 80131b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80131b8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80131bc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80131c2:	b29b      	uxth	r3, r3
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d106      	bne.n	80131d6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	2201      	movs	r2, #1
 80131cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80131d0:	6878      	ldr	r0, [r7, #4]
 80131d2:	f7ff ff81 	bl	80130d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80131d6:	bf00      	nop
 80131d8:	3708      	adds	r7, #8
 80131da:	46bd      	mov	sp, r7
 80131dc:	bd80      	pop	{r7, pc}
 80131de:	bf00      	nop
 80131e0:	40003800 	.word	0x40003800
 80131e4:	40003400 	.word	0x40003400

080131e8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b082      	sub	sp, #8
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	68d8      	ldr	r0, [r3, #12]
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131fa:	1c99      	adds	r1, r3, #2
 80131fc:	687a      	ldr	r2, [r7, #4]
 80131fe:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8013200:	b282      	uxth	r2, r0
 8013202:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013208:	b29b      	uxth	r3, r3
 801320a:	3b01      	subs	r3, #1
 801320c:	b29a      	uxth	r2, r3
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013216:	b29b      	uxth	r3, r3
 8013218:	2b00      	cmp	r3, #0
 801321a:	d113      	bne.n	8013244 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	685a      	ldr	r2, [r3, #4]
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801322a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013230:	b29b      	uxth	r3, r3
 8013232:	2b00      	cmp	r3, #0
 8013234:	d106      	bne.n	8013244 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	2201      	movs	r2, #1
 801323a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 801323e:	6878      	ldr	r0, [r7, #4]
 8013240:	f7ff ff4a 	bl	80130d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8013244:	bf00      	nop
 8013246:	3708      	adds	r7, #8
 8013248:	46bd      	mov	sp, r7
 801324a:	bd80      	pop	{r7, pc}

0801324c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 801324c:	b580      	push	{r7, lr}
 801324e:	b082      	sub	sp, #8
 8013250:	af00      	add	r7, sp, #0
 8013252:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	4a20      	ldr	r2, [pc, #128]	@ (80132dc <I2SEx_RxISR_I2SExt+0x90>)
 801325a:	4293      	cmp	r3, r2
 801325c:	d101      	bne.n	8013262 <I2SEx_RxISR_I2SExt+0x16>
 801325e:	4b20      	ldr	r3, [pc, #128]	@ (80132e0 <I2SEx_RxISR_I2SExt+0x94>)
 8013260:	e001      	b.n	8013266 <I2SEx_RxISR_I2SExt+0x1a>
 8013262:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8013266:	68d8      	ldr	r0, [r3, #12]
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801326c:	1c99      	adds	r1, r3, #2
 801326e:	687a      	ldr	r2, [r7, #4]
 8013270:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8013272:	b282      	uxth	r2, r0
 8013274:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801327a:	b29b      	uxth	r3, r3
 801327c:	3b01      	subs	r3, #1
 801327e:	b29a      	uxth	r2, r3
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013288:	b29b      	uxth	r3, r3
 801328a:	2b00      	cmp	r3, #0
 801328c:	d121      	bne.n	80132d2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	4a12      	ldr	r2, [pc, #72]	@ (80132dc <I2SEx_RxISR_I2SExt+0x90>)
 8013294:	4293      	cmp	r3, r2
 8013296:	d101      	bne.n	801329c <I2SEx_RxISR_I2SExt+0x50>
 8013298:	4b11      	ldr	r3, [pc, #68]	@ (80132e0 <I2SEx_RxISR_I2SExt+0x94>)
 801329a:	e001      	b.n	80132a0 <I2SEx_RxISR_I2SExt+0x54>
 801329c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80132a0:	685a      	ldr	r2, [r3, #4]
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	490d      	ldr	r1, [pc, #52]	@ (80132dc <I2SEx_RxISR_I2SExt+0x90>)
 80132a8:	428b      	cmp	r3, r1
 80132aa:	d101      	bne.n	80132b0 <I2SEx_RxISR_I2SExt+0x64>
 80132ac:	4b0c      	ldr	r3, [pc, #48]	@ (80132e0 <I2SEx_RxISR_I2SExt+0x94>)
 80132ae:	e001      	b.n	80132b4 <I2SEx_RxISR_I2SExt+0x68>
 80132b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80132b4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80132b8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80132be:	b29b      	uxth	r3, r3
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d106      	bne.n	80132d2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2201      	movs	r2, #1
 80132c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80132cc:	6878      	ldr	r0, [r7, #4]
 80132ce:	f7ff ff03 	bl	80130d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80132d2:	bf00      	nop
 80132d4:	3708      	adds	r7, #8
 80132d6:	46bd      	mov	sp, r7
 80132d8:	bd80      	pop	{r7, pc}
 80132da:	bf00      	nop
 80132dc:	40003800 	.word	0x40003800
 80132e0:	40003400 	.word	0x40003400

080132e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b086      	sub	sp, #24
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d101      	bne.n	80132f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80132f2:	2301      	movs	r3, #1
 80132f4:	e267      	b.n	80137c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	f003 0301 	and.w	r3, r3, #1
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d075      	beq.n	80133ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8013302:	4b88      	ldr	r3, [pc, #544]	@ (8013524 <HAL_RCC_OscConfig+0x240>)
 8013304:	689b      	ldr	r3, [r3, #8]
 8013306:	f003 030c 	and.w	r3, r3, #12
 801330a:	2b04      	cmp	r3, #4
 801330c:	d00c      	beq.n	8013328 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801330e:	4b85      	ldr	r3, [pc, #532]	@ (8013524 <HAL_RCC_OscConfig+0x240>)
 8013310:	689b      	ldr	r3, [r3, #8]
 8013312:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8013316:	2b08      	cmp	r3, #8
 8013318:	d112      	bne.n	8013340 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801331a:	4b82      	ldr	r3, [pc, #520]	@ (8013524 <HAL_RCC_OscConfig+0x240>)
 801331c:	685b      	ldr	r3, [r3, #4]
 801331e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013322:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013326:	d10b      	bne.n	8013340 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013328:	4b7e      	ldr	r3, [pc, #504]	@ (8013524 <HAL_RCC_OscConfig+0x240>)
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013330:	2b00      	cmp	r3, #0
 8013332:	d05b      	beq.n	80133ec <HAL_RCC_OscConfig+0x108>
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	685b      	ldr	r3, [r3, #4]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d157      	bne.n	80133ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801333c:	2301      	movs	r3, #1
 801333e:	e242      	b.n	80137c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	685b      	ldr	r3, [r3, #4]
 8013344:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013348:	d106      	bne.n	8013358 <HAL_RCC_OscConfig+0x74>
 801334a:	4b76      	ldr	r3, [pc, #472]	@ (8013524 <HAL_RCC_OscConfig+0x240>)
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	4a75      	ldr	r2, [pc, #468]	@ (8013524 <HAL_RCC_OscConfig+0x240>)
 8013350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013354:	6013      	str	r3, [r2, #0]
 8013356:	e01d      	b.n	8013394 <HAL_RCC_OscConfig+0xb0>
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	685b      	ldr	r3, [r3, #4]
 801335c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013360:	d10c      	bne.n	801337c <HAL_RCC_OscConfig+0x98>
 8013362:	4b70      	ldr	r3, [pc, #448]	@ (8013524 <HAL_RCC_OscConfig+0x240>)
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	4a6f      	ldr	r2, [pc, #444]	@ (8013524 <HAL_RCC_OscConfig+0x240>)
 8013368:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801336c:	6013      	str	r3, [r2, #0]
 801336e:	4b6d      	ldr	r3, [pc, #436]	@ (8013524 <HAL_RCC_OscConfig+0x240>)
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	4a6c      	ldr	r2, [pc, #432]	@ (8013524 <HAL_RCC_OscConfig+0x240>)
 8013374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013378:	6013      	str	r3, [r2, #0]
 801337a:	e00b      	b.n	8013394 <HAL_RCC_OscConfig+0xb0>
 801337c:	4b69      	ldr	r3, [pc, #420]	@ (8013524 <HAL_RCC_OscConfig+0x240>)
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	4a68      	ldr	r2, [pc, #416]	@ (8013524 <HAL_RCC_OscConfig+0x240>)
 8013382:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013386:	6013      	str	r3, [r2, #0]
 8013388:	4b66      	ldr	r3, [pc, #408]	@ (8013524 <HAL_RCC_OscConfig+0x240>)
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	4a65      	ldr	r2, [pc, #404]	@ (8013524 <HAL_RCC_OscConfig+0x240>)
 801338e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8013392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	685b      	ldr	r3, [r3, #4]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d013      	beq.n	80133c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801339c:	f7fe fa7a 	bl	8011894 <HAL_GetTick>
 80133a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80133a2:	e008      	b.n	80133b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80133a4:	f7fe fa76 	bl	8011894 <HAL_GetTick>
 80133a8:	4602      	mov	r2, r0
 80133aa:	693b      	ldr	r3, [r7, #16]
 80133ac:	1ad3      	subs	r3, r2, r3
 80133ae:	2b64      	cmp	r3, #100	@ 0x64
 80133b0:	d901      	bls.n	80133b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80133b2:	2303      	movs	r3, #3
 80133b4:	e207      	b.n	80137c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80133b6:	4b5b      	ldr	r3, [pc, #364]	@ (8013524 <HAL_RCC_OscConfig+0x240>)
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d0f0      	beq.n	80133a4 <HAL_RCC_OscConfig+0xc0>
 80133c2:	e014      	b.n	80133ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80133c4:	f7fe fa66 	bl	8011894 <HAL_GetTick>
 80133c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80133ca:	e008      	b.n	80133de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80133cc:	f7fe fa62 	bl	8011894 <HAL_GetTick>
 80133d0:	4602      	mov	r2, r0
 80133d2:	693b      	ldr	r3, [r7, #16]
 80133d4:	1ad3      	subs	r3, r2, r3
 80133d6:	2b64      	cmp	r3, #100	@ 0x64
 80133d8:	d901      	bls.n	80133de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80133da:	2303      	movs	r3, #3
 80133dc:	e1f3      	b.n	80137c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80133de:	4b51      	ldr	r3, [pc, #324]	@ (8013524 <HAL_RCC_OscConfig+0x240>)
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d1f0      	bne.n	80133cc <HAL_RCC_OscConfig+0xe8>
 80133ea:	e000      	b.n	80133ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80133ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	f003 0302 	and.w	r3, r3, #2
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d063      	beq.n	80134c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80133fa:	4b4a      	ldr	r3, [pc, #296]	@ (8013524 <HAL_RCC_OscConfig+0x240>)
 80133fc:	689b      	ldr	r3, [r3, #8]
 80133fe:	f003 030c 	and.w	r3, r3, #12
 8013402:	2b00      	cmp	r3, #0
 8013404:	d00b      	beq.n	801341e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013406:	4b47      	ldr	r3, [pc, #284]	@ (8013524 <HAL_RCC_OscConfig+0x240>)
 8013408:	689b      	ldr	r3, [r3, #8]
 801340a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 801340e:	2b08      	cmp	r3, #8
 8013410:	d11c      	bne.n	801344c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013412:	4b44      	ldr	r3, [pc, #272]	@ (8013524 <HAL_RCC_OscConfig+0x240>)
 8013414:	685b      	ldr	r3, [r3, #4]
 8013416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801341a:	2b00      	cmp	r3, #0
 801341c:	d116      	bne.n	801344c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801341e:	4b41      	ldr	r3, [pc, #260]	@ (8013524 <HAL_RCC_OscConfig+0x240>)
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	f003 0302 	and.w	r3, r3, #2
 8013426:	2b00      	cmp	r3, #0
 8013428:	d005      	beq.n	8013436 <HAL_RCC_OscConfig+0x152>
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	68db      	ldr	r3, [r3, #12]
 801342e:	2b01      	cmp	r3, #1
 8013430:	d001      	beq.n	8013436 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8013432:	2301      	movs	r3, #1
 8013434:	e1c7      	b.n	80137c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013436:	4b3b      	ldr	r3, [pc, #236]	@ (8013524 <HAL_RCC_OscConfig+0x240>)
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	691b      	ldr	r3, [r3, #16]
 8013442:	00db      	lsls	r3, r3, #3
 8013444:	4937      	ldr	r1, [pc, #220]	@ (8013524 <HAL_RCC_OscConfig+0x240>)
 8013446:	4313      	orrs	r3, r2
 8013448:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801344a:	e03a      	b.n	80134c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	68db      	ldr	r3, [r3, #12]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d020      	beq.n	8013496 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8013454:	4b34      	ldr	r3, [pc, #208]	@ (8013528 <HAL_RCC_OscConfig+0x244>)
 8013456:	2201      	movs	r2, #1
 8013458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801345a:	f7fe fa1b 	bl	8011894 <HAL_GetTick>
 801345e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013460:	e008      	b.n	8013474 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8013462:	f7fe fa17 	bl	8011894 <HAL_GetTick>
 8013466:	4602      	mov	r2, r0
 8013468:	693b      	ldr	r3, [r7, #16]
 801346a:	1ad3      	subs	r3, r2, r3
 801346c:	2b02      	cmp	r3, #2
 801346e:	d901      	bls.n	8013474 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8013470:	2303      	movs	r3, #3
 8013472:	e1a8      	b.n	80137c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013474:	4b2b      	ldr	r3, [pc, #172]	@ (8013524 <HAL_RCC_OscConfig+0x240>)
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	f003 0302 	and.w	r3, r3, #2
 801347c:	2b00      	cmp	r3, #0
 801347e:	d0f0      	beq.n	8013462 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013480:	4b28      	ldr	r3, [pc, #160]	@ (8013524 <HAL_RCC_OscConfig+0x240>)
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	691b      	ldr	r3, [r3, #16]
 801348c:	00db      	lsls	r3, r3, #3
 801348e:	4925      	ldr	r1, [pc, #148]	@ (8013524 <HAL_RCC_OscConfig+0x240>)
 8013490:	4313      	orrs	r3, r2
 8013492:	600b      	str	r3, [r1, #0]
 8013494:	e015      	b.n	80134c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013496:	4b24      	ldr	r3, [pc, #144]	@ (8013528 <HAL_RCC_OscConfig+0x244>)
 8013498:	2200      	movs	r2, #0
 801349a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801349c:	f7fe f9fa 	bl	8011894 <HAL_GetTick>
 80134a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80134a2:	e008      	b.n	80134b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80134a4:	f7fe f9f6 	bl	8011894 <HAL_GetTick>
 80134a8:	4602      	mov	r2, r0
 80134aa:	693b      	ldr	r3, [r7, #16]
 80134ac:	1ad3      	subs	r3, r2, r3
 80134ae:	2b02      	cmp	r3, #2
 80134b0:	d901      	bls.n	80134b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80134b2:	2303      	movs	r3, #3
 80134b4:	e187      	b.n	80137c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80134b6:	4b1b      	ldr	r3, [pc, #108]	@ (8013524 <HAL_RCC_OscConfig+0x240>)
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	f003 0302 	and.w	r3, r3, #2
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d1f0      	bne.n	80134a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	f003 0308 	and.w	r3, r3, #8
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d036      	beq.n	801353c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	695b      	ldr	r3, [r3, #20]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d016      	beq.n	8013504 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80134d6:	4b15      	ldr	r3, [pc, #84]	@ (801352c <HAL_RCC_OscConfig+0x248>)
 80134d8:	2201      	movs	r2, #1
 80134da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80134dc:	f7fe f9da 	bl	8011894 <HAL_GetTick>
 80134e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80134e2:	e008      	b.n	80134f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80134e4:	f7fe f9d6 	bl	8011894 <HAL_GetTick>
 80134e8:	4602      	mov	r2, r0
 80134ea:	693b      	ldr	r3, [r7, #16]
 80134ec:	1ad3      	subs	r3, r2, r3
 80134ee:	2b02      	cmp	r3, #2
 80134f0:	d901      	bls.n	80134f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80134f2:	2303      	movs	r3, #3
 80134f4:	e167      	b.n	80137c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80134f6:	4b0b      	ldr	r3, [pc, #44]	@ (8013524 <HAL_RCC_OscConfig+0x240>)
 80134f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80134fa:	f003 0302 	and.w	r3, r3, #2
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d0f0      	beq.n	80134e4 <HAL_RCC_OscConfig+0x200>
 8013502:	e01b      	b.n	801353c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013504:	4b09      	ldr	r3, [pc, #36]	@ (801352c <HAL_RCC_OscConfig+0x248>)
 8013506:	2200      	movs	r2, #0
 8013508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801350a:	f7fe f9c3 	bl	8011894 <HAL_GetTick>
 801350e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013510:	e00e      	b.n	8013530 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8013512:	f7fe f9bf 	bl	8011894 <HAL_GetTick>
 8013516:	4602      	mov	r2, r0
 8013518:	693b      	ldr	r3, [r7, #16]
 801351a:	1ad3      	subs	r3, r2, r3
 801351c:	2b02      	cmp	r3, #2
 801351e:	d907      	bls.n	8013530 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8013520:	2303      	movs	r3, #3
 8013522:	e150      	b.n	80137c6 <HAL_RCC_OscConfig+0x4e2>
 8013524:	40023800 	.word	0x40023800
 8013528:	42470000 	.word	0x42470000
 801352c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013530:	4b88      	ldr	r3, [pc, #544]	@ (8013754 <HAL_RCC_OscConfig+0x470>)
 8013532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013534:	f003 0302 	and.w	r3, r3, #2
 8013538:	2b00      	cmp	r3, #0
 801353a:	d1ea      	bne.n	8013512 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	f003 0304 	and.w	r3, r3, #4
 8013544:	2b00      	cmp	r3, #0
 8013546:	f000 8097 	beq.w	8013678 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 801354a:	2300      	movs	r3, #0
 801354c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801354e:	4b81      	ldr	r3, [pc, #516]	@ (8013754 <HAL_RCC_OscConfig+0x470>)
 8013550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013556:	2b00      	cmp	r3, #0
 8013558:	d10f      	bne.n	801357a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801355a:	2300      	movs	r3, #0
 801355c:	60bb      	str	r3, [r7, #8]
 801355e:	4b7d      	ldr	r3, [pc, #500]	@ (8013754 <HAL_RCC_OscConfig+0x470>)
 8013560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013562:	4a7c      	ldr	r2, [pc, #496]	@ (8013754 <HAL_RCC_OscConfig+0x470>)
 8013564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013568:	6413      	str	r3, [r2, #64]	@ 0x40
 801356a:	4b7a      	ldr	r3, [pc, #488]	@ (8013754 <HAL_RCC_OscConfig+0x470>)
 801356c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801356e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013572:	60bb      	str	r3, [r7, #8]
 8013574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013576:	2301      	movs	r3, #1
 8013578:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801357a:	4b77      	ldr	r3, [pc, #476]	@ (8013758 <HAL_RCC_OscConfig+0x474>)
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013582:	2b00      	cmp	r3, #0
 8013584:	d118      	bne.n	80135b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013586:	4b74      	ldr	r3, [pc, #464]	@ (8013758 <HAL_RCC_OscConfig+0x474>)
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	4a73      	ldr	r2, [pc, #460]	@ (8013758 <HAL_RCC_OscConfig+0x474>)
 801358c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013592:	f7fe f97f 	bl	8011894 <HAL_GetTick>
 8013596:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013598:	e008      	b.n	80135ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801359a:	f7fe f97b 	bl	8011894 <HAL_GetTick>
 801359e:	4602      	mov	r2, r0
 80135a0:	693b      	ldr	r3, [r7, #16]
 80135a2:	1ad3      	subs	r3, r2, r3
 80135a4:	2b02      	cmp	r3, #2
 80135a6:	d901      	bls.n	80135ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80135a8:	2303      	movs	r3, #3
 80135aa:	e10c      	b.n	80137c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80135ac:	4b6a      	ldr	r3, [pc, #424]	@ (8013758 <HAL_RCC_OscConfig+0x474>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d0f0      	beq.n	801359a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	689b      	ldr	r3, [r3, #8]
 80135bc:	2b01      	cmp	r3, #1
 80135be:	d106      	bne.n	80135ce <HAL_RCC_OscConfig+0x2ea>
 80135c0:	4b64      	ldr	r3, [pc, #400]	@ (8013754 <HAL_RCC_OscConfig+0x470>)
 80135c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80135c4:	4a63      	ldr	r2, [pc, #396]	@ (8013754 <HAL_RCC_OscConfig+0x470>)
 80135c6:	f043 0301 	orr.w	r3, r3, #1
 80135ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80135cc:	e01c      	b.n	8013608 <HAL_RCC_OscConfig+0x324>
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	689b      	ldr	r3, [r3, #8]
 80135d2:	2b05      	cmp	r3, #5
 80135d4:	d10c      	bne.n	80135f0 <HAL_RCC_OscConfig+0x30c>
 80135d6:	4b5f      	ldr	r3, [pc, #380]	@ (8013754 <HAL_RCC_OscConfig+0x470>)
 80135d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80135da:	4a5e      	ldr	r2, [pc, #376]	@ (8013754 <HAL_RCC_OscConfig+0x470>)
 80135dc:	f043 0304 	orr.w	r3, r3, #4
 80135e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80135e2:	4b5c      	ldr	r3, [pc, #368]	@ (8013754 <HAL_RCC_OscConfig+0x470>)
 80135e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80135e6:	4a5b      	ldr	r2, [pc, #364]	@ (8013754 <HAL_RCC_OscConfig+0x470>)
 80135e8:	f043 0301 	orr.w	r3, r3, #1
 80135ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80135ee:	e00b      	b.n	8013608 <HAL_RCC_OscConfig+0x324>
 80135f0:	4b58      	ldr	r3, [pc, #352]	@ (8013754 <HAL_RCC_OscConfig+0x470>)
 80135f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80135f4:	4a57      	ldr	r2, [pc, #348]	@ (8013754 <HAL_RCC_OscConfig+0x470>)
 80135f6:	f023 0301 	bic.w	r3, r3, #1
 80135fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80135fc:	4b55      	ldr	r3, [pc, #340]	@ (8013754 <HAL_RCC_OscConfig+0x470>)
 80135fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013600:	4a54      	ldr	r2, [pc, #336]	@ (8013754 <HAL_RCC_OscConfig+0x470>)
 8013602:	f023 0304 	bic.w	r3, r3, #4
 8013606:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	689b      	ldr	r3, [r3, #8]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d015      	beq.n	801363c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013610:	f7fe f940 	bl	8011894 <HAL_GetTick>
 8013614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013616:	e00a      	b.n	801362e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013618:	f7fe f93c 	bl	8011894 <HAL_GetTick>
 801361c:	4602      	mov	r2, r0
 801361e:	693b      	ldr	r3, [r7, #16]
 8013620:	1ad3      	subs	r3, r2, r3
 8013622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013626:	4293      	cmp	r3, r2
 8013628:	d901      	bls.n	801362e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 801362a:	2303      	movs	r3, #3
 801362c:	e0cb      	b.n	80137c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801362e:	4b49      	ldr	r3, [pc, #292]	@ (8013754 <HAL_RCC_OscConfig+0x470>)
 8013630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013632:	f003 0302 	and.w	r3, r3, #2
 8013636:	2b00      	cmp	r3, #0
 8013638:	d0ee      	beq.n	8013618 <HAL_RCC_OscConfig+0x334>
 801363a:	e014      	b.n	8013666 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801363c:	f7fe f92a 	bl	8011894 <HAL_GetTick>
 8013640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013642:	e00a      	b.n	801365a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013644:	f7fe f926 	bl	8011894 <HAL_GetTick>
 8013648:	4602      	mov	r2, r0
 801364a:	693b      	ldr	r3, [r7, #16]
 801364c:	1ad3      	subs	r3, r2, r3
 801364e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013652:	4293      	cmp	r3, r2
 8013654:	d901      	bls.n	801365a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8013656:	2303      	movs	r3, #3
 8013658:	e0b5      	b.n	80137c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801365a:	4b3e      	ldr	r3, [pc, #248]	@ (8013754 <HAL_RCC_OscConfig+0x470>)
 801365c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801365e:	f003 0302 	and.w	r3, r3, #2
 8013662:	2b00      	cmp	r3, #0
 8013664:	d1ee      	bne.n	8013644 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8013666:	7dfb      	ldrb	r3, [r7, #23]
 8013668:	2b01      	cmp	r3, #1
 801366a:	d105      	bne.n	8013678 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801366c:	4b39      	ldr	r3, [pc, #228]	@ (8013754 <HAL_RCC_OscConfig+0x470>)
 801366e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013670:	4a38      	ldr	r2, [pc, #224]	@ (8013754 <HAL_RCC_OscConfig+0x470>)
 8013672:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8013676:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	699b      	ldr	r3, [r3, #24]
 801367c:	2b00      	cmp	r3, #0
 801367e:	f000 80a1 	beq.w	80137c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8013682:	4b34      	ldr	r3, [pc, #208]	@ (8013754 <HAL_RCC_OscConfig+0x470>)
 8013684:	689b      	ldr	r3, [r3, #8]
 8013686:	f003 030c 	and.w	r3, r3, #12
 801368a:	2b08      	cmp	r3, #8
 801368c:	d05c      	beq.n	8013748 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	699b      	ldr	r3, [r3, #24]
 8013692:	2b02      	cmp	r3, #2
 8013694:	d141      	bne.n	801371a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013696:	4b31      	ldr	r3, [pc, #196]	@ (801375c <HAL_RCC_OscConfig+0x478>)
 8013698:	2200      	movs	r2, #0
 801369a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801369c:	f7fe f8fa 	bl	8011894 <HAL_GetTick>
 80136a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80136a2:	e008      	b.n	80136b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80136a4:	f7fe f8f6 	bl	8011894 <HAL_GetTick>
 80136a8:	4602      	mov	r2, r0
 80136aa:	693b      	ldr	r3, [r7, #16]
 80136ac:	1ad3      	subs	r3, r2, r3
 80136ae:	2b02      	cmp	r3, #2
 80136b0:	d901      	bls.n	80136b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80136b2:	2303      	movs	r3, #3
 80136b4:	e087      	b.n	80137c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80136b6:	4b27      	ldr	r3, [pc, #156]	@ (8013754 <HAL_RCC_OscConfig+0x470>)
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d1f0      	bne.n	80136a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	69da      	ldr	r2, [r3, #28]
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	6a1b      	ldr	r3, [r3, #32]
 80136ca:	431a      	orrs	r2, r3
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136d0:	019b      	lsls	r3, r3, #6
 80136d2:	431a      	orrs	r2, r3
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80136d8:	085b      	lsrs	r3, r3, #1
 80136da:	3b01      	subs	r3, #1
 80136dc:	041b      	lsls	r3, r3, #16
 80136de:	431a      	orrs	r2, r3
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80136e4:	061b      	lsls	r3, r3, #24
 80136e6:	491b      	ldr	r1, [pc, #108]	@ (8013754 <HAL_RCC_OscConfig+0x470>)
 80136e8:	4313      	orrs	r3, r2
 80136ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80136ec:	4b1b      	ldr	r3, [pc, #108]	@ (801375c <HAL_RCC_OscConfig+0x478>)
 80136ee:	2201      	movs	r2, #1
 80136f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80136f2:	f7fe f8cf 	bl	8011894 <HAL_GetTick>
 80136f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80136f8:	e008      	b.n	801370c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80136fa:	f7fe f8cb 	bl	8011894 <HAL_GetTick>
 80136fe:	4602      	mov	r2, r0
 8013700:	693b      	ldr	r3, [r7, #16]
 8013702:	1ad3      	subs	r3, r2, r3
 8013704:	2b02      	cmp	r3, #2
 8013706:	d901      	bls.n	801370c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8013708:	2303      	movs	r3, #3
 801370a:	e05c      	b.n	80137c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801370c:	4b11      	ldr	r3, [pc, #68]	@ (8013754 <HAL_RCC_OscConfig+0x470>)
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013714:	2b00      	cmp	r3, #0
 8013716:	d0f0      	beq.n	80136fa <HAL_RCC_OscConfig+0x416>
 8013718:	e054      	b.n	80137c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801371a:	4b10      	ldr	r3, [pc, #64]	@ (801375c <HAL_RCC_OscConfig+0x478>)
 801371c:	2200      	movs	r2, #0
 801371e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013720:	f7fe f8b8 	bl	8011894 <HAL_GetTick>
 8013724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013726:	e008      	b.n	801373a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013728:	f7fe f8b4 	bl	8011894 <HAL_GetTick>
 801372c:	4602      	mov	r2, r0
 801372e:	693b      	ldr	r3, [r7, #16]
 8013730:	1ad3      	subs	r3, r2, r3
 8013732:	2b02      	cmp	r3, #2
 8013734:	d901      	bls.n	801373a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8013736:	2303      	movs	r3, #3
 8013738:	e045      	b.n	80137c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801373a:	4b06      	ldr	r3, [pc, #24]	@ (8013754 <HAL_RCC_OscConfig+0x470>)
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013742:	2b00      	cmp	r3, #0
 8013744:	d1f0      	bne.n	8013728 <HAL_RCC_OscConfig+0x444>
 8013746:	e03d      	b.n	80137c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	699b      	ldr	r3, [r3, #24]
 801374c:	2b01      	cmp	r3, #1
 801374e:	d107      	bne.n	8013760 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8013750:	2301      	movs	r3, #1
 8013752:	e038      	b.n	80137c6 <HAL_RCC_OscConfig+0x4e2>
 8013754:	40023800 	.word	0x40023800
 8013758:	40007000 	.word	0x40007000
 801375c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8013760:	4b1b      	ldr	r3, [pc, #108]	@ (80137d0 <HAL_RCC_OscConfig+0x4ec>)
 8013762:	685b      	ldr	r3, [r3, #4]
 8013764:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	699b      	ldr	r3, [r3, #24]
 801376a:	2b01      	cmp	r3, #1
 801376c:	d028      	beq.n	80137c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013778:	429a      	cmp	r2, r3
 801377a:	d121      	bne.n	80137c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013786:	429a      	cmp	r2, r3
 8013788:	d11a      	bne.n	80137c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801378a:	68fa      	ldr	r2, [r7, #12]
 801378c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8013790:	4013      	ands	r3, r2
 8013792:	687a      	ldr	r2, [r7, #4]
 8013794:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8013796:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8013798:	4293      	cmp	r3, r2
 801379a:	d111      	bne.n	80137c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80137a6:	085b      	lsrs	r3, r3, #1
 80137a8:	3b01      	subs	r3, #1
 80137aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80137ac:	429a      	cmp	r2, r3
 80137ae:	d107      	bne.n	80137c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80137ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80137bc:	429a      	cmp	r2, r3
 80137be:	d001      	beq.n	80137c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80137c0:	2301      	movs	r3, #1
 80137c2:	e000      	b.n	80137c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80137c4:	2300      	movs	r3, #0
}
 80137c6:	4618      	mov	r0, r3
 80137c8:	3718      	adds	r7, #24
 80137ca:	46bd      	mov	sp, r7
 80137cc:	bd80      	pop	{r7, pc}
 80137ce:	bf00      	nop
 80137d0:	40023800 	.word	0x40023800

080137d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b084      	sub	sp, #16
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
 80137dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d101      	bne.n	80137e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80137e4:	2301      	movs	r3, #1
 80137e6:	e0cc      	b.n	8013982 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80137e8:	4b68      	ldr	r3, [pc, #416]	@ (801398c <HAL_RCC_ClockConfig+0x1b8>)
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	f003 0307 	and.w	r3, r3, #7
 80137f0:	683a      	ldr	r2, [r7, #0]
 80137f2:	429a      	cmp	r2, r3
 80137f4:	d90c      	bls.n	8013810 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80137f6:	4b65      	ldr	r3, [pc, #404]	@ (801398c <HAL_RCC_ClockConfig+0x1b8>)
 80137f8:	683a      	ldr	r2, [r7, #0]
 80137fa:	b2d2      	uxtb	r2, r2
 80137fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80137fe:	4b63      	ldr	r3, [pc, #396]	@ (801398c <HAL_RCC_ClockConfig+0x1b8>)
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	f003 0307 	and.w	r3, r3, #7
 8013806:	683a      	ldr	r2, [r7, #0]
 8013808:	429a      	cmp	r2, r3
 801380a:	d001      	beq.n	8013810 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801380c:	2301      	movs	r3, #1
 801380e:	e0b8      	b.n	8013982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	f003 0302 	and.w	r3, r3, #2
 8013818:	2b00      	cmp	r3, #0
 801381a:	d020      	beq.n	801385e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	f003 0304 	and.w	r3, r3, #4
 8013824:	2b00      	cmp	r3, #0
 8013826:	d005      	beq.n	8013834 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013828:	4b59      	ldr	r3, [pc, #356]	@ (8013990 <HAL_RCC_ClockConfig+0x1bc>)
 801382a:	689b      	ldr	r3, [r3, #8]
 801382c:	4a58      	ldr	r2, [pc, #352]	@ (8013990 <HAL_RCC_ClockConfig+0x1bc>)
 801382e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8013832:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	f003 0308 	and.w	r3, r3, #8
 801383c:	2b00      	cmp	r3, #0
 801383e:	d005      	beq.n	801384c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8013840:	4b53      	ldr	r3, [pc, #332]	@ (8013990 <HAL_RCC_ClockConfig+0x1bc>)
 8013842:	689b      	ldr	r3, [r3, #8]
 8013844:	4a52      	ldr	r2, [pc, #328]	@ (8013990 <HAL_RCC_ClockConfig+0x1bc>)
 8013846:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 801384a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801384c:	4b50      	ldr	r3, [pc, #320]	@ (8013990 <HAL_RCC_ClockConfig+0x1bc>)
 801384e:	689b      	ldr	r3, [r3, #8]
 8013850:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	689b      	ldr	r3, [r3, #8]
 8013858:	494d      	ldr	r1, [pc, #308]	@ (8013990 <HAL_RCC_ClockConfig+0x1bc>)
 801385a:	4313      	orrs	r3, r2
 801385c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	f003 0301 	and.w	r3, r3, #1
 8013866:	2b00      	cmp	r3, #0
 8013868:	d044      	beq.n	80138f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	685b      	ldr	r3, [r3, #4]
 801386e:	2b01      	cmp	r3, #1
 8013870:	d107      	bne.n	8013882 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013872:	4b47      	ldr	r3, [pc, #284]	@ (8013990 <HAL_RCC_ClockConfig+0x1bc>)
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801387a:	2b00      	cmp	r3, #0
 801387c:	d119      	bne.n	80138b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801387e:	2301      	movs	r3, #1
 8013880:	e07f      	b.n	8013982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	685b      	ldr	r3, [r3, #4]
 8013886:	2b02      	cmp	r3, #2
 8013888:	d003      	beq.n	8013892 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801388e:	2b03      	cmp	r3, #3
 8013890:	d107      	bne.n	80138a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013892:	4b3f      	ldr	r3, [pc, #252]	@ (8013990 <HAL_RCC_ClockConfig+0x1bc>)
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801389a:	2b00      	cmp	r3, #0
 801389c:	d109      	bne.n	80138b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801389e:	2301      	movs	r3, #1
 80138a0:	e06f      	b.n	8013982 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80138a2:	4b3b      	ldr	r3, [pc, #236]	@ (8013990 <HAL_RCC_ClockConfig+0x1bc>)
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	f003 0302 	and.w	r3, r3, #2
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d101      	bne.n	80138b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80138ae:	2301      	movs	r3, #1
 80138b0:	e067      	b.n	8013982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80138b2:	4b37      	ldr	r3, [pc, #220]	@ (8013990 <HAL_RCC_ClockConfig+0x1bc>)
 80138b4:	689b      	ldr	r3, [r3, #8]
 80138b6:	f023 0203 	bic.w	r2, r3, #3
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	685b      	ldr	r3, [r3, #4]
 80138be:	4934      	ldr	r1, [pc, #208]	@ (8013990 <HAL_RCC_ClockConfig+0x1bc>)
 80138c0:	4313      	orrs	r3, r2
 80138c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80138c4:	f7fd ffe6 	bl	8011894 <HAL_GetTick>
 80138c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80138ca:	e00a      	b.n	80138e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80138cc:	f7fd ffe2 	bl	8011894 <HAL_GetTick>
 80138d0:	4602      	mov	r2, r0
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	1ad3      	subs	r3, r2, r3
 80138d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80138da:	4293      	cmp	r3, r2
 80138dc:	d901      	bls.n	80138e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80138de:	2303      	movs	r3, #3
 80138e0:	e04f      	b.n	8013982 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80138e2:	4b2b      	ldr	r3, [pc, #172]	@ (8013990 <HAL_RCC_ClockConfig+0x1bc>)
 80138e4:	689b      	ldr	r3, [r3, #8]
 80138e6:	f003 020c 	and.w	r2, r3, #12
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	685b      	ldr	r3, [r3, #4]
 80138ee:	009b      	lsls	r3, r3, #2
 80138f0:	429a      	cmp	r2, r3
 80138f2:	d1eb      	bne.n	80138cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80138f4:	4b25      	ldr	r3, [pc, #148]	@ (801398c <HAL_RCC_ClockConfig+0x1b8>)
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	f003 0307 	and.w	r3, r3, #7
 80138fc:	683a      	ldr	r2, [r7, #0]
 80138fe:	429a      	cmp	r2, r3
 8013900:	d20c      	bcs.n	801391c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013902:	4b22      	ldr	r3, [pc, #136]	@ (801398c <HAL_RCC_ClockConfig+0x1b8>)
 8013904:	683a      	ldr	r2, [r7, #0]
 8013906:	b2d2      	uxtb	r2, r2
 8013908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801390a:	4b20      	ldr	r3, [pc, #128]	@ (801398c <HAL_RCC_ClockConfig+0x1b8>)
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	f003 0307 	and.w	r3, r3, #7
 8013912:	683a      	ldr	r2, [r7, #0]
 8013914:	429a      	cmp	r2, r3
 8013916:	d001      	beq.n	801391c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8013918:	2301      	movs	r3, #1
 801391a:	e032      	b.n	8013982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	f003 0304 	and.w	r3, r3, #4
 8013924:	2b00      	cmp	r3, #0
 8013926:	d008      	beq.n	801393a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013928:	4b19      	ldr	r3, [pc, #100]	@ (8013990 <HAL_RCC_ClockConfig+0x1bc>)
 801392a:	689b      	ldr	r3, [r3, #8]
 801392c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	68db      	ldr	r3, [r3, #12]
 8013934:	4916      	ldr	r1, [pc, #88]	@ (8013990 <HAL_RCC_ClockConfig+0x1bc>)
 8013936:	4313      	orrs	r3, r2
 8013938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	f003 0308 	and.w	r3, r3, #8
 8013942:	2b00      	cmp	r3, #0
 8013944:	d009      	beq.n	801395a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8013946:	4b12      	ldr	r3, [pc, #72]	@ (8013990 <HAL_RCC_ClockConfig+0x1bc>)
 8013948:	689b      	ldr	r3, [r3, #8]
 801394a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	691b      	ldr	r3, [r3, #16]
 8013952:	00db      	lsls	r3, r3, #3
 8013954:	490e      	ldr	r1, [pc, #56]	@ (8013990 <HAL_RCC_ClockConfig+0x1bc>)
 8013956:	4313      	orrs	r3, r2
 8013958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801395a:	f000 f821 	bl	80139a0 <HAL_RCC_GetSysClockFreq>
 801395e:	4602      	mov	r2, r0
 8013960:	4b0b      	ldr	r3, [pc, #44]	@ (8013990 <HAL_RCC_ClockConfig+0x1bc>)
 8013962:	689b      	ldr	r3, [r3, #8]
 8013964:	091b      	lsrs	r3, r3, #4
 8013966:	f003 030f 	and.w	r3, r3, #15
 801396a:	490a      	ldr	r1, [pc, #40]	@ (8013994 <HAL_RCC_ClockConfig+0x1c0>)
 801396c:	5ccb      	ldrb	r3, [r1, r3]
 801396e:	fa22 f303 	lsr.w	r3, r2, r3
 8013972:	4a09      	ldr	r2, [pc, #36]	@ (8013998 <HAL_RCC_ClockConfig+0x1c4>)
 8013974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8013976:	4b09      	ldr	r3, [pc, #36]	@ (801399c <HAL_RCC_ClockConfig+0x1c8>)
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	4618      	mov	r0, r3
 801397c:	f7fd ff46 	bl	801180c <HAL_InitTick>

  return HAL_OK;
 8013980:	2300      	movs	r3, #0
}
 8013982:	4618      	mov	r0, r3
 8013984:	3710      	adds	r7, #16
 8013986:	46bd      	mov	sp, r7
 8013988:	bd80      	pop	{r7, pc}
 801398a:	bf00      	nop
 801398c:	40023c00 	.word	0x40023c00
 8013990:	40023800 	.word	0x40023800
 8013994:	080184f8 	.word	0x080184f8
 8013998:	20000000 	.word	0x20000000
 801399c:	20000004 	.word	0x20000004

080139a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80139a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80139a4:	b090      	sub	sp, #64	@ 0x40
 80139a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80139a8:	2300      	movs	r3, #0
 80139aa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80139ac:	2300      	movs	r3, #0
 80139ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80139b0:	2300      	movs	r3, #0
 80139b2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80139b4:	2300      	movs	r3, #0
 80139b6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80139b8:	4b59      	ldr	r3, [pc, #356]	@ (8013b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80139ba:	689b      	ldr	r3, [r3, #8]
 80139bc:	f003 030c 	and.w	r3, r3, #12
 80139c0:	2b08      	cmp	r3, #8
 80139c2:	d00d      	beq.n	80139e0 <HAL_RCC_GetSysClockFreq+0x40>
 80139c4:	2b08      	cmp	r3, #8
 80139c6:	f200 80a1 	bhi.w	8013b0c <HAL_RCC_GetSysClockFreq+0x16c>
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d002      	beq.n	80139d4 <HAL_RCC_GetSysClockFreq+0x34>
 80139ce:	2b04      	cmp	r3, #4
 80139d0:	d003      	beq.n	80139da <HAL_RCC_GetSysClockFreq+0x3a>
 80139d2:	e09b      	b.n	8013b0c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80139d4:	4b53      	ldr	r3, [pc, #332]	@ (8013b24 <HAL_RCC_GetSysClockFreq+0x184>)
 80139d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80139d8:	e09b      	b.n	8013b12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80139da:	4b53      	ldr	r3, [pc, #332]	@ (8013b28 <HAL_RCC_GetSysClockFreq+0x188>)
 80139dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80139de:	e098      	b.n	8013b12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80139e0:	4b4f      	ldr	r3, [pc, #316]	@ (8013b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80139e2:	685b      	ldr	r3, [r3, #4]
 80139e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80139e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80139ea:	4b4d      	ldr	r3, [pc, #308]	@ (8013b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80139ec:	685b      	ldr	r3, [r3, #4]
 80139ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d028      	beq.n	8013a48 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80139f6:	4b4a      	ldr	r3, [pc, #296]	@ (8013b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80139f8:	685b      	ldr	r3, [r3, #4]
 80139fa:	099b      	lsrs	r3, r3, #6
 80139fc:	2200      	movs	r2, #0
 80139fe:	623b      	str	r3, [r7, #32]
 8013a00:	627a      	str	r2, [r7, #36]	@ 0x24
 8013a02:	6a3b      	ldr	r3, [r7, #32]
 8013a04:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8013a08:	2100      	movs	r1, #0
 8013a0a:	4b47      	ldr	r3, [pc, #284]	@ (8013b28 <HAL_RCC_GetSysClockFreq+0x188>)
 8013a0c:	fb03 f201 	mul.w	r2, r3, r1
 8013a10:	2300      	movs	r3, #0
 8013a12:	fb00 f303 	mul.w	r3, r0, r3
 8013a16:	4413      	add	r3, r2
 8013a18:	4a43      	ldr	r2, [pc, #268]	@ (8013b28 <HAL_RCC_GetSysClockFreq+0x188>)
 8013a1a:	fba0 1202 	umull	r1, r2, r0, r2
 8013a1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013a20:	460a      	mov	r2, r1
 8013a22:	62ba      	str	r2, [r7, #40]	@ 0x28
 8013a24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013a26:	4413      	add	r3, r2
 8013a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a2c:	2200      	movs	r2, #0
 8013a2e:	61bb      	str	r3, [r7, #24]
 8013a30:	61fa      	str	r2, [r7, #28]
 8013a32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013a36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8013a3a:	f7fd f92d 	bl	8010c98 <__aeabi_uldivmod>
 8013a3e:	4602      	mov	r2, r0
 8013a40:	460b      	mov	r3, r1
 8013a42:	4613      	mov	r3, r2
 8013a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013a46:	e053      	b.n	8013af0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013a48:	4b35      	ldr	r3, [pc, #212]	@ (8013b20 <HAL_RCC_GetSysClockFreq+0x180>)
 8013a4a:	685b      	ldr	r3, [r3, #4]
 8013a4c:	099b      	lsrs	r3, r3, #6
 8013a4e:	2200      	movs	r2, #0
 8013a50:	613b      	str	r3, [r7, #16]
 8013a52:	617a      	str	r2, [r7, #20]
 8013a54:	693b      	ldr	r3, [r7, #16]
 8013a56:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8013a5a:	f04f 0b00 	mov.w	fp, #0
 8013a5e:	4652      	mov	r2, sl
 8013a60:	465b      	mov	r3, fp
 8013a62:	f04f 0000 	mov.w	r0, #0
 8013a66:	f04f 0100 	mov.w	r1, #0
 8013a6a:	0159      	lsls	r1, r3, #5
 8013a6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8013a70:	0150      	lsls	r0, r2, #5
 8013a72:	4602      	mov	r2, r0
 8013a74:	460b      	mov	r3, r1
 8013a76:	ebb2 080a 	subs.w	r8, r2, sl
 8013a7a:	eb63 090b 	sbc.w	r9, r3, fp
 8013a7e:	f04f 0200 	mov.w	r2, #0
 8013a82:	f04f 0300 	mov.w	r3, #0
 8013a86:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8013a8a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8013a8e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8013a92:	ebb2 0408 	subs.w	r4, r2, r8
 8013a96:	eb63 0509 	sbc.w	r5, r3, r9
 8013a9a:	f04f 0200 	mov.w	r2, #0
 8013a9e:	f04f 0300 	mov.w	r3, #0
 8013aa2:	00eb      	lsls	r3, r5, #3
 8013aa4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8013aa8:	00e2      	lsls	r2, r4, #3
 8013aaa:	4614      	mov	r4, r2
 8013aac:	461d      	mov	r5, r3
 8013aae:	eb14 030a 	adds.w	r3, r4, sl
 8013ab2:	603b      	str	r3, [r7, #0]
 8013ab4:	eb45 030b 	adc.w	r3, r5, fp
 8013ab8:	607b      	str	r3, [r7, #4]
 8013aba:	f04f 0200 	mov.w	r2, #0
 8013abe:	f04f 0300 	mov.w	r3, #0
 8013ac2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8013ac6:	4629      	mov	r1, r5
 8013ac8:	028b      	lsls	r3, r1, #10
 8013aca:	4621      	mov	r1, r4
 8013acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8013ad0:	4621      	mov	r1, r4
 8013ad2:	028a      	lsls	r2, r1, #10
 8013ad4:	4610      	mov	r0, r2
 8013ad6:	4619      	mov	r1, r3
 8013ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ada:	2200      	movs	r2, #0
 8013adc:	60bb      	str	r3, [r7, #8]
 8013ade:	60fa      	str	r2, [r7, #12]
 8013ae0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013ae4:	f7fd f8d8 	bl	8010c98 <__aeabi_uldivmod>
 8013ae8:	4602      	mov	r2, r0
 8013aea:	460b      	mov	r3, r1
 8013aec:	4613      	mov	r3, r2
 8013aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8013af0:	4b0b      	ldr	r3, [pc, #44]	@ (8013b20 <HAL_RCC_GetSysClockFreq+0x180>)
 8013af2:	685b      	ldr	r3, [r3, #4]
 8013af4:	0c1b      	lsrs	r3, r3, #16
 8013af6:	f003 0303 	and.w	r3, r3, #3
 8013afa:	3301      	adds	r3, #1
 8013afc:	005b      	lsls	r3, r3, #1
 8013afe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8013b00:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8013b08:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8013b0a:	e002      	b.n	8013b12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8013b0c:	4b05      	ldr	r3, [pc, #20]	@ (8013b24 <HAL_RCC_GetSysClockFreq+0x184>)
 8013b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8013b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8013b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8013b14:	4618      	mov	r0, r3
 8013b16:	3740      	adds	r7, #64	@ 0x40
 8013b18:	46bd      	mov	sp, r7
 8013b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013b1e:	bf00      	nop
 8013b20:	40023800 	.word	0x40023800
 8013b24:	00f42400 	.word	0x00f42400
 8013b28:	017d7840 	.word	0x017d7840

08013b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013b2c:	b480      	push	{r7}
 8013b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013b30:	4b03      	ldr	r3, [pc, #12]	@ (8013b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8013b32:	681b      	ldr	r3, [r3, #0]
}
 8013b34:	4618      	mov	r0, r3
 8013b36:	46bd      	mov	sp, r7
 8013b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b3c:	4770      	bx	lr
 8013b3e:	bf00      	nop
 8013b40:	20000000 	.word	0x20000000

08013b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013b44:	b580      	push	{r7, lr}
 8013b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8013b48:	f7ff fff0 	bl	8013b2c <HAL_RCC_GetHCLKFreq>
 8013b4c:	4602      	mov	r2, r0
 8013b4e:	4b05      	ldr	r3, [pc, #20]	@ (8013b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8013b50:	689b      	ldr	r3, [r3, #8]
 8013b52:	0a9b      	lsrs	r3, r3, #10
 8013b54:	f003 0307 	and.w	r3, r3, #7
 8013b58:	4903      	ldr	r1, [pc, #12]	@ (8013b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013b5a:	5ccb      	ldrb	r3, [r1, r3]
 8013b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013b60:	4618      	mov	r0, r3
 8013b62:	bd80      	pop	{r7, pc}
 8013b64:	40023800 	.word	0x40023800
 8013b68:	08018508 	.word	0x08018508

08013b6c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	b086      	sub	sp, #24
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8013b74:	2300      	movs	r3, #0
 8013b76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8013b78:	2300      	movs	r3, #0
 8013b7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	f003 0301 	and.w	r3, r3, #1
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d105      	bne.n	8013b94 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d038      	beq.n	8013c06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8013b94:	4b68      	ldr	r3, [pc, #416]	@ (8013d38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8013b96:	2200      	movs	r2, #0
 8013b98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8013b9a:	f7fd fe7b 	bl	8011894 <HAL_GetTick>
 8013b9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8013ba0:	e008      	b.n	8013bb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8013ba2:	f7fd fe77 	bl	8011894 <HAL_GetTick>
 8013ba6:	4602      	mov	r2, r0
 8013ba8:	697b      	ldr	r3, [r7, #20]
 8013baa:	1ad3      	subs	r3, r2, r3
 8013bac:	2b02      	cmp	r3, #2
 8013bae:	d901      	bls.n	8013bb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8013bb0:	2303      	movs	r3, #3
 8013bb2:	e0bd      	b.n	8013d30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8013bb4:	4b61      	ldr	r3, [pc, #388]	@ (8013d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d1f0      	bne.n	8013ba2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	685a      	ldr	r2, [r3, #4]
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	689b      	ldr	r3, [r3, #8]
 8013bc8:	019b      	lsls	r3, r3, #6
 8013bca:	431a      	orrs	r2, r3
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	68db      	ldr	r3, [r3, #12]
 8013bd0:	071b      	lsls	r3, r3, #28
 8013bd2:	495a      	ldr	r1, [pc, #360]	@ (8013d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013bd4:	4313      	orrs	r3, r2
 8013bd6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8013bda:	4b57      	ldr	r3, [pc, #348]	@ (8013d38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8013bdc:	2201      	movs	r2, #1
 8013bde:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8013be0:	f7fd fe58 	bl	8011894 <HAL_GetTick>
 8013be4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8013be6:	e008      	b.n	8013bfa <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8013be8:	f7fd fe54 	bl	8011894 <HAL_GetTick>
 8013bec:	4602      	mov	r2, r0
 8013bee:	697b      	ldr	r3, [r7, #20]
 8013bf0:	1ad3      	subs	r3, r2, r3
 8013bf2:	2b02      	cmp	r3, #2
 8013bf4:	d901      	bls.n	8013bfa <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8013bf6:	2303      	movs	r3, #3
 8013bf8:	e09a      	b.n	8013d30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8013bfa:	4b50      	ldr	r3, [pc, #320]	@ (8013d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d0f0      	beq.n	8013be8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	f003 0302 	and.w	r3, r3, #2
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	f000 8083 	beq.w	8013d1a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8013c14:	2300      	movs	r3, #0
 8013c16:	60fb      	str	r3, [r7, #12]
 8013c18:	4b48      	ldr	r3, [pc, #288]	@ (8013d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c1c:	4a47      	ldr	r2, [pc, #284]	@ (8013d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013c1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013c22:	6413      	str	r3, [r2, #64]	@ 0x40
 8013c24:	4b45      	ldr	r3, [pc, #276]	@ (8013d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013c2c:	60fb      	str	r3, [r7, #12]
 8013c2e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8013c30:	4b43      	ldr	r3, [pc, #268]	@ (8013d40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	4a42      	ldr	r2, [pc, #264]	@ (8013d40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8013c36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013c3a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8013c3c:	f7fd fe2a 	bl	8011894 <HAL_GetTick>
 8013c40:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8013c42:	e008      	b.n	8013c56 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013c44:	f7fd fe26 	bl	8011894 <HAL_GetTick>
 8013c48:	4602      	mov	r2, r0
 8013c4a:	697b      	ldr	r3, [r7, #20]
 8013c4c:	1ad3      	subs	r3, r2, r3
 8013c4e:	2b02      	cmp	r3, #2
 8013c50:	d901      	bls.n	8013c56 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8013c52:	2303      	movs	r3, #3
 8013c54:	e06c      	b.n	8013d30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8013c56:	4b3a      	ldr	r3, [pc, #232]	@ (8013d40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d0f0      	beq.n	8013c44 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8013c62:	4b36      	ldr	r3, [pc, #216]	@ (8013d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013c66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013c6a:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8013c6c:	693b      	ldr	r3, [r7, #16]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d02f      	beq.n	8013cd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	691b      	ldr	r3, [r3, #16]
 8013c76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013c7a:	693a      	ldr	r2, [r7, #16]
 8013c7c:	429a      	cmp	r2, r3
 8013c7e:	d028      	beq.n	8013cd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8013c80:	4b2e      	ldr	r3, [pc, #184]	@ (8013d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013c84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013c88:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8013c8a:	4b2e      	ldr	r3, [pc, #184]	@ (8013d44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8013c8c:	2201      	movs	r2, #1
 8013c8e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8013c90:	4b2c      	ldr	r3, [pc, #176]	@ (8013d44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8013c92:	2200      	movs	r2, #0
 8013c94:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8013c96:	4a29      	ldr	r2, [pc, #164]	@ (8013d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013c98:	693b      	ldr	r3, [r7, #16]
 8013c9a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8013c9c:	4b27      	ldr	r3, [pc, #156]	@ (8013d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013ca0:	f003 0301 	and.w	r3, r3, #1
 8013ca4:	2b01      	cmp	r3, #1
 8013ca6:	d114      	bne.n	8013cd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8013ca8:	f7fd fdf4 	bl	8011894 <HAL_GetTick>
 8013cac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013cae:	e00a      	b.n	8013cc6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013cb0:	f7fd fdf0 	bl	8011894 <HAL_GetTick>
 8013cb4:	4602      	mov	r2, r0
 8013cb6:	697b      	ldr	r3, [r7, #20]
 8013cb8:	1ad3      	subs	r3, r2, r3
 8013cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013cbe:	4293      	cmp	r3, r2
 8013cc0:	d901      	bls.n	8013cc6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8013cc2:	2303      	movs	r3, #3
 8013cc4:	e034      	b.n	8013d30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8013d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013cca:	f003 0302 	and.w	r3, r3, #2
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d0ee      	beq.n	8013cb0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	691b      	ldr	r3, [r3, #16]
 8013cd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013cda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013cde:	d10d      	bne.n	8013cfc <HAL_RCCEx_PeriphCLKConfig+0x190>
 8013ce0:	4b16      	ldr	r3, [pc, #88]	@ (8013d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013ce2:	689b      	ldr	r3, [r3, #8]
 8013ce4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	691b      	ldr	r3, [r3, #16]
 8013cec:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8013cf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013cf4:	4911      	ldr	r1, [pc, #68]	@ (8013d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013cf6:	4313      	orrs	r3, r2
 8013cf8:	608b      	str	r3, [r1, #8]
 8013cfa:	e005      	b.n	8013d08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8013cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8013d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013cfe:	689b      	ldr	r3, [r3, #8]
 8013d00:	4a0e      	ldr	r2, [pc, #56]	@ (8013d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013d02:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8013d06:	6093      	str	r3, [r2, #8]
 8013d08:	4b0c      	ldr	r3, [pc, #48]	@ (8013d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013d0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	691b      	ldr	r3, [r3, #16]
 8013d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013d14:	4909      	ldr	r1, [pc, #36]	@ (8013d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013d16:	4313      	orrs	r3, r2
 8013d18:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	f003 0308 	and.w	r3, r3, #8
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d003      	beq.n	8013d2e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	7d1a      	ldrb	r2, [r3, #20]
 8013d2a:	4b07      	ldr	r3, [pc, #28]	@ (8013d48 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8013d2c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8013d2e:	2300      	movs	r3, #0
}
 8013d30:	4618      	mov	r0, r3
 8013d32:	3718      	adds	r7, #24
 8013d34:	46bd      	mov	sp, r7
 8013d36:	bd80      	pop	{r7, pc}
 8013d38:	42470068 	.word	0x42470068
 8013d3c:	40023800 	.word	0x40023800
 8013d40:	40007000 	.word	0x40007000
 8013d44:	42470e40 	.word	0x42470e40
 8013d48:	424711e0 	.word	0x424711e0

08013d4c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8013d4c:	b480      	push	{r7}
 8013d4e:	b087      	sub	sp, #28
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8013d54:	2300      	movs	r3, #0
 8013d56:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8013d58:	2300      	movs	r3, #0
 8013d5a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8013d60:	2300      	movs	r3, #0
 8013d62:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	2b01      	cmp	r3, #1
 8013d68:	d141      	bne.n	8013dee <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8013d6a:	4b25      	ldr	r3, [pc, #148]	@ (8013e00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8013d6c:	689b      	ldr	r3, [r3, #8]
 8013d6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8013d72:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d006      	beq.n	8013d88 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013d80:	d131      	bne.n	8013de6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8013d82:	4b20      	ldr	r3, [pc, #128]	@ (8013e04 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8013d84:	617b      	str	r3, [r7, #20]
          break;
 8013d86:	e031      	b.n	8013dec <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8013d88:	4b1d      	ldr	r3, [pc, #116]	@ (8013e00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8013d8a:	685b      	ldr	r3, [r3, #4]
 8013d8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013d90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013d94:	d109      	bne.n	8013daa <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8013d96:	4b1a      	ldr	r3, [pc, #104]	@ (8013e00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8013d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013d9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013da0:	4a19      	ldr	r2, [pc, #100]	@ (8013e08 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8013da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8013da6:	613b      	str	r3, [r7, #16]
 8013da8:	e008      	b.n	8013dbc <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8013daa:	4b15      	ldr	r3, [pc, #84]	@ (8013e00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8013dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013db0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013db4:	4a15      	ldr	r2, [pc, #84]	@ (8013e0c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8013db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8013dba:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8013dbc:	4b10      	ldr	r3, [pc, #64]	@ (8013e00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8013dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013dc2:	099b      	lsrs	r3, r3, #6
 8013dc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013dc8:	693b      	ldr	r3, [r7, #16]
 8013dca:	fb02 f303 	mul.w	r3, r2, r3
 8013dce:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8013dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8013e00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8013dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013dd6:	0f1b      	lsrs	r3, r3, #28
 8013dd8:	f003 0307 	and.w	r3, r3, #7
 8013ddc:	68ba      	ldr	r2, [r7, #8]
 8013dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8013de2:	617b      	str	r3, [r7, #20]
          break;
 8013de4:	e002      	b.n	8013dec <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8013de6:	2300      	movs	r3, #0
 8013de8:	617b      	str	r3, [r7, #20]
          break;
 8013dea:	bf00      	nop
        }
      }
      break;
 8013dec:	e000      	b.n	8013df0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8013dee:	bf00      	nop
    }
  }
  return frequency;
 8013df0:	697b      	ldr	r3, [r7, #20]
}
 8013df2:	4618      	mov	r0, r3
 8013df4:	371c      	adds	r7, #28
 8013df6:	46bd      	mov	sp, r7
 8013df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dfc:	4770      	bx	lr
 8013dfe:	bf00      	nop
 8013e00:	40023800 	.word	0x40023800
 8013e04:	00bb8000 	.word	0x00bb8000
 8013e08:	017d7840 	.word	0x017d7840
 8013e0c:	00f42400 	.word	0x00f42400

08013e10 <__cvt>:
 8013e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013e14:	ec57 6b10 	vmov	r6, r7, d0
 8013e18:	2f00      	cmp	r7, #0
 8013e1a:	460c      	mov	r4, r1
 8013e1c:	4619      	mov	r1, r3
 8013e1e:	463b      	mov	r3, r7
 8013e20:	bfbb      	ittet	lt
 8013e22:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8013e26:	461f      	movlt	r7, r3
 8013e28:	2300      	movge	r3, #0
 8013e2a:	232d      	movlt	r3, #45	@ 0x2d
 8013e2c:	700b      	strb	r3, [r1, #0]
 8013e2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013e30:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8013e34:	4691      	mov	r9, r2
 8013e36:	f023 0820 	bic.w	r8, r3, #32
 8013e3a:	bfbc      	itt	lt
 8013e3c:	4632      	movlt	r2, r6
 8013e3e:	4616      	movlt	r6, r2
 8013e40:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013e44:	d005      	beq.n	8013e52 <__cvt+0x42>
 8013e46:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8013e4a:	d100      	bne.n	8013e4e <__cvt+0x3e>
 8013e4c:	3401      	adds	r4, #1
 8013e4e:	2102      	movs	r1, #2
 8013e50:	e000      	b.n	8013e54 <__cvt+0x44>
 8013e52:	2103      	movs	r1, #3
 8013e54:	ab03      	add	r3, sp, #12
 8013e56:	9301      	str	r3, [sp, #4]
 8013e58:	ab02      	add	r3, sp, #8
 8013e5a:	9300      	str	r3, [sp, #0]
 8013e5c:	ec47 6b10 	vmov	d0, r6, r7
 8013e60:	4653      	mov	r3, sl
 8013e62:	4622      	mov	r2, r4
 8013e64:	f001 f870 	bl	8014f48 <_dtoa_r>
 8013e68:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8013e6c:	4605      	mov	r5, r0
 8013e6e:	d119      	bne.n	8013ea4 <__cvt+0x94>
 8013e70:	f019 0f01 	tst.w	r9, #1
 8013e74:	d00e      	beq.n	8013e94 <__cvt+0x84>
 8013e76:	eb00 0904 	add.w	r9, r0, r4
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	4630      	mov	r0, r6
 8013e80:	4639      	mov	r1, r7
 8013e82:	f7fc fe29 	bl	8010ad8 <__aeabi_dcmpeq>
 8013e86:	b108      	cbz	r0, 8013e8c <__cvt+0x7c>
 8013e88:	f8cd 900c 	str.w	r9, [sp, #12]
 8013e8c:	2230      	movs	r2, #48	@ 0x30
 8013e8e:	9b03      	ldr	r3, [sp, #12]
 8013e90:	454b      	cmp	r3, r9
 8013e92:	d31e      	bcc.n	8013ed2 <__cvt+0xc2>
 8013e94:	9b03      	ldr	r3, [sp, #12]
 8013e96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013e98:	1b5b      	subs	r3, r3, r5
 8013e9a:	4628      	mov	r0, r5
 8013e9c:	6013      	str	r3, [r2, #0]
 8013e9e:	b004      	add	sp, #16
 8013ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ea4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013ea8:	eb00 0904 	add.w	r9, r0, r4
 8013eac:	d1e5      	bne.n	8013e7a <__cvt+0x6a>
 8013eae:	7803      	ldrb	r3, [r0, #0]
 8013eb0:	2b30      	cmp	r3, #48	@ 0x30
 8013eb2:	d10a      	bne.n	8013eca <__cvt+0xba>
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	4630      	mov	r0, r6
 8013eba:	4639      	mov	r1, r7
 8013ebc:	f7fc fe0c 	bl	8010ad8 <__aeabi_dcmpeq>
 8013ec0:	b918      	cbnz	r0, 8013eca <__cvt+0xba>
 8013ec2:	f1c4 0401 	rsb	r4, r4, #1
 8013ec6:	f8ca 4000 	str.w	r4, [sl]
 8013eca:	f8da 3000 	ldr.w	r3, [sl]
 8013ece:	4499      	add	r9, r3
 8013ed0:	e7d3      	b.n	8013e7a <__cvt+0x6a>
 8013ed2:	1c59      	adds	r1, r3, #1
 8013ed4:	9103      	str	r1, [sp, #12]
 8013ed6:	701a      	strb	r2, [r3, #0]
 8013ed8:	e7d9      	b.n	8013e8e <__cvt+0x7e>

08013eda <__exponent>:
 8013eda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013edc:	2900      	cmp	r1, #0
 8013ede:	bfba      	itte	lt
 8013ee0:	4249      	neglt	r1, r1
 8013ee2:	232d      	movlt	r3, #45	@ 0x2d
 8013ee4:	232b      	movge	r3, #43	@ 0x2b
 8013ee6:	2909      	cmp	r1, #9
 8013ee8:	7002      	strb	r2, [r0, #0]
 8013eea:	7043      	strb	r3, [r0, #1]
 8013eec:	dd29      	ble.n	8013f42 <__exponent+0x68>
 8013eee:	f10d 0307 	add.w	r3, sp, #7
 8013ef2:	461d      	mov	r5, r3
 8013ef4:	270a      	movs	r7, #10
 8013ef6:	461a      	mov	r2, r3
 8013ef8:	fbb1 f6f7 	udiv	r6, r1, r7
 8013efc:	fb07 1416 	mls	r4, r7, r6, r1
 8013f00:	3430      	adds	r4, #48	@ 0x30
 8013f02:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013f06:	460c      	mov	r4, r1
 8013f08:	2c63      	cmp	r4, #99	@ 0x63
 8013f0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8013f0e:	4631      	mov	r1, r6
 8013f10:	dcf1      	bgt.n	8013ef6 <__exponent+0x1c>
 8013f12:	3130      	adds	r1, #48	@ 0x30
 8013f14:	1e94      	subs	r4, r2, #2
 8013f16:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013f1a:	1c41      	adds	r1, r0, #1
 8013f1c:	4623      	mov	r3, r4
 8013f1e:	42ab      	cmp	r3, r5
 8013f20:	d30a      	bcc.n	8013f38 <__exponent+0x5e>
 8013f22:	f10d 0309 	add.w	r3, sp, #9
 8013f26:	1a9b      	subs	r3, r3, r2
 8013f28:	42ac      	cmp	r4, r5
 8013f2a:	bf88      	it	hi
 8013f2c:	2300      	movhi	r3, #0
 8013f2e:	3302      	adds	r3, #2
 8013f30:	4403      	add	r3, r0
 8013f32:	1a18      	subs	r0, r3, r0
 8013f34:	b003      	add	sp, #12
 8013f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f38:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013f3c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013f40:	e7ed      	b.n	8013f1e <__exponent+0x44>
 8013f42:	2330      	movs	r3, #48	@ 0x30
 8013f44:	3130      	adds	r1, #48	@ 0x30
 8013f46:	7083      	strb	r3, [r0, #2]
 8013f48:	70c1      	strb	r1, [r0, #3]
 8013f4a:	1d03      	adds	r3, r0, #4
 8013f4c:	e7f1      	b.n	8013f32 <__exponent+0x58>
	...

08013f50 <_printf_float>:
 8013f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f54:	b08d      	sub	sp, #52	@ 0x34
 8013f56:	460c      	mov	r4, r1
 8013f58:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013f5c:	4616      	mov	r6, r2
 8013f5e:	461f      	mov	r7, r3
 8013f60:	4605      	mov	r5, r0
 8013f62:	f000 fee9 	bl	8014d38 <_localeconv_r>
 8013f66:	6803      	ldr	r3, [r0, #0]
 8013f68:	9304      	str	r3, [sp, #16]
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f7fc f988 	bl	8010280 <strlen>
 8013f70:	2300      	movs	r3, #0
 8013f72:	930a      	str	r3, [sp, #40]	@ 0x28
 8013f74:	f8d8 3000 	ldr.w	r3, [r8]
 8013f78:	9005      	str	r0, [sp, #20]
 8013f7a:	3307      	adds	r3, #7
 8013f7c:	f023 0307 	bic.w	r3, r3, #7
 8013f80:	f103 0208 	add.w	r2, r3, #8
 8013f84:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013f88:	f8d4 b000 	ldr.w	fp, [r4]
 8013f8c:	f8c8 2000 	str.w	r2, [r8]
 8013f90:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013f94:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8013f98:	9307      	str	r3, [sp, #28]
 8013f9a:	f8cd 8018 	str.w	r8, [sp, #24]
 8013f9e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8013fa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013fa6:	4b9c      	ldr	r3, [pc, #624]	@ (8014218 <_printf_float+0x2c8>)
 8013fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8013fac:	f7fc fdc6 	bl	8010b3c <__aeabi_dcmpun>
 8013fb0:	bb70      	cbnz	r0, 8014010 <_printf_float+0xc0>
 8013fb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013fb6:	4b98      	ldr	r3, [pc, #608]	@ (8014218 <_printf_float+0x2c8>)
 8013fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8013fbc:	f7fc fda0 	bl	8010b00 <__aeabi_dcmple>
 8013fc0:	bb30      	cbnz	r0, 8014010 <_printf_float+0xc0>
 8013fc2:	2200      	movs	r2, #0
 8013fc4:	2300      	movs	r3, #0
 8013fc6:	4640      	mov	r0, r8
 8013fc8:	4649      	mov	r1, r9
 8013fca:	f7fc fd8f 	bl	8010aec <__aeabi_dcmplt>
 8013fce:	b110      	cbz	r0, 8013fd6 <_printf_float+0x86>
 8013fd0:	232d      	movs	r3, #45	@ 0x2d
 8013fd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013fd6:	4a91      	ldr	r2, [pc, #580]	@ (801421c <_printf_float+0x2cc>)
 8013fd8:	4b91      	ldr	r3, [pc, #580]	@ (8014220 <_printf_float+0x2d0>)
 8013fda:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013fde:	bf8c      	ite	hi
 8013fe0:	4690      	movhi	r8, r2
 8013fe2:	4698      	movls	r8, r3
 8013fe4:	2303      	movs	r3, #3
 8013fe6:	6123      	str	r3, [r4, #16]
 8013fe8:	f02b 0304 	bic.w	r3, fp, #4
 8013fec:	6023      	str	r3, [r4, #0]
 8013fee:	f04f 0900 	mov.w	r9, #0
 8013ff2:	9700      	str	r7, [sp, #0]
 8013ff4:	4633      	mov	r3, r6
 8013ff6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013ff8:	4621      	mov	r1, r4
 8013ffa:	4628      	mov	r0, r5
 8013ffc:	f000 f9d2 	bl	80143a4 <_printf_common>
 8014000:	3001      	adds	r0, #1
 8014002:	f040 808d 	bne.w	8014120 <_printf_float+0x1d0>
 8014006:	f04f 30ff 	mov.w	r0, #4294967295
 801400a:	b00d      	add	sp, #52	@ 0x34
 801400c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014010:	4642      	mov	r2, r8
 8014012:	464b      	mov	r3, r9
 8014014:	4640      	mov	r0, r8
 8014016:	4649      	mov	r1, r9
 8014018:	f7fc fd90 	bl	8010b3c <__aeabi_dcmpun>
 801401c:	b140      	cbz	r0, 8014030 <_printf_float+0xe0>
 801401e:	464b      	mov	r3, r9
 8014020:	2b00      	cmp	r3, #0
 8014022:	bfbc      	itt	lt
 8014024:	232d      	movlt	r3, #45	@ 0x2d
 8014026:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801402a:	4a7e      	ldr	r2, [pc, #504]	@ (8014224 <_printf_float+0x2d4>)
 801402c:	4b7e      	ldr	r3, [pc, #504]	@ (8014228 <_printf_float+0x2d8>)
 801402e:	e7d4      	b.n	8013fda <_printf_float+0x8a>
 8014030:	6863      	ldr	r3, [r4, #4]
 8014032:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8014036:	9206      	str	r2, [sp, #24]
 8014038:	1c5a      	adds	r2, r3, #1
 801403a:	d13b      	bne.n	80140b4 <_printf_float+0x164>
 801403c:	2306      	movs	r3, #6
 801403e:	6063      	str	r3, [r4, #4]
 8014040:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8014044:	2300      	movs	r3, #0
 8014046:	6022      	str	r2, [r4, #0]
 8014048:	9303      	str	r3, [sp, #12]
 801404a:	ab0a      	add	r3, sp, #40	@ 0x28
 801404c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8014050:	ab09      	add	r3, sp, #36	@ 0x24
 8014052:	9300      	str	r3, [sp, #0]
 8014054:	6861      	ldr	r1, [r4, #4]
 8014056:	ec49 8b10 	vmov	d0, r8, r9
 801405a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801405e:	4628      	mov	r0, r5
 8014060:	f7ff fed6 	bl	8013e10 <__cvt>
 8014064:	9b06      	ldr	r3, [sp, #24]
 8014066:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014068:	2b47      	cmp	r3, #71	@ 0x47
 801406a:	4680      	mov	r8, r0
 801406c:	d129      	bne.n	80140c2 <_printf_float+0x172>
 801406e:	1cc8      	adds	r0, r1, #3
 8014070:	db02      	blt.n	8014078 <_printf_float+0x128>
 8014072:	6863      	ldr	r3, [r4, #4]
 8014074:	4299      	cmp	r1, r3
 8014076:	dd41      	ble.n	80140fc <_printf_float+0x1ac>
 8014078:	f1aa 0a02 	sub.w	sl, sl, #2
 801407c:	fa5f fa8a 	uxtb.w	sl, sl
 8014080:	3901      	subs	r1, #1
 8014082:	4652      	mov	r2, sl
 8014084:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8014088:	9109      	str	r1, [sp, #36]	@ 0x24
 801408a:	f7ff ff26 	bl	8013eda <__exponent>
 801408e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014090:	1813      	adds	r3, r2, r0
 8014092:	2a01      	cmp	r2, #1
 8014094:	4681      	mov	r9, r0
 8014096:	6123      	str	r3, [r4, #16]
 8014098:	dc02      	bgt.n	80140a0 <_printf_float+0x150>
 801409a:	6822      	ldr	r2, [r4, #0]
 801409c:	07d2      	lsls	r2, r2, #31
 801409e:	d501      	bpl.n	80140a4 <_printf_float+0x154>
 80140a0:	3301      	adds	r3, #1
 80140a2:	6123      	str	r3, [r4, #16]
 80140a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d0a2      	beq.n	8013ff2 <_printf_float+0xa2>
 80140ac:	232d      	movs	r3, #45	@ 0x2d
 80140ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80140b2:	e79e      	b.n	8013ff2 <_printf_float+0xa2>
 80140b4:	9a06      	ldr	r2, [sp, #24]
 80140b6:	2a47      	cmp	r2, #71	@ 0x47
 80140b8:	d1c2      	bne.n	8014040 <_printf_float+0xf0>
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d1c0      	bne.n	8014040 <_printf_float+0xf0>
 80140be:	2301      	movs	r3, #1
 80140c0:	e7bd      	b.n	801403e <_printf_float+0xee>
 80140c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80140c6:	d9db      	bls.n	8014080 <_printf_float+0x130>
 80140c8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80140cc:	d118      	bne.n	8014100 <_printf_float+0x1b0>
 80140ce:	2900      	cmp	r1, #0
 80140d0:	6863      	ldr	r3, [r4, #4]
 80140d2:	dd0b      	ble.n	80140ec <_printf_float+0x19c>
 80140d4:	6121      	str	r1, [r4, #16]
 80140d6:	b913      	cbnz	r3, 80140de <_printf_float+0x18e>
 80140d8:	6822      	ldr	r2, [r4, #0]
 80140da:	07d0      	lsls	r0, r2, #31
 80140dc:	d502      	bpl.n	80140e4 <_printf_float+0x194>
 80140de:	3301      	adds	r3, #1
 80140e0:	440b      	add	r3, r1
 80140e2:	6123      	str	r3, [r4, #16]
 80140e4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80140e6:	f04f 0900 	mov.w	r9, #0
 80140ea:	e7db      	b.n	80140a4 <_printf_float+0x154>
 80140ec:	b913      	cbnz	r3, 80140f4 <_printf_float+0x1a4>
 80140ee:	6822      	ldr	r2, [r4, #0]
 80140f0:	07d2      	lsls	r2, r2, #31
 80140f2:	d501      	bpl.n	80140f8 <_printf_float+0x1a8>
 80140f4:	3302      	adds	r3, #2
 80140f6:	e7f4      	b.n	80140e2 <_printf_float+0x192>
 80140f8:	2301      	movs	r3, #1
 80140fa:	e7f2      	b.n	80140e2 <_printf_float+0x192>
 80140fc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8014100:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014102:	4299      	cmp	r1, r3
 8014104:	db05      	blt.n	8014112 <_printf_float+0x1c2>
 8014106:	6823      	ldr	r3, [r4, #0]
 8014108:	6121      	str	r1, [r4, #16]
 801410a:	07d8      	lsls	r0, r3, #31
 801410c:	d5ea      	bpl.n	80140e4 <_printf_float+0x194>
 801410e:	1c4b      	adds	r3, r1, #1
 8014110:	e7e7      	b.n	80140e2 <_printf_float+0x192>
 8014112:	2900      	cmp	r1, #0
 8014114:	bfd4      	ite	le
 8014116:	f1c1 0202 	rsble	r2, r1, #2
 801411a:	2201      	movgt	r2, #1
 801411c:	4413      	add	r3, r2
 801411e:	e7e0      	b.n	80140e2 <_printf_float+0x192>
 8014120:	6823      	ldr	r3, [r4, #0]
 8014122:	055a      	lsls	r2, r3, #21
 8014124:	d407      	bmi.n	8014136 <_printf_float+0x1e6>
 8014126:	6923      	ldr	r3, [r4, #16]
 8014128:	4642      	mov	r2, r8
 801412a:	4631      	mov	r1, r6
 801412c:	4628      	mov	r0, r5
 801412e:	47b8      	blx	r7
 8014130:	3001      	adds	r0, #1
 8014132:	d12b      	bne.n	801418c <_printf_float+0x23c>
 8014134:	e767      	b.n	8014006 <_printf_float+0xb6>
 8014136:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801413a:	f240 80dd 	bls.w	80142f8 <_printf_float+0x3a8>
 801413e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014142:	2200      	movs	r2, #0
 8014144:	2300      	movs	r3, #0
 8014146:	f7fc fcc7 	bl	8010ad8 <__aeabi_dcmpeq>
 801414a:	2800      	cmp	r0, #0
 801414c:	d033      	beq.n	80141b6 <_printf_float+0x266>
 801414e:	4a37      	ldr	r2, [pc, #220]	@ (801422c <_printf_float+0x2dc>)
 8014150:	2301      	movs	r3, #1
 8014152:	4631      	mov	r1, r6
 8014154:	4628      	mov	r0, r5
 8014156:	47b8      	blx	r7
 8014158:	3001      	adds	r0, #1
 801415a:	f43f af54 	beq.w	8014006 <_printf_float+0xb6>
 801415e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8014162:	4543      	cmp	r3, r8
 8014164:	db02      	blt.n	801416c <_printf_float+0x21c>
 8014166:	6823      	ldr	r3, [r4, #0]
 8014168:	07d8      	lsls	r0, r3, #31
 801416a:	d50f      	bpl.n	801418c <_printf_float+0x23c>
 801416c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014170:	4631      	mov	r1, r6
 8014172:	4628      	mov	r0, r5
 8014174:	47b8      	blx	r7
 8014176:	3001      	adds	r0, #1
 8014178:	f43f af45 	beq.w	8014006 <_printf_float+0xb6>
 801417c:	f04f 0900 	mov.w	r9, #0
 8014180:	f108 38ff 	add.w	r8, r8, #4294967295
 8014184:	f104 0a1a 	add.w	sl, r4, #26
 8014188:	45c8      	cmp	r8, r9
 801418a:	dc09      	bgt.n	80141a0 <_printf_float+0x250>
 801418c:	6823      	ldr	r3, [r4, #0]
 801418e:	079b      	lsls	r3, r3, #30
 8014190:	f100 8103 	bmi.w	801439a <_printf_float+0x44a>
 8014194:	68e0      	ldr	r0, [r4, #12]
 8014196:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014198:	4298      	cmp	r0, r3
 801419a:	bfb8      	it	lt
 801419c:	4618      	movlt	r0, r3
 801419e:	e734      	b.n	801400a <_printf_float+0xba>
 80141a0:	2301      	movs	r3, #1
 80141a2:	4652      	mov	r2, sl
 80141a4:	4631      	mov	r1, r6
 80141a6:	4628      	mov	r0, r5
 80141a8:	47b8      	blx	r7
 80141aa:	3001      	adds	r0, #1
 80141ac:	f43f af2b 	beq.w	8014006 <_printf_float+0xb6>
 80141b0:	f109 0901 	add.w	r9, r9, #1
 80141b4:	e7e8      	b.n	8014188 <_printf_float+0x238>
 80141b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	dc39      	bgt.n	8014230 <_printf_float+0x2e0>
 80141bc:	4a1b      	ldr	r2, [pc, #108]	@ (801422c <_printf_float+0x2dc>)
 80141be:	2301      	movs	r3, #1
 80141c0:	4631      	mov	r1, r6
 80141c2:	4628      	mov	r0, r5
 80141c4:	47b8      	blx	r7
 80141c6:	3001      	adds	r0, #1
 80141c8:	f43f af1d 	beq.w	8014006 <_printf_float+0xb6>
 80141cc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80141d0:	ea59 0303 	orrs.w	r3, r9, r3
 80141d4:	d102      	bne.n	80141dc <_printf_float+0x28c>
 80141d6:	6823      	ldr	r3, [r4, #0]
 80141d8:	07d9      	lsls	r1, r3, #31
 80141da:	d5d7      	bpl.n	801418c <_printf_float+0x23c>
 80141dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80141e0:	4631      	mov	r1, r6
 80141e2:	4628      	mov	r0, r5
 80141e4:	47b8      	blx	r7
 80141e6:	3001      	adds	r0, #1
 80141e8:	f43f af0d 	beq.w	8014006 <_printf_float+0xb6>
 80141ec:	f04f 0a00 	mov.w	sl, #0
 80141f0:	f104 0b1a 	add.w	fp, r4, #26
 80141f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141f6:	425b      	negs	r3, r3
 80141f8:	4553      	cmp	r3, sl
 80141fa:	dc01      	bgt.n	8014200 <_printf_float+0x2b0>
 80141fc:	464b      	mov	r3, r9
 80141fe:	e793      	b.n	8014128 <_printf_float+0x1d8>
 8014200:	2301      	movs	r3, #1
 8014202:	465a      	mov	r2, fp
 8014204:	4631      	mov	r1, r6
 8014206:	4628      	mov	r0, r5
 8014208:	47b8      	blx	r7
 801420a:	3001      	adds	r0, #1
 801420c:	f43f aefb 	beq.w	8014006 <_printf_float+0xb6>
 8014210:	f10a 0a01 	add.w	sl, sl, #1
 8014214:	e7ee      	b.n	80141f4 <_printf_float+0x2a4>
 8014216:	bf00      	nop
 8014218:	7fefffff 	.word	0x7fefffff
 801421c:	08018514 	.word	0x08018514
 8014220:	08018510 	.word	0x08018510
 8014224:	0801851c 	.word	0x0801851c
 8014228:	08018518 	.word	0x08018518
 801422c:	08018520 	.word	0x08018520
 8014230:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014232:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014236:	4553      	cmp	r3, sl
 8014238:	bfa8      	it	ge
 801423a:	4653      	movge	r3, sl
 801423c:	2b00      	cmp	r3, #0
 801423e:	4699      	mov	r9, r3
 8014240:	dc36      	bgt.n	80142b0 <_printf_float+0x360>
 8014242:	f04f 0b00 	mov.w	fp, #0
 8014246:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801424a:	f104 021a 	add.w	r2, r4, #26
 801424e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014250:	9306      	str	r3, [sp, #24]
 8014252:	eba3 0309 	sub.w	r3, r3, r9
 8014256:	455b      	cmp	r3, fp
 8014258:	dc31      	bgt.n	80142be <_printf_float+0x36e>
 801425a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801425c:	459a      	cmp	sl, r3
 801425e:	dc3a      	bgt.n	80142d6 <_printf_float+0x386>
 8014260:	6823      	ldr	r3, [r4, #0]
 8014262:	07da      	lsls	r2, r3, #31
 8014264:	d437      	bmi.n	80142d6 <_printf_float+0x386>
 8014266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014268:	ebaa 0903 	sub.w	r9, sl, r3
 801426c:	9b06      	ldr	r3, [sp, #24]
 801426e:	ebaa 0303 	sub.w	r3, sl, r3
 8014272:	4599      	cmp	r9, r3
 8014274:	bfa8      	it	ge
 8014276:	4699      	movge	r9, r3
 8014278:	f1b9 0f00 	cmp.w	r9, #0
 801427c:	dc33      	bgt.n	80142e6 <_printf_float+0x396>
 801427e:	f04f 0800 	mov.w	r8, #0
 8014282:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014286:	f104 0b1a 	add.w	fp, r4, #26
 801428a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801428c:	ebaa 0303 	sub.w	r3, sl, r3
 8014290:	eba3 0309 	sub.w	r3, r3, r9
 8014294:	4543      	cmp	r3, r8
 8014296:	f77f af79 	ble.w	801418c <_printf_float+0x23c>
 801429a:	2301      	movs	r3, #1
 801429c:	465a      	mov	r2, fp
 801429e:	4631      	mov	r1, r6
 80142a0:	4628      	mov	r0, r5
 80142a2:	47b8      	blx	r7
 80142a4:	3001      	adds	r0, #1
 80142a6:	f43f aeae 	beq.w	8014006 <_printf_float+0xb6>
 80142aa:	f108 0801 	add.w	r8, r8, #1
 80142ae:	e7ec      	b.n	801428a <_printf_float+0x33a>
 80142b0:	4642      	mov	r2, r8
 80142b2:	4631      	mov	r1, r6
 80142b4:	4628      	mov	r0, r5
 80142b6:	47b8      	blx	r7
 80142b8:	3001      	adds	r0, #1
 80142ba:	d1c2      	bne.n	8014242 <_printf_float+0x2f2>
 80142bc:	e6a3      	b.n	8014006 <_printf_float+0xb6>
 80142be:	2301      	movs	r3, #1
 80142c0:	4631      	mov	r1, r6
 80142c2:	4628      	mov	r0, r5
 80142c4:	9206      	str	r2, [sp, #24]
 80142c6:	47b8      	blx	r7
 80142c8:	3001      	adds	r0, #1
 80142ca:	f43f ae9c 	beq.w	8014006 <_printf_float+0xb6>
 80142ce:	9a06      	ldr	r2, [sp, #24]
 80142d0:	f10b 0b01 	add.w	fp, fp, #1
 80142d4:	e7bb      	b.n	801424e <_printf_float+0x2fe>
 80142d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80142da:	4631      	mov	r1, r6
 80142dc:	4628      	mov	r0, r5
 80142de:	47b8      	blx	r7
 80142e0:	3001      	adds	r0, #1
 80142e2:	d1c0      	bne.n	8014266 <_printf_float+0x316>
 80142e4:	e68f      	b.n	8014006 <_printf_float+0xb6>
 80142e6:	9a06      	ldr	r2, [sp, #24]
 80142e8:	464b      	mov	r3, r9
 80142ea:	4442      	add	r2, r8
 80142ec:	4631      	mov	r1, r6
 80142ee:	4628      	mov	r0, r5
 80142f0:	47b8      	blx	r7
 80142f2:	3001      	adds	r0, #1
 80142f4:	d1c3      	bne.n	801427e <_printf_float+0x32e>
 80142f6:	e686      	b.n	8014006 <_printf_float+0xb6>
 80142f8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80142fc:	f1ba 0f01 	cmp.w	sl, #1
 8014300:	dc01      	bgt.n	8014306 <_printf_float+0x3b6>
 8014302:	07db      	lsls	r3, r3, #31
 8014304:	d536      	bpl.n	8014374 <_printf_float+0x424>
 8014306:	2301      	movs	r3, #1
 8014308:	4642      	mov	r2, r8
 801430a:	4631      	mov	r1, r6
 801430c:	4628      	mov	r0, r5
 801430e:	47b8      	blx	r7
 8014310:	3001      	adds	r0, #1
 8014312:	f43f ae78 	beq.w	8014006 <_printf_float+0xb6>
 8014316:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801431a:	4631      	mov	r1, r6
 801431c:	4628      	mov	r0, r5
 801431e:	47b8      	blx	r7
 8014320:	3001      	adds	r0, #1
 8014322:	f43f ae70 	beq.w	8014006 <_printf_float+0xb6>
 8014326:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801432a:	2200      	movs	r2, #0
 801432c:	2300      	movs	r3, #0
 801432e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014332:	f7fc fbd1 	bl	8010ad8 <__aeabi_dcmpeq>
 8014336:	b9c0      	cbnz	r0, 801436a <_printf_float+0x41a>
 8014338:	4653      	mov	r3, sl
 801433a:	f108 0201 	add.w	r2, r8, #1
 801433e:	4631      	mov	r1, r6
 8014340:	4628      	mov	r0, r5
 8014342:	47b8      	blx	r7
 8014344:	3001      	adds	r0, #1
 8014346:	d10c      	bne.n	8014362 <_printf_float+0x412>
 8014348:	e65d      	b.n	8014006 <_printf_float+0xb6>
 801434a:	2301      	movs	r3, #1
 801434c:	465a      	mov	r2, fp
 801434e:	4631      	mov	r1, r6
 8014350:	4628      	mov	r0, r5
 8014352:	47b8      	blx	r7
 8014354:	3001      	adds	r0, #1
 8014356:	f43f ae56 	beq.w	8014006 <_printf_float+0xb6>
 801435a:	f108 0801 	add.w	r8, r8, #1
 801435e:	45d0      	cmp	r8, sl
 8014360:	dbf3      	blt.n	801434a <_printf_float+0x3fa>
 8014362:	464b      	mov	r3, r9
 8014364:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014368:	e6df      	b.n	801412a <_printf_float+0x1da>
 801436a:	f04f 0800 	mov.w	r8, #0
 801436e:	f104 0b1a 	add.w	fp, r4, #26
 8014372:	e7f4      	b.n	801435e <_printf_float+0x40e>
 8014374:	2301      	movs	r3, #1
 8014376:	4642      	mov	r2, r8
 8014378:	e7e1      	b.n	801433e <_printf_float+0x3ee>
 801437a:	2301      	movs	r3, #1
 801437c:	464a      	mov	r2, r9
 801437e:	4631      	mov	r1, r6
 8014380:	4628      	mov	r0, r5
 8014382:	47b8      	blx	r7
 8014384:	3001      	adds	r0, #1
 8014386:	f43f ae3e 	beq.w	8014006 <_printf_float+0xb6>
 801438a:	f108 0801 	add.w	r8, r8, #1
 801438e:	68e3      	ldr	r3, [r4, #12]
 8014390:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014392:	1a5b      	subs	r3, r3, r1
 8014394:	4543      	cmp	r3, r8
 8014396:	dcf0      	bgt.n	801437a <_printf_float+0x42a>
 8014398:	e6fc      	b.n	8014194 <_printf_float+0x244>
 801439a:	f04f 0800 	mov.w	r8, #0
 801439e:	f104 0919 	add.w	r9, r4, #25
 80143a2:	e7f4      	b.n	801438e <_printf_float+0x43e>

080143a4 <_printf_common>:
 80143a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143a8:	4616      	mov	r6, r2
 80143aa:	4698      	mov	r8, r3
 80143ac:	688a      	ldr	r2, [r1, #8]
 80143ae:	690b      	ldr	r3, [r1, #16]
 80143b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80143b4:	4293      	cmp	r3, r2
 80143b6:	bfb8      	it	lt
 80143b8:	4613      	movlt	r3, r2
 80143ba:	6033      	str	r3, [r6, #0]
 80143bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80143c0:	4607      	mov	r7, r0
 80143c2:	460c      	mov	r4, r1
 80143c4:	b10a      	cbz	r2, 80143ca <_printf_common+0x26>
 80143c6:	3301      	adds	r3, #1
 80143c8:	6033      	str	r3, [r6, #0]
 80143ca:	6823      	ldr	r3, [r4, #0]
 80143cc:	0699      	lsls	r1, r3, #26
 80143ce:	bf42      	ittt	mi
 80143d0:	6833      	ldrmi	r3, [r6, #0]
 80143d2:	3302      	addmi	r3, #2
 80143d4:	6033      	strmi	r3, [r6, #0]
 80143d6:	6825      	ldr	r5, [r4, #0]
 80143d8:	f015 0506 	ands.w	r5, r5, #6
 80143dc:	d106      	bne.n	80143ec <_printf_common+0x48>
 80143de:	f104 0a19 	add.w	sl, r4, #25
 80143e2:	68e3      	ldr	r3, [r4, #12]
 80143e4:	6832      	ldr	r2, [r6, #0]
 80143e6:	1a9b      	subs	r3, r3, r2
 80143e8:	42ab      	cmp	r3, r5
 80143ea:	dc26      	bgt.n	801443a <_printf_common+0x96>
 80143ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80143f0:	6822      	ldr	r2, [r4, #0]
 80143f2:	3b00      	subs	r3, #0
 80143f4:	bf18      	it	ne
 80143f6:	2301      	movne	r3, #1
 80143f8:	0692      	lsls	r2, r2, #26
 80143fa:	d42b      	bmi.n	8014454 <_printf_common+0xb0>
 80143fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014400:	4641      	mov	r1, r8
 8014402:	4638      	mov	r0, r7
 8014404:	47c8      	blx	r9
 8014406:	3001      	adds	r0, #1
 8014408:	d01e      	beq.n	8014448 <_printf_common+0xa4>
 801440a:	6823      	ldr	r3, [r4, #0]
 801440c:	6922      	ldr	r2, [r4, #16]
 801440e:	f003 0306 	and.w	r3, r3, #6
 8014412:	2b04      	cmp	r3, #4
 8014414:	bf02      	ittt	eq
 8014416:	68e5      	ldreq	r5, [r4, #12]
 8014418:	6833      	ldreq	r3, [r6, #0]
 801441a:	1aed      	subeq	r5, r5, r3
 801441c:	68a3      	ldr	r3, [r4, #8]
 801441e:	bf0c      	ite	eq
 8014420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014424:	2500      	movne	r5, #0
 8014426:	4293      	cmp	r3, r2
 8014428:	bfc4      	itt	gt
 801442a:	1a9b      	subgt	r3, r3, r2
 801442c:	18ed      	addgt	r5, r5, r3
 801442e:	2600      	movs	r6, #0
 8014430:	341a      	adds	r4, #26
 8014432:	42b5      	cmp	r5, r6
 8014434:	d11a      	bne.n	801446c <_printf_common+0xc8>
 8014436:	2000      	movs	r0, #0
 8014438:	e008      	b.n	801444c <_printf_common+0xa8>
 801443a:	2301      	movs	r3, #1
 801443c:	4652      	mov	r2, sl
 801443e:	4641      	mov	r1, r8
 8014440:	4638      	mov	r0, r7
 8014442:	47c8      	blx	r9
 8014444:	3001      	adds	r0, #1
 8014446:	d103      	bne.n	8014450 <_printf_common+0xac>
 8014448:	f04f 30ff 	mov.w	r0, #4294967295
 801444c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014450:	3501      	adds	r5, #1
 8014452:	e7c6      	b.n	80143e2 <_printf_common+0x3e>
 8014454:	18e1      	adds	r1, r4, r3
 8014456:	1c5a      	adds	r2, r3, #1
 8014458:	2030      	movs	r0, #48	@ 0x30
 801445a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801445e:	4422      	add	r2, r4
 8014460:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014464:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014468:	3302      	adds	r3, #2
 801446a:	e7c7      	b.n	80143fc <_printf_common+0x58>
 801446c:	2301      	movs	r3, #1
 801446e:	4622      	mov	r2, r4
 8014470:	4641      	mov	r1, r8
 8014472:	4638      	mov	r0, r7
 8014474:	47c8      	blx	r9
 8014476:	3001      	adds	r0, #1
 8014478:	d0e6      	beq.n	8014448 <_printf_common+0xa4>
 801447a:	3601      	adds	r6, #1
 801447c:	e7d9      	b.n	8014432 <_printf_common+0x8e>
	...

08014480 <_printf_i>:
 8014480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014484:	7e0f      	ldrb	r7, [r1, #24]
 8014486:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014488:	2f78      	cmp	r7, #120	@ 0x78
 801448a:	4691      	mov	r9, r2
 801448c:	4680      	mov	r8, r0
 801448e:	460c      	mov	r4, r1
 8014490:	469a      	mov	sl, r3
 8014492:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014496:	d807      	bhi.n	80144a8 <_printf_i+0x28>
 8014498:	2f62      	cmp	r7, #98	@ 0x62
 801449a:	d80a      	bhi.n	80144b2 <_printf_i+0x32>
 801449c:	2f00      	cmp	r7, #0
 801449e:	f000 80d1 	beq.w	8014644 <_printf_i+0x1c4>
 80144a2:	2f58      	cmp	r7, #88	@ 0x58
 80144a4:	f000 80b8 	beq.w	8014618 <_printf_i+0x198>
 80144a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80144ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80144b0:	e03a      	b.n	8014528 <_printf_i+0xa8>
 80144b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80144b6:	2b15      	cmp	r3, #21
 80144b8:	d8f6      	bhi.n	80144a8 <_printf_i+0x28>
 80144ba:	a101      	add	r1, pc, #4	@ (adr r1, 80144c0 <_printf_i+0x40>)
 80144bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80144c0:	08014519 	.word	0x08014519
 80144c4:	0801452d 	.word	0x0801452d
 80144c8:	080144a9 	.word	0x080144a9
 80144cc:	080144a9 	.word	0x080144a9
 80144d0:	080144a9 	.word	0x080144a9
 80144d4:	080144a9 	.word	0x080144a9
 80144d8:	0801452d 	.word	0x0801452d
 80144dc:	080144a9 	.word	0x080144a9
 80144e0:	080144a9 	.word	0x080144a9
 80144e4:	080144a9 	.word	0x080144a9
 80144e8:	080144a9 	.word	0x080144a9
 80144ec:	0801462b 	.word	0x0801462b
 80144f0:	08014557 	.word	0x08014557
 80144f4:	080145e5 	.word	0x080145e5
 80144f8:	080144a9 	.word	0x080144a9
 80144fc:	080144a9 	.word	0x080144a9
 8014500:	0801464d 	.word	0x0801464d
 8014504:	080144a9 	.word	0x080144a9
 8014508:	08014557 	.word	0x08014557
 801450c:	080144a9 	.word	0x080144a9
 8014510:	080144a9 	.word	0x080144a9
 8014514:	080145ed 	.word	0x080145ed
 8014518:	6833      	ldr	r3, [r6, #0]
 801451a:	1d1a      	adds	r2, r3, #4
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	6032      	str	r2, [r6, #0]
 8014520:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014524:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014528:	2301      	movs	r3, #1
 801452a:	e09c      	b.n	8014666 <_printf_i+0x1e6>
 801452c:	6833      	ldr	r3, [r6, #0]
 801452e:	6820      	ldr	r0, [r4, #0]
 8014530:	1d19      	adds	r1, r3, #4
 8014532:	6031      	str	r1, [r6, #0]
 8014534:	0606      	lsls	r6, r0, #24
 8014536:	d501      	bpl.n	801453c <_printf_i+0xbc>
 8014538:	681d      	ldr	r5, [r3, #0]
 801453a:	e003      	b.n	8014544 <_printf_i+0xc4>
 801453c:	0645      	lsls	r5, r0, #25
 801453e:	d5fb      	bpl.n	8014538 <_printf_i+0xb8>
 8014540:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014544:	2d00      	cmp	r5, #0
 8014546:	da03      	bge.n	8014550 <_printf_i+0xd0>
 8014548:	232d      	movs	r3, #45	@ 0x2d
 801454a:	426d      	negs	r5, r5
 801454c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014550:	4858      	ldr	r0, [pc, #352]	@ (80146b4 <_printf_i+0x234>)
 8014552:	230a      	movs	r3, #10
 8014554:	e011      	b.n	801457a <_printf_i+0xfa>
 8014556:	6821      	ldr	r1, [r4, #0]
 8014558:	6833      	ldr	r3, [r6, #0]
 801455a:	0608      	lsls	r0, r1, #24
 801455c:	f853 5b04 	ldr.w	r5, [r3], #4
 8014560:	d402      	bmi.n	8014568 <_printf_i+0xe8>
 8014562:	0649      	lsls	r1, r1, #25
 8014564:	bf48      	it	mi
 8014566:	b2ad      	uxthmi	r5, r5
 8014568:	2f6f      	cmp	r7, #111	@ 0x6f
 801456a:	4852      	ldr	r0, [pc, #328]	@ (80146b4 <_printf_i+0x234>)
 801456c:	6033      	str	r3, [r6, #0]
 801456e:	bf14      	ite	ne
 8014570:	230a      	movne	r3, #10
 8014572:	2308      	moveq	r3, #8
 8014574:	2100      	movs	r1, #0
 8014576:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801457a:	6866      	ldr	r6, [r4, #4]
 801457c:	60a6      	str	r6, [r4, #8]
 801457e:	2e00      	cmp	r6, #0
 8014580:	db05      	blt.n	801458e <_printf_i+0x10e>
 8014582:	6821      	ldr	r1, [r4, #0]
 8014584:	432e      	orrs	r6, r5
 8014586:	f021 0104 	bic.w	r1, r1, #4
 801458a:	6021      	str	r1, [r4, #0]
 801458c:	d04b      	beq.n	8014626 <_printf_i+0x1a6>
 801458e:	4616      	mov	r6, r2
 8014590:	fbb5 f1f3 	udiv	r1, r5, r3
 8014594:	fb03 5711 	mls	r7, r3, r1, r5
 8014598:	5dc7      	ldrb	r7, [r0, r7]
 801459a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801459e:	462f      	mov	r7, r5
 80145a0:	42bb      	cmp	r3, r7
 80145a2:	460d      	mov	r5, r1
 80145a4:	d9f4      	bls.n	8014590 <_printf_i+0x110>
 80145a6:	2b08      	cmp	r3, #8
 80145a8:	d10b      	bne.n	80145c2 <_printf_i+0x142>
 80145aa:	6823      	ldr	r3, [r4, #0]
 80145ac:	07df      	lsls	r7, r3, #31
 80145ae:	d508      	bpl.n	80145c2 <_printf_i+0x142>
 80145b0:	6923      	ldr	r3, [r4, #16]
 80145b2:	6861      	ldr	r1, [r4, #4]
 80145b4:	4299      	cmp	r1, r3
 80145b6:	bfde      	ittt	le
 80145b8:	2330      	movle	r3, #48	@ 0x30
 80145ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80145be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80145c2:	1b92      	subs	r2, r2, r6
 80145c4:	6122      	str	r2, [r4, #16]
 80145c6:	f8cd a000 	str.w	sl, [sp]
 80145ca:	464b      	mov	r3, r9
 80145cc:	aa03      	add	r2, sp, #12
 80145ce:	4621      	mov	r1, r4
 80145d0:	4640      	mov	r0, r8
 80145d2:	f7ff fee7 	bl	80143a4 <_printf_common>
 80145d6:	3001      	adds	r0, #1
 80145d8:	d14a      	bne.n	8014670 <_printf_i+0x1f0>
 80145da:	f04f 30ff 	mov.w	r0, #4294967295
 80145de:	b004      	add	sp, #16
 80145e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145e4:	6823      	ldr	r3, [r4, #0]
 80145e6:	f043 0320 	orr.w	r3, r3, #32
 80145ea:	6023      	str	r3, [r4, #0]
 80145ec:	4832      	ldr	r0, [pc, #200]	@ (80146b8 <_printf_i+0x238>)
 80145ee:	2778      	movs	r7, #120	@ 0x78
 80145f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80145f4:	6823      	ldr	r3, [r4, #0]
 80145f6:	6831      	ldr	r1, [r6, #0]
 80145f8:	061f      	lsls	r7, r3, #24
 80145fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80145fe:	d402      	bmi.n	8014606 <_printf_i+0x186>
 8014600:	065f      	lsls	r7, r3, #25
 8014602:	bf48      	it	mi
 8014604:	b2ad      	uxthmi	r5, r5
 8014606:	6031      	str	r1, [r6, #0]
 8014608:	07d9      	lsls	r1, r3, #31
 801460a:	bf44      	itt	mi
 801460c:	f043 0320 	orrmi.w	r3, r3, #32
 8014610:	6023      	strmi	r3, [r4, #0]
 8014612:	b11d      	cbz	r5, 801461c <_printf_i+0x19c>
 8014614:	2310      	movs	r3, #16
 8014616:	e7ad      	b.n	8014574 <_printf_i+0xf4>
 8014618:	4826      	ldr	r0, [pc, #152]	@ (80146b4 <_printf_i+0x234>)
 801461a:	e7e9      	b.n	80145f0 <_printf_i+0x170>
 801461c:	6823      	ldr	r3, [r4, #0]
 801461e:	f023 0320 	bic.w	r3, r3, #32
 8014622:	6023      	str	r3, [r4, #0]
 8014624:	e7f6      	b.n	8014614 <_printf_i+0x194>
 8014626:	4616      	mov	r6, r2
 8014628:	e7bd      	b.n	80145a6 <_printf_i+0x126>
 801462a:	6833      	ldr	r3, [r6, #0]
 801462c:	6825      	ldr	r5, [r4, #0]
 801462e:	6961      	ldr	r1, [r4, #20]
 8014630:	1d18      	adds	r0, r3, #4
 8014632:	6030      	str	r0, [r6, #0]
 8014634:	062e      	lsls	r6, r5, #24
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	d501      	bpl.n	801463e <_printf_i+0x1be>
 801463a:	6019      	str	r1, [r3, #0]
 801463c:	e002      	b.n	8014644 <_printf_i+0x1c4>
 801463e:	0668      	lsls	r0, r5, #25
 8014640:	d5fb      	bpl.n	801463a <_printf_i+0x1ba>
 8014642:	8019      	strh	r1, [r3, #0]
 8014644:	2300      	movs	r3, #0
 8014646:	6123      	str	r3, [r4, #16]
 8014648:	4616      	mov	r6, r2
 801464a:	e7bc      	b.n	80145c6 <_printf_i+0x146>
 801464c:	6833      	ldr	r3, [r6, #0]
 801464e:	1d1a      	adds	r2, r3, #4
 8014650:	6032      	str	r2, [r6, #0]
 8014652:	681e      	ldr	r6, [r3, #0]
 8014654:	6862      	ldr	r2, [r4, #4]
 8014656:	2100      	movs	r1, #0
 8014658:	4630      	mov	r0, r6
 801465a:	f7fb fdc1 	bl	80101e0 <memchr>
 801465e:	b108      	cbz	r0, 8014664 <_printf_i+0x1e4>
 8014660:	1b80      	subs	r0, r0, r6
 8014662:	6060      	str	r0, [r4, #4]
 8014664:	6863      	ldr	r3, [r4, #4]
 8014666:	6123      	str	r3, [r4, #16]
 8014668:	2300      	movs	r3, #0
 801466a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801466e:	e7aa      	b.n	80145c6 <_printf_i+0x146>
 8014670:	6923      	ldr	r3, [r4, #16]
 8014672:	4632      	mov	r2, r6
 8014674:	4649      	mov	r1, r9
 8014676:	4640      	mov	r0, r8
 8014678:	47d0      	blx	sl
 801467a:	3001      	adds	r0, #1
 801467c:	d0ad      	beq.n	80145da <_printf_i+0x15a>
 801467e:	6823      	ldr	r3, [r4, #0]
 8014680:	079b      	lsls	r3, r3, #30
 8014682:	d413      	bmi.n	80146ac <_printf_i+0x22c>
 8014684:	68e0      	ldr	r0, [r4, #12]
 8014686:	9b03      	ldr	r3, [sp, #12]
 8014688:	4298      	cmp	r0, r3
 801468a:	bfb8      	it	lt
 801468c:	4618      	movlt	r0, r3
 801468e:	e7a6      	b.n	80145de <_printf_i+0x15e>
 8014690:	2301      	movs	r3, #1
 8014692:	4632      	mov	r2, r6
 8014694:	4649      	mov	r1, r9
 8014696:	4640      	mov	r0, r8
 8014698:	47d0      	blx	sl
 801469a:	3001      	adds	r0, #1
 801469c:	d09d      	beq.n	80145da <_printf_i+0x15a>
 801469e:	3501      	adds	r5, #1
 80146a0:	68e3      	ldr	r3, [r4, #12]
 80146a2:	9903      	ldr	r1, [sp, #12]
 80146a4:	1a5b      	subs	r3, r3, r1
 80146a6:	42ab      	cmp	r3, r5
 80146a8:	dcf2      	bgt.n	8014690 <_printf_i+0x210>
 80146aa:	e7eb      	b.n	8014684 <_printf_i+0x204>
 80146ac:	2500      	movs	r5, #0
 80146ae:	f104 0619 	add.w	r6, r4, #25
 80146b2:	e7f5      	b.n	80146a0 <_printf_i+0x220>
 80146b4:	08018522 	.word	0x08018522
 80146b8:	08018533 	.word	0x08018533

080146bc <_scanf_float>:
 80146bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146c0:	b087      	sub	sp, #28
 80146c2:	4691      	mov	r9, r2
 80146c4:	9303      	str	r3, [sp, #12]
 80146c6:	688b      	ldr	r3, [r1, #8]
 80146c8:	1e5a      	subs	r2, r3, #1
 80146ca:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80146ce:	bf81      	itttt	hi
 80146d0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80146d4:	eb03 0b05 	addhi.w	fp, r3, r5
 80146d8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80146dc:	608b      	strhi	r3, [r1, #8]
 80146de:	680b      	ldr	r3, [r1, #0]
 80146e0:	460a      	mov	r2, r1
 80146e2:	f04f 0500 	mov.w	r5, #0
 80146e6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80146ea:	f842 3b1c 	str.w	r3, [r2], #28
 80146ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80146f2:	4680      	mov	r8, r0
 80146f4:	460c      	mov	r4, r1
 80146f6:	bf98      	it	ls
 80146f8:	f04f 0b00 	movls.w	fp, #0
 80146fc:	9201      	str	r2, [sp, #4]
 80146fe:	4616      	mov	r6, r2
 8014700:	46aa      	mov	sl, r5
 8014702:	462f      	mov	r7, r5
 8014704:	9502      	str	r5, [sp, #8]
 8014706:	68a2      	ldr	r2, [r4, #8]
 8014708:	b15a      	cbz	r2, 8014722 <_scanf_float+0x66>
 801470a:	f8d9 3000 	ldr.w	r3, [r9]
 801470e:	781b      	ldrb	r3, [r3, #0]
 8014710:	2b4e      	cmp	r3, #78	@ 0x4e
 8014712:	d863      	bhi.n	80147dc <_scanf_float+0x120>
 8014714:	2b40      	cmp	r3, #64	@ 0x40
 8014716:	d83b      	bhi.n	8014790 <_scanf_float+0xd4>
 8014718:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801471c:	b2c8      	uxtb	r0, r1
 801471e:	280e      	cmp	r0, #14
 8014720:	d939      	bls.n	8014796 <_scanf_float+0xda>
 8014722:	b11f      	cbz	r7, 801472c <_scanf_float+0x70>
 8014724:	6823      	ldr	r3, [r4, #0]
 8014726:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801472a:	6023      	str	r3, [r4, #0]
 801472c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014730:	f1ba 0f01 	cmp.w	sl, #1
 8014734:	f200 8114 	bhi.w	8014960 <_scanf_float+0x2a4>
 8014738:	9b01      	ldr	r3, [sp, #4]
 801473a:	429e      	cmp	r6, r3
 801473c:	f200 8105 	bhi.w	801494a <_scanf_float+0x28e>
 8014740:	2001      	movs	r0, #1
 8014742:	b007      	add	sp, #28
 8014744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014748:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801474c:	2a0d      	cmp	r2, #13
 801474e:	d8e8      	bhi.n	8014722 <_scanf_float+0x66>
 8014750:	a101      	add	r1, pc, #4	@ (adr r1, 8014758 <_scanf_float+0x9c>)
 8014752:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014756:	bf00      	nop
 8014758:	080148a1 	.word	0x080148a1
 801475c:	08014723 	.word	0x08014723
 8014760:	08014723 	.word	0x08014723
 8014764:	08014723 	.word	0x08014723
 8014768:	080148fd 	.word	0x080148fd
 801476c:	080148d7 	.word	0x080148d7
 8014770:	08014723 	.word	0x08014723
 8014774:	08014723 	.word	0x08014723
 8014778:	080148af 	.word	0x080148af
 801477c:	08014723 	.word	0x08014723
 8014780:	08014723 	.word	0x08014723
 8014784:	08014723 	.word	0x08014723
 8014788:	08014723 	.word	0x08014723
 801478c:	0801486b 	.word	0x0801486b
 8014790:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8014794:	e7da      	b.n	801474c <_scanf_float+0x90>
 8014796:	290e      	cmp	r1, #14
 8014798:	d8c3      	bhi.n	8014722 <_scanf_float+0x66>
 801479a:	a001      	add	r0, pc, #4	@ (adr r0, 80147a0 <_scanf_float+0xe4>)
 801479c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80147a0:	0801485b 	.word	0x0801485b
 80147a4:	08014723 	.word	0x08014723
 80147a8:	0801485b 	.word	0x0801485b
 80147ac:	080148eb 	.word	0x080148eb
 80147b0:	08014723 	.word	0x08014723
 80147b4:	080147fd 	.word	0x080147fd
 80147b8:	08014841 	.word	0x08014841
 80147bc:	08014841 	.word	0x08014841
 80147c0:	08014841 	.word	0x08014841
 80147c4:	08014841 	.word	0x08014841
 80147c8:	08014841 	.word	0x08014841
 80147cc:	08014841 	.word	0x08014841
 80147d0:	08014841 	.word	0x08014841
 80147d4:	08014841 	.word	0x08014841
 80147d8:	08014841 	.word	0x08014841
 80147dc:	2b6e      	cmp	r3, #110	@ 0x6e
 80147de:	d809      	bhi.n	80147f4 <_scanf_float+0x138>
 80147e0:	2b60      	cmp	r3, #96	@ 0x60
 80147e2:	d8b1      	bhi.n	8014748 <_scanf_float+0x8c>
 80147e4:	2b54      	cmp	r3, #84	@ 0x54
 80147e6:	d07b      	beq.n	80148e0 <_scanf_float+0x224>
 80147e8:	2b59      	cmp	r3, #89	@ 0x59
 80147ea:	d19a      	bne.n	8014722 <_scanf_float+0x66>
 80147ec:	2d07      	cmp	r5, #7
 80147ee:	d198      	bne.n	8014722 <_scanf_float+0x66>
 80147f0:	2508      	movs	r5, #8
 80147f2:	e02f      	b.n	8014854 <_scanf_float+0x198>
 80147f4:	2b74      	cmp	r3, #116	@ 0x74
 80147f6:	d073      	beq.n	80148e0 <_scanf_float+0x224>
 80147f8:	2b79      	cmp	r3, #121	@ 0x79
 80147fa:	e7f6      	b.n	80147ea <_scanf_float+0x12e>
 80147fc:	6821      	ldr	r1, [r4, #0]
 80147fe:	05c8      	lsls	r0, r1, #23
 8014800:	d51e      	bpl.n	8014840 <_scanf_float+0x184>
 8014802:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8014806:	6021      	str	r1, [r4, #0]
 8014808:	3701      	adds	r7, #1
 801480a:	f1bb 0f00 	cmp.w	fp, #0
 801480e:	d003      	beq.n	8014818 <_scanf_float+0x15c>
 8014810:	3201      	adds	r2, #1
 8014812:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014816:	60a2      	str	r2, [r4, #8]
 8014818:	68a3      	ldr	r3, [r4, #8]
 801481a:	3b01      	subs	r3, #1
 801481c:	60a3      	str	r3, [r4, #8]
 801481e:	6923      	ldr	r3, [r4, #16]
 8014820:	3301      	adds	r3, #1
 8014822:	6123      	str	r3, [r4, #16]
 8014824:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014828:	3b01      	subs	r3, #1
 801482a:	2b00      	cmp	r3, #0
 801482c:	f8c9 3004 	str.w	r3, [r9, #4]
 8014830:	f340 8082 	ble.w	8014938 <_scanf_float+0x27c>
 8014834:	f8d9 3000 	ldr.w	r3, [r9]
 8014838:	3301      	adds	r3, #1
 801483a:	f8c9 3000 	str.w	r3, [r9]
 801483e:	e762      	b.n	8014706 <_scanf_float+0x4a>
 8014840:	eb1a 0105 	adds.w	r1, sl, r5
 8014844:	f47f af6d 	bne.w	8014722 <_scanf_float+0x66>
 8014848:	6822      	ldr	r2, [r4, #0]
 801484a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801484e:	6022      	str	r2, [r4, #0]
 8014850:	460d      	mov	r5, r1
 8014852:	468a      	mov	sl, r1
 8014854:	f806 3b01 	strb.w	r3, [r6], #1
 8014858:	e7de      	b.n	8014818 <_scanf_float+0x15c>
 801485a:	6822      	ldr	r2, [r4, #0]
 801485c:	0610      	lsls	r0, r2, #24
 801485e:	f57f af60 	bpl.w	8014722 <_scanf_float+0x66>
 8014862:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8014866:	6022      	str	r2, [r4, #0]
 8014868:	e7f4      	b.n	8014854 <_scanf_float+0x198>
 801486a:	f1ba 0f00 	cmp.w	sl, #0
 801486e:	d10c      	bne.n	801488a <_scanf_float+0x1ce>
 8014870:	b977      	cbnz	r7, 8014890 <_scanf_float+0x1d4>
 8014872:	6822      	ldr	r2, [r4, #0]
 8014874:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014878:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801487c:	d108      	bne.n	8014890 <_scanf_float+0x1d4>
 801487e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014882:	6022      	str	r2, [r4, #0]
 8014884:	f04f 0a01 	mov.w	sl, #1
 8014888:	e7e4      	b.n	8014854 <_scanf_float+0x198>
 801488a:	f1ba 0f02 	cmp.w	sl, #2
 801488e:	d050      	beq.n	8014932 <_scanf_float+0x276>
 8014890:	2d01      	cmp	r5, #1
 8014892:	d002      	beq.n	801489a <_scanf_float+0x1de>
 8014894:	2d04      	cmp	r5, #4
 8014896:	f47f af44 	bne.w	8014722 <_scanf_float+0x66>
 801489a:	3501      	adds	r5, #1
 801489c:	b2ed      	uxtb	r5, r5
 801489e:	e7d9      	b.n	8014854 <_scanf_float+0x198>
 80148a0:	f1ba 0f01 	cmp.w	sl, #1
 80148a4:	f47f af3d 	bne.w	8014722 <_scanf_float+0x66>
 80148a8:	f04f 0a02 	mov.w	sl, #2
 80148ac:	e7d2      	b.n	8014854 <_scanf_float+0x198>
 80148ae:	b975      	cbnz	r5, 80148ce <_scanf_float+0x212>
 80148b0:	2f00      	cmp	r7, #0
 80148b2:	f47f af37 	bne.w	8014724 <_scanf_float+0x68>
 80148b6:	6822      	ldr	r2, [r4, #0]
 80148b8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80148bc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80148c0:	f040 8103 	bne.w	8014aca <_scanf_float+0x40e>
 80148c4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80148c8:	6022      	str	r2, [r4, #0]
 80148ca:	2501      	movs	r5, #1
 80148cc:	e7c2      	b.n	8014854 <_scanf_float+0x198>
 80148ce:	2d03      	cmp	r5, #3
 80148d0:	d0e3      	beq.n	801489a <_scanf_float+0x1de>
 80148d2:	2d05      	cmp	r5, #5
 80148d4:	e7df      	b.n	8014896 <_scanf_float+0x1da>
 80148d6:	2d02      	cmp	r5, #2
 80148d8:	f47f af23 	bne.w	8014722 <_scanf_float+0x66>
 80148dc:	2503      	movs	r5, #3
 80148de:	e7b9      	b.n	8014854 <_scanf_float+0x198>
 80148e0:	2d06      	cmp	r5, #6
 80148e2:	f47f af1e 	bne.w	8014722 <_scanf_float+0x66>
 80148e6:	2507      	movs	r5, #7
 80148e8:	e7b4      	b.n	8014854 <_scanf_float+0x198>
 80148ea:	6822      	ldr	r2, [r4, #0]
 80148ec:	0591      	lsls	r1, r2, #22
 80148ee:	f57f af18 	bpl.w	8014722 <_scanf_float+0x66>
 80148f2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80148f6:	6022      	str	r2, [r4, #0]
 80148f8:	9702      	str	r7, [sp, #8]
 80148fa:	e7ab      	b.n	8014854 <_scanf_float+0x198>
 80148fc:	6822      	ldr	r2, [r4, #0]
 80148fe:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8014902:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8014906:	d005      	beq.n	8014914 <_scanf_float+0x258>
 8014908:	0550      	lsls	r0, r2, #21
 801490a:	f57f af0a 	bpl.w	8014722 <_scanf_float+0x66>
 801490e:	2f00      	cmp	r7, #0
 8014910:	f000 80db 	beq.w	8014aca <_scanf_float+0x40e>
 8014914:	0591      	lsls	r1, r2, #22
 8014916:	bf58      	it	pl
 8014918:	9902      	ldrpl	r1, [sp, #8]
 801491a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801491e:	bf58      	it	pl
 8014920:	1a79      	subpl	r1, r7, r1
 8014922:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8014926:	bf58      	it	pl
 8014928:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801492c:	6022      	str	r2, [r4, #0]
 801492e:	2700      	movs	r7, #0
 8014930:	e790      	b.n	8014854 <_scanf_float+0x198>
 8014932:	f04f 0a03 	mov.w	sl, #3
 8014936:	e78d      	b.n	8014854 <_scanf_float+0x198>
 8014938:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801493c:	4649      	mov	r1, r9
 801493e:	4640      	mov	r0, r8
 8014940:	4798      	blx	r3
 8014942:	2800      	cmp	r0, #0
 8014944:	f43f aedf 	beq.w	8014706 <_scanf_float+0x4a>
 8014948:	e6eb      	b.n	8014722 <_scanf_float+0x66>
 801494a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801494e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014952:	464a      	mov	r2, r9
 8014954:	4640      	mov	r0, r8
 8014956:	4798      	blx	r3
 8014958:	6923      	ldr	r3, [r4, #16]
 801495a:	3b01      	subs	r3, #1
 801495c:	6123      	str	r3, [r4, #16]
 801495e:	e6eb      	b.n	8014738 <_scanf_float+0x7c>
 8014960:	1e6b      	subs	r3, r5, #1
 8014962:	2b06      	cmp	r3, #6
 8014964:	d824      	bhi.n	80149b0 <_scanf_float+0x2f4>
 8014966:	2d02      	cmp	r5, #2
 8014968:	d836      	bhi.n	80149d8 <_scanf_float+0x31c>
 801496a:	9b01      	ldr	r3, [sp, #4]
 801496c:	429e      	cmp	r6, r3
 801496e:	f67f aee7 	bls.w	8014740 <_scanf_float+0x84>
 8014972:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014976:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801497a:	464a      	mov	r2, r9
 801497c:	4640      	mov	r0, r8
 801497e:	4798      	blx	r3
 8014980:	6923      	ldr	r3, [r4, #16]
 8014982:	3b01      	subs	r3, #1
 8014984:	6123      	str	r3, [r4, #16]
 8014986:	e7f0      	b.n	801496a <_scanf_float+0x2ae>
 8014988:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801498c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8014990:	464a      	mov	r2, r9
 8014992:	4640      	mov	r0, r8
 8014994:	4798      	blx	r3
 8014996:	6923      	ldr	r3, [r4, #16]
 8014998:	3b01      	subs	r3, #1
 801499a:	6123      	str	r3, [r4, #16]
 801499c:	f10a 3aff 	add.w	sl, sl, #4294967295
 80149a0:	fa5f fa8a 	uxtb.w	sl, sl
 80149a4:	f1ba 0f02 	cmp.w	sl, #2
 80149a8:	d1ee      	bne.n	8014988 <_scanf_float+0x2cc>
 80149aa:	3d03      	subs	r5, #3
 80149ac:	b2ed      	uxtb	r5, r5
 80149ae:	1b76      	subs	r6, r6, r5
 80149b0:	6823      	ldr	r3, [r4, #0]
 80149b2:	05da      	lsls	r2, r3, #23
 80149b4:	d530      	bpl.n	8014a18 <_scanf_float+0x35c>
 80149b6:	055b      	lsls	r3, r3, #21
 80149b8:	d511      	bpl.n	80149de <_scanf_float+0x322>
 80149ba:	9b01      	ldr	r3, [sp, #4]
 80149bc:	429e      	cmp	r6, r3
 80149be:	f67f aebf 	bls.w	8014740 <_scanf_float+0x84>
 80149c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80149c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80149ca:	464a      	mov	r2, r9
 80149cc:	4640      	mov	r0, r8
 80149ce:	4798      	blx	r3
 80149d0:	6923      	ldr	r3, [r4, #16]
 80149d2:	3b01      	subs	r3, #1
 80149d4:	6123      	str	r3, [r4, #16]
 80149d6:	e7f0      	b.n	80149ba <_scanf_float+0x2fe>
 80149d8:	46aa      	mov	sl, r5
 80149da:	46b3      	mov	fp, r6
 80149dc:	e7de      	b.n	801499c <_scanf_float+0x2e0>
 80149de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80149e2:	6923      	ldr	r3, [r4, #16]
 80149e4:	2965      	cmp	r1, #101	@ 0x65
 80149e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80149ea:	f106 35ff 	add.w	r5, r6, #4294967295
 80149ee:	6123      	str	r3, [r4, #16]
 80149f0:	d00c      	beq.n	8014a0c <_scanf_float+0x350>
 80149f2:	2945      	cmp	r1, #69	@ 0x45
 80149f4:	d00a      	beq.n	8014a0c <_scanf_float+0x350>
 80149f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80149fa:	464a      	mov	r2, r9
 80149fc:	4640      	mov	r0, r8
 80149fe:	4798      	blx	r3
 8014a00:	6923      	ldr	r3, [r4, #16]
 8014a02:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8014a06:	3b01      	subs	r3, #1
 8014a08:	1eb5      	subs	r5, r6, #2
 8014a0a:	6123      	str	r3, [r4, #16]
 8014a0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014a10:	464a      	mov	r2, r9
 8014a12:	4640      	mov	r0, r8
 8014a14:	4798      	blx	r3
 8014a16:	462e      	mov	r6, r5
 8014a18:	6822      	ldr	r2, [r4, #0]
 8014a1a:	f012 0210 	ands.w	r2, r2, #16
 8014a1e:	d001      	beq.n	8014a24 <_scanf_float+0x368>
 8014a20:	2000      	movs	r0, #0
 8014a22:	e68e      	b.n	8014742 <_scanf_float+0x86>
 8014a24:	7032      	strb	r2, [r6, #0]
 8014a26:	6823      	ldr	r3, [r4, #0]
 8014a28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8014a2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014a30:	d125      	bne.n	8014a7e <_scanf_float+0x3c2>
 8014a32:	9b02      	ldr	r3, [sp, #8]
 8014a34:	429f      	cmp	r7, r3
 8014a36:	d00a      	beq.n	8014a4e <_scanf_float+0x392>
 8014a38:	1bda      	subs	r2, r3, r7
 8014a3a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8014a3e:	429e      	cmp	r6, r3
 8014a40:	bf28      	it	cs
 8014a42:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8014a46:	4922      	ldr	r1, [pc, #136]	@ (8014ad0 <_scanf_float+0x414>)
 8014a48:	4630      	mov	r0, r6
 8014a4a:	f000 f907 	bl	8014c5c <siprintf>
 8014a4e:	9901      	ldr	r1, [sp, #4]
 8014a50:	2200      	movs	r2, #0
 8014a52:	4640      	mov	r0, r8
 8014a54:	f002 fbf4 	bl	8017240 <_strtod_r>
 8014a58:	9b03      	ldr	r3, [sp, #12]
 8014a5a:	6821      	ldr	r1, [r4, #0]
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	f011 0f02 	tst.w	r1, #2
 8014a62:	ec57 6b10 	vmov	r6, r7, d0
 8014a66:	f103 0204 	add.w	r2, r3, #4
 8014a6a:	d015      	beq.n	8014a98 <_scanf_float+0x3dc>
 8014a6c:	9903      	ldr	r1, [sp, #12]
 8014a6e:	600a      	str	r2, [r1, #0]
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	e9c3 6700 	strd	r6, r7, [r3]
 8014a76:	68e3      	ldr	r3, [r4, #12]
 8014a78:	3301      	adds	r3, #1
 8014a7a:	60e3      	str	r3, [r4, #12]
 8014a7c:	e7d0      	b.n	8014a20 <_scanf_float+0x364>
 8014a7e:	9b04      	ldr	r3, [sp, #16]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d0e4      	beq.n	8014a4e <_scanf_float+0x392>
 8014a84:	9905      	ldr	r1, [sp, #20]
 8014a86:	230a      	movs	r3, #10
 8014a88:	3101      	adds	r1, #1
 8014a8a:	4640      	mov	r0, r8
 8014a8c:	f002 fc58 	bl	8017340 <_strtol_r>
 8014a90:	9b04      	ldr	r3, [sp, #16]
 8014a92:	9e05      	ldr	r6, [sp, #20]
 8014a94:	1ac2      	subs	r2, r0, r3
 8014a96:	e7d0      	b.n	8014a3a <_scanf_float+0x37e>
 8014a98:	f011 0f04 	tst.w	r1, #4
 8014a9c:	9903      	ldr	r1, [sp, #12]
 8014a9e:	600a      	str	r2, [r1, #0]
 8014aa0:	d1e6      	bne.n	8014a70 <_scanf_float+0x3b4>
 8014aa2:	681d      	ldr	r5, [r3, #0]
 8014aa4:	4632      	mov	r2, r6
 8014aa6:	463b      	mov	r3, r7
 8014aa8:	4630      	mov	r0, r6
 8014aaa:	4639      	mov	r1, r7
 8014aac:	f7fc f846 	bl	8010b3c <__aeabi_dcmpun>
 8014ab0:	b128      	cbz	r0, 8014abe <_scanf_float+0x402>
 8014ab2:	4808      	ldr	r0, [pc, #32]	@ (8014ad4 <_scanf_float+0x418>)
 8014ab4:	f000 f9b8 	bl	8014e28 <nanf>
 8014ab8:	ed85 0a00 	vstr	s0, [r5]
 8014abc:	e7db      	b.n	8014a76 <_scanf_float+0x3ba>
 8014abe:	4630      	mov	r0, r6
 8014ac0:	4639      	mov	r1, r7
 8014ac2:	f7fc f899 	bl	8010bf8 <__aeabi_d2f>
 8014ac6:	6028      	str	r0, [r5, #0]
 8014ac8:	e7d5      	b.n	8014a76 <_scanf_float+0x3ba>
 8014aca:	2700      	movs	r7, #0
 8014acc:	e62e      	b.n	801472c <_scanf_float+0x70>
 8014ace:	bf00      	nop
 8014ad0:	08018544 	.word	0x08018544
 8014ad4:	08018685 	.word	0x08018685

08014ad8 <std>:
 8014ad8:	2300      	movs	r3, #0
 8014ada:	b510      	push	{r4, lr}
 8014adc:	4604      	mov	r4, r0
 8014ade:	e9c0 3300 	strd	r3, r3, [r0]
 8014ae2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014ae6:	6083      	str	r3, [r0, #8]
 8014ae8:	8181      	strh	r1, [r0, #12]
 8014aea:	6643      	str	r3, [r0, #100]	@ 0x64
 8014aec:	81c2      	strh	r2, [r0, #14]
 8014aee:	6183      	str	r3, [r0, #24]
 8014af0:	4619      	mov	r1, r3
 8014af2:	2208      	movs	r2, #8
 8014af4:	305c      	adds	r0, #92	@ 0x5c
 8014af6:	f000 f916 	bl	8014d26 <memset>
 8014afa:	4b0d      	ldr	r3, [pc, #52]	@ (8014b30 <std+0x58>)
 8014afc:	6263      	str	r3, [r4, #36]	@ 0x24
 8014afe:	4b0d      	ldr	r3, [pc, #52]	@ (8014b34 <std+0x5c>)
 8014b00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014b02:	4b0d      	ldr	r3, [pc, #52]	@ (8014b38 <std+0x60>)
 8014b04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014b06:	4b0d      	ldr	r3, [pc, #52]	@ (8014b3c <std+0x64>)
 8014b08:	6323      	str	r3, [r4, #48]	@ 0x30
 8014b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8014b40 <std+0x68>)
 8014b0c:	6224      	str	r4, [r4, #32]
 8014b0e:	429c      	cmp	r4, r3
 8014b10:	d006      	beq.n	8014b20 <std+0x48>
 8014b12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014b16:	4294      	cmp	r4, r2
 8014b18:	d002      	beq.n	8014b20 <std+0x48>
 8014b1a:	33d0      	adds	r3, #208	@ 0xd0
 8014b1c:	429c      	cmp	r4, r3
 8014b1e:	d105      	bne.n	8014b2c <std+0x54>
 8014b20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b28:	f000 b97a 	b.w	8014e20 <__retarget_lock_init_recursive>
 8014b2c:	bd10      	pop	{r4, pc}
 8014b2e:	bf00      	nop
 8014b30:	08014ca1 	.word	0x08014ca1
 8014b34:	08014cc3 	.word	0x08014cc3
 8014b38:	08014cfb 	.word	0x08014cfb
 8014b3c:	08014d1f 	.word	0x08014d1f
 8014b40:	20000294 	.word	0x20000294

08014b44 <stdio_exit_handler>:
 8014b44:	4a02      	ldr	r2, [pc, #8]	@ (8014b50 <stdio_exit_handler+0xc>)
 8014b46:	4903      	ldr	r1, [pc, #12]	@ (8014b54 <stdio_exit_handler+0x10>)
 8014b48:	4803      	ldr	r0, [pc, #12]	@ (8014b58 <stdio_exit_handler+0x14>)
 8014b4a:	f000 b869 	b.w	8014c20 <_fwalk_sglue>
 8014b4e:	bf00      	nop
 8014b50:	2000000c 	.word	0x2000000c
 8014b54:	080176fd 	.word	0x080176fd
 8014b58:	2000001c 	.word	0x2000001c

08014b5c <cleanup_stdio>:
 8014b5c:	6841      	ldr	r1, [r0, #4]
 8014b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8014b90 <cleanup_stdio+0x34>)
 8014b60:	4299      	cmp	r1, r3
 8014b62:	b510      	push	{r4, lr}
 8014b64:	4604      	mov	r4, r0
 8014b66:	d001      	beq.n	8014b6c <cleanup_stdio+0x10>
 8014b68:	f002 fdc8 	bl	80176fc <_fflush_r>
 8014b6c:	68a1      	ldr	r1, [r4, #8]
 8014b6e:	4b09      	ldr	r3, [pc, #36]	@ (8014b94 <cleanup_stdio+0x38>)
 8014b70:	4299      	cmp	r1, r3
 8014b72:	d002      	beq.n	8014b7a <cleanup_stdio+0x1e>
 8014b74:	4620      	mov	r0, r4
 8014b76:	f002 fdc1 	bl	80176fc <_fflush_r>
 8014b7a:	68e1      	ldr	r1, [r4, #12]
 8014b7c:	4b06      	ldr	r3, [pc, #24]	@ (8014b98 <cleanup_stdio+0x3c>)
 8014b7e:	4299      	cmp	r1, r3
 8014b80:	d004      	beq.n	8014b8c <cleanup_stdio+0x30>
 8014b82:	4620      	mov	r0, r4
 8014b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b88:	f002 bdb8 	b.w	80176fc <_fflush_r>
 8014b8c:	bd10      	pop	{r4, pc}
 8014b8e:	bf00      	nop
 8014b90:	20000294 	.word	0x20000294
 8014b94:	200002fc 	.word	0x200002fc
 8014b98:	20000364 	.word	0x20000364

08014b9c <global_stdio_init.part.0>:
 8014b9c:	b510      	push	{r4, lr}
 8014b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8014bcc <global_stdio_init.part.0+0x30>)
 8014ba0:	4c0b      	ldr	r4, [pc, #44]	@ (8014bd0 <global_stdio_init.part.0+0x34>)
 8014ba2:	4a0c      	ldr	r2, [pc, #48]	@ (8014bd4 <global_stdio_init.part.0+0x38>)
 8014ba4:	601a      	str	r2, [r3, #0]
 8014ba6:	4620      	mov	r0, r4
 8014ba8:	2200      	movs	r2, #0
 8014baa:	2104      	movs	r1, #4
 8014bac:	f7ff ff94 	bl	8014ad8 <std>
 8014bb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014bb4:	2201      	movs	r2, #1
 8014bb6:	2109      	movs	r1, #9
 8014bb8:	f7ff ff8e 	bl	8014ad8 <std>
 8014bbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014bc0:	2202      	movs	r2, #2
 8014bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014bc6:	2112      	movs	r1, #18
 8014bc8:	f7ff bf86 	b.w	8014ad8 <std>
 8014bcc:	200003cc 	.word	0x200003cc
 8014bd0:	20000294 	.word	0x20000294
 8014bd4:	08014b45 	.word	0x08014b45

08014bd8 <__sfp_lock_acquire>:
 8014bd8:	4801      	ldr	r0, [pc, #4]	@ (8014be0 <__sfp_lock_acquire+0x8>)
 8014bda:	f000 b922 	b.w	8014e22 <__retarget_lock_acquire_recursive>
 8014bde:	bf00      	nop
 8014be0:	200003d5 	.word	0x200003d5

08014be4 <__sfp_lock_release>:
 8014be4:	4801      	ldr	r0, [pc, #4]	@ (8014bec <__sfp_lock_release+0x8>)
 8014be6:	f000 b91d 	b.w	8014e24 <__retarget_lock_release_recursive>
 8014bea:	bf00      	nop
 8014bec:	200003d5 	.word	0x200003d5

08014bf0 <__sinit>:
 8014bf0:	b510      	push	{r4, lr}
 8014bf2:	4604      	mov	r4, r0
 8014bf4:	f7ff fff0 	bl	8014bd8 <__sfp_lock_acquire>
 8014bf8:	6a23      	ldr	r3, [r4, #32]
 8014bfa:	b11b      	cbz	r3, 8014c04 <__sinit+0x14>
 8014bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c00:	f7ff bff0 	b.w	8014be4 <__sfp_lock_release>
 8014c04:	4b04      	ldr	r3, [pc, #16]	@ (8014c18 <__sinit+0x28>)
 8014c06:	6223      	str	r3, [r4, #32]
 8014c08:	4b04      	ldr	r3, [pc, #16]	@ (8014c1c <__sinit+0x2c>)
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d1f5      	bne.n	8014bfc <__sinit+0xc>
 8014c10:	f7ff ffc4 	bl	8014b9c <global_stdio_init.part.0>
 8014c14:	e7f2      	b.n	8014bfc <__sinit+0xc>
 8014c16:	bf00      	nop
 8014c18:	08014b5d 	.word	0x08014b5d
 8014c1c:	200003cc 	.word	0x200003cc

08014c20 <_fwalk_sglue>:
 8014c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c24:	4607      	mov	r7, r0
 8014c26:	4688      	mov	r8, r1
 8014c28:	4614      	mov	r4, r2
 8014c2a:	2600      	movs	r6, #0
 8014c2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014c30:	f1b9 0901 	subs.w	r9, r9, #1
 8014c34:	d505      	bpl.n	8014c42 <_fwalk_sglue+0x22>
 8014c36:	6824      	ldr	r4, [r4, #0]
 8014c38:	2c00      	cmp	r4, #0
 8014c3a:	d1f7      	bne.n	8014c2c <_fwalk_sglue+0xc>
 8014c3c:	4630      	mov	r0, r6
 8014c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c42:	89ab      	ldrh	r3, [r5, #12]
 8014c44:	2b01      	cmp	r3, #1
 8014c46:	d907      	bls.n	8014c58 <_fwalk_sglue+0x38>
 8014c48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014c4c:	3301      	adds	r3, #1
 8014c4e:	d003      	beq.n	8014c58 <_fwalk_sglue+0x38>
 8014c50:	4629      	mov	r1, r5
 8014c52:	4638      	mov	r0, r7
 8014c54:	47c0      	blx	r8
 8014c56:	4306      	orrs	r6, r0
 8014c58:	3568      	adds	r5, #104	@ 0x68
 8014c5a:	e7e9      	b.n	8014c30 <_fwalk_sglue+0x10>

08014c5c <siprintf>:
 8014c5c:	b40e      	push	{r1, r2, r3}
 8014c5e:	b510      	push	{r4, lr}
 8014c60:	b09d      	sub	sp, #116	@ 0x74
 8014c62:	ab1f      	add	r3, sp, #124	@ 0x7c
 8014c64:	9002      	str	r0, [sp, #8]
 8014c66:	9006      	str	r0, [sp, #24]
 8014c68:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014c6c:	480a      	ldr	r0, [pc, #40]	@ (8014c98 <siprintf+0x3c>)
 8014c6e:	9107      	str	r1, [sp, #28]
 8014c70:	9104      	str	r1, [sp, #16]
 8014c72:	490a      	ldr	r1, [pc, #40]	@ (8014c9c <siprintf+0x40>)
 8014c74:	f853 2b04 	ldr.w	r2, [r3], #4
 8014c78:	9105      	str	r1, [sp, #20]
 8014c7a:	2400      	movs	r4, #0
 8014c7c:	a902      	add	r1, sp, #8
 8014c7e:	6800      	ldr	r0, [r0, #0]
 8014c80:	9301      	str	r3, [sp, #4]
 8014c82:	941b      	str	r4, [sp, #108]	@ 0x6c
 8014c84:	f002 fbba 	bl	80173fc <_svfiprintf_r>
 8014c88:	9b02      	ldr	r3, [sp, #8]
 8014c8a:	701c      	strb	r4, [r3, #0]
 8014c8c:	b01d      	add	sp, #116	@ 0x74
 8014c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c92:	b003      	add	sp, #12
 8014c94:	4770      	bx	lr
 8014c96:	bf00      	nop
 8014c98:	20000018 	.word	0x20000018
 8014c9c:	ffff0208 	.word	0xffff0208

08014ca0 <__sread>:
 8014ca0:	b510      	push	{r4, lr}
 8014ca2:	460c      	mov	r4, r1
 8014ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ca8:	f000 f86c 	bl	8014d84 <_read_r>
 8014cac:	2800      	cmp	r0, #0
 8014cae:	bfab      	itete	ge
 8014cb0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014cb2:	89a3      	ldrhlt	r3, [r4, #12]
 8014cb4:	181b      	addge	r3, r3, r0
 8014cb6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014cba:	bfac      	ite	ge
 8014cbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014cbe:	81a3      	strhlt	r3, [r4, #12]
 8014cc0:	bd10      	pop	{r4, pc}

08014cc2 <__swrite>:
 8014cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cc6:	461f      	mov	r7, r3
 8014cc8:	898b      	ldrh	r3, [r1, #12]
 8014cca:	05db      	lsls	r3, r3, #23
 8014ccc:	4605      	mov	r5, r0
 8014cce:	460c      	mov	r4, r1
 8014cd0:	4616      	mov	r6, r2
 8014cd2:	d505      	bpl.n	8014ce0 <__swrite+0x1e>
 8014cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014cd8:	2302      	movs	r3, #2
 8014cda:	2200      	movs	r2, #0
 8014cdc:	f000 f840 	bl	8014d60 <_lseek_r>
 8014ce0:	89a3      	ldrh	r3, [r4, #12]
 8014ce2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014ce6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014cea:	81a3      	strh	r3, [r4, #12]
 8014cec:	4632      	mov	r2, r6
 8014cee:	463b      	mov	r3, r7
 8014cf0:	4628      	mov	r0, r5
 8014cf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014cf6:	f000 b857 	b.w	8014da8 <_write_r>

08014cfa <__sseek>:
 8014cfa:	b510      	push	{r4, lr}
 8014cfc:	460c      	mov	r4, r1
 8014cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d02:	f000 f82d 	bl	8014d60 <_lseek_r>
 8014d06:	1c43      	adds	r3, r0, #1
 8014d08:	89a3      	ldrh	r3, [r4, #12]
 8014d0a:	bf15      	itete	ne
 8014d0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014d0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014d12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014d16:	81a3      	strheq	r3, [r4, #12]
 8014d18:	bf18      	it	ne
 8014d1a:	81a3      	strhne	r3, [r4, #12]
 8014d1c:	bd10      	pop	{r4, pc}

08014d1e <__sclose>:
 8014d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d22:	f000 b80d 	b.w	8014d40 <_close_r>

08014d26 <memset>:
 8014d26:	4402      	add	r2, r0
 8014d28:	4603      	mov	r3, r0
 8014d2a:	4293      	cmp	r3, r2
 8014d2c:	d100      	bne.n	8014d30 <memset+0xa>
 8014d2e:	4770      	bx	lr
 8014d30:	f803 1b01 	strb.w	r1, [r3], #1
 8014d34:	e7f9      	b.n	8014d2a <memset+0x4>
	...

08014d38 <_localeconv_r>:
 8014d38:	4800      	ldr	r0, [pc, #0]	@ (8014d3c <_localeconv_r+0x4>)
 8014d3a:	4770      	bx	lr
 8014d3c:	20000158 	.word	0x20000158

08014d40 <_close_r>:
 8014d40:	b538      	push	{r3, r4, r5, lr}
 8014d42:	4d06      	ldr	r5, [pc, #24]	@ (8014d5c <_close_r+0x1c>)
 8014d44:	2300      	movs	r3, #0
 8014d46:	4604      	mov	r4, r0
 8014d48:	4608      	mov	r0, r1
 8014d4a:	602b      	str	r3, [r5, #0]
 8014d4c:	f7fc fc95 	bl	801167a <_close>
 8014d50:	1c43      	adds	r3, r0, #1
 8014d52:	d102      	bne.n	8014d5a <_close_r+0x1a>
 8014d54:	682b      	ldr	r3, [r5, #0]
 8014d56:	b103      	cbz	r3, 8014d5a <_close_r+0x1a>
 8014d58:	6023      	str	r3, [r4, #0]
 8014d5a:	bd38      	pop	{r3, r4, r5, pc}
 8014d5c:	200003d0 	.word	0x200003d0

08014d60 <_lseek_r>:
 8014d60:	b538      	push	{r3, r4, r5, lr}
 8014d62:	4d07      	ldr	r5, [pc, #28]	@ (8014d80 <_lseek_r+0x20>)
 8014d64:	4604      	mov	r4, r0
 8014d66:	4608      	mov	r0, r1
 8014d68:	4611      	mov	r1, r2
 8014d6a:	2200      	movs	r2, #0
 8014d6c:	602a      	str	r2, [r5, #0]
 8014d6e:	461a      	mov	r2, r3
 8014d70:	f7fc fcaa 	bl	80116c8 <_lseek>
 8014d74:	1c43      	adds	r3, r0, #1
 8014d76:	d102      	bne.n	8014d7e <_lseek_r+0x1e>
 8014d78:	682b      	ldr	r3, [r5, #0]
 8014d7a:	b103      	cbz	r3, 8014d7e <_lseek_r+0x1e>
 8014d7c:	6023      	str	r3, [r4, #0]
 8014d7e:	bd38      	pop	{r3, r4, r5, pc}
 8014d80:	200003d0 	.word	0x200003d0

08014d84 <_read_r>:
 8014d84:	b538      	push	{r3, r4, r5, lr}
 8014d86:	4d07      	ldr	r5, [pc, #28]	@ (8014da4 <_read_r+0x20>)
 8014d88:	4604      	mov	r4, r0
 8014d8a:	4608      	mov	r0, r1
 8014d8c:	4611      	mov	r1, r2
 8014d8e:	2200      	movs	r2, #0
 8014d90:	602a      	str	r2, [r5, #0]
 8014d92:	461a      	mov	r2, r3
 8014d94:	f7fc fc38 	bl	8011608 <_read>
 8014d98:	1c43      	adds	r3, r0, #1
 8014d9a:	d102      	bne.n	8014da2 <_read_r+0x1e>
 8014d9c:	682b      	ldr	r3, [r5, #0]
 8014d9e:	b103      	cbz	r3, 8014da2 <_read_r+0x1e>
 8014da0:	6023      	str	r3, [r4, #0]
 8014da2:	bd38      	pop	{r3, r4, r5, pc}
 8014da4:	200003d0 	.word	0x200003d0

08014da8 <_write_r>:
 8014da8:	b538      	push	{r3, r4, r5, lr}
 8014daa:	4d07      	ldr	r5, [pc, #28]	@ (8014dc8 <_write_r+0x20>)
 8014dac:	4604      	mov	r4, r0
 8014dae:	4608      	mov	r0, r1
 8014db0:	4611      	mov	r1, r2
 8014db2:	2200      	movs	r2, #0
 8014db4:	602a      	str	r2, [r5, #0]
 8014db6:	461a      	mov	r2, r3
 8014db8:	f7fc fc43 	bl	8011642 <_write>
 8014dbc:	1c43      	adds	r3, r0, #1
 8014dbe:	d102      	bne.n	8014dc6 <_write_r+0x1e>
 8014dc0:	682b      	ldr	r3, [r5, #0]
 8014dc2:	b103      	cbz	r3, 8014dc6 <_write_r+0x1e>
 8014dc4:	6023      	str	r3, [r4, #0]
 8014dc6:	bd38      	pop	{r3, r4, r5, pc}
 8014dc8:	200003d0 	.word	0x200003d0

08014dcc <__errno>:
 8014dcc:	4b01      	ldr	r3, [pc, #4]	@ (8014dd4 <__errno+0x8>)
 8014dce:	6818      	ldr	r0, [r3, #0]
 8014dd0:	4770      	bx	lr
 8014dd2:	bf00      	nop
 8014dd4:	20000018 	.word	0x20000018

08014dd8 <__libc_init_array>:
 8014dd8:	b570      	push	{r4, r5, r6, lr}
 8014dda:	4d0d      	ldr	r5, [pc, #52]	@ (8014e10 <__libc_init_array+0x38>)
 8014ddc:	4c0d      	ldr	r4, [pc, #52]	@ (8014e14 <__libc_init_array+0x3c>)
 8014dde:	1b64      	subs	r4, r4, r5
 8014de0:	10a4      	asrs	r4, r4, #2
 8014de2:	2600      	movs	r6, #0
 8014de4:	42a6      	cmp	r6, r4
 8014de6:	d109      	bne.n	8014dfc <__libc_init_array+0x24>
 8014de8:	4d0b      	ldr	r5, [pc, #44]	@ (8014e18 <__libc_init_array+0x40>)
 8014dea:	4c0c      	ldr	r4, [pc, #48]	@ (8014e1c <__libc_init_array+0x44>)
 8014dec:	f003 fb76 	bl	80184dc <_init>
 8014df0:	1b64      	subs	r4, r4, r5
 8014df2:	10a4      	asrs	r4, r4, #2
 8014df4:	2600      	movs	r6, #0
 8014df6:	42a6      	cmp	r6, r4
 8014df8:	d105      	bne.n	8014e06 <__libc_init_array+0x2e>
 8014dfa:	bd70      	pop	{r4, r5, r6, pc}
 8014dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8014e00:	4798      	blx	r3
 8014e02:	3601      	adds	r6, #1
 8014e04:	e7ee      	b.n	8014de4 <__libc_init_array+0xc>
 8014e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8014e0a:	4798      	blx	r3
 8014e0c:	3601      	adds	r6, #1
 8014e0e:	e7f2      	b.n	8014df6 <__libc_init_array+0x1e>
 8014e10:	08018944 	.word	0x08018944
 8014e14:	08018944 	.word	0x08018944
 8014e18:	08018944 	.word	0x08018944
 8014e1c:	08018948 	.word	0x08018948

08014e20 <__retarget_lock_init_recursive>:
 8014e20:	4770      	bx	lr

08014e22 <__retarget_lock_acquire_recursive>:
 8014e22:	4770      	bx	lr

08014e24 <__retarget_lock_release_recursive>:
 8014e24:	4770      	bx	lr
	...

08014e28 <nanf>:
 8014e28:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014e30 <nanf+0x8>
 8014e2c:	4770      	bx	lr
 8014e2e:	bf00      	nop
 8014e30:	7fc00000 	.word	0x7fc00000

08014e34 <quorem>:
 8014e34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e38:	6903      	ldr	r3, [r0, #16]
 8014e3a:	690c      	ldr	r4, [r1, #16]
 8014e3c:	42a3      	cmp	r3, r4
 8014e3e:	4607      	mov	r7, r0
 8014e40:	db7e      	blt.n	8014f40 <quorem+0x10c>
 8014e42:	3c01      	subs	r4, #1
 8014e44:	f101 0814 	add.w	r8, r1, #20
 8014e48:	00a3      	lsls	r3, r4, #2
 8014e4a:	f100 0514 	add.w	r5, r0, #20
 8014e4e:	9300      	str	r3, [sp, #0]
 8014e50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014e54:	9301      	str	r3, [sp, #4]
 8014e56:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014e5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014e5e:	3301      	adds	r3, #1
 8014e60:	429a      	cmp	r2, r3
 8014e62:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014e66:	fbb2 f6f3 	udiv	r6, r2, r3
 8014e6a:	d32e      	bcc.n	8014eca <quorem+0x96>
 8014e6c:	f04f 0a00 	mov.w	sl, #0
 8014e70:	46c4      	mov	ip, r8
 8014e72:	46ae      	mov	lr, r5
 8014e74:	46d3      	mov	fp, sl
 8014e76:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014e7a:	b298      	uxth	r0, r3
 8014e7c:	fb06 a000 	mla	r0, r6, r0, sl
 8014e80:	0c02      	lsrs	r2, r0, #16
 8014e82:	0c1b      	lsrs	r3, r3, #16
 8014e84:	fb06 2303 	mla	r3, r6, r3, r2
 8014e88:	f8de 2000 	ldr.w	r2, [lr]
 8014e8c:	b280      	uxth	r0, r0
 8014e8e:	b292      	uxth	r2, r2
 8014e90:	1a12      	subs	r2, r2, r0
 8014e92:	445a      	add	r2, fp
 8014e94:	f8de 0000 	ldr.w	r0, [lr]
 8014e98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014e9c:	b29b      	uxth	r3, r3
 8014e9e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014ea2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014ea6:	b292      	uxth	r2, r2
 8014ea8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014eac:	45e1      	cmp	r9, ip
 8014eae:	f84e 2b04 	str.w	r2, [lr], #4
 8014eb2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014eb6:	d2de      	bcs.n	8014e76 <quorem+0x42>
 8014eb8:	9b00      	ldr	r3, [sp, #0]
 8014eba:	58eb      	ldr	r3, [r5, r3]
 8014ebc:	b92b      	cbnz	r3, 8014eca <quorem+0x96>
 8014ebe:	9b01      	ldr	r3, [sp, #4]
 8014ec0:	3b04      	subs	r3, #4
 8014ec2:	429d      	cmp	r5, r3
 8014ec4:	461a      	mov	r2, r3
 8014ec6:	d32f      	bcc.n	8014f28 <quorem+0xf4>
 8014ec8:	613c      	str	r4, [r7, #16]
 8014eca:	4638      	mov	r0, r7
 8014ecc:	f001 f9c8 	bl	8016260 <__mcmp>
 8014ed0:	2800      	cmp	r0, #0
 8014ed2:	db25      	blt.n	8014f20 <quorem+0xec>
 8014ed4:	4629      	mov	r1, r5
 8014ed6:	2000      	movs	r0, #0
 8014ed8:	f858 2b04 	ldr.w	r2, [r8], #4
 8014edc:	f8d1 c000 	ldr.w	ip, [r1]
 8014ee0:	fa1f fe82 	uxth.w	lr, r2
 8014ee4:	fa1f f38c 	uxth.w	r3, ip
 8014ee8:	eba3 030e 	sub.w	r3, r3, lr
 8014eec:	4403      	add	r3, r0
 8014eee:	0c12      	lsrs	r2, r2, #16
 8014ef0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014ef4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014ef8:	b29b      	uxth	r3, r3
 8014efa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014efe:	45c1      	cmp	r9, r8
 8014f00:	f841 3b04 	str.w	r3, [r1], #4
 8014f04:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014f08:	d2e6      	bcs.n	8014ed8 <quorem+0xa4>
 8014f0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014f0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014f12:	b922      	cbnz	r2, 8014f1e <quorem+0xea>
 8014f14:	3b04      	subs	r3, #4
 8014f16:	429d      	cmp	r5, r3
 8014f18:	461a      	mov	r2, r3
 8014f1a:	d30b      	bcc.n	8014f34 <quorem+0x100>
 8014f1c:	613c      	str	r4, [r7, #16]
 8014f1e:	3601      	adds	r6, #1
 8014f20:	4630      	mov	r0, r6
 8014f22:	b003      	add	sp, #12
 8014f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f28:	6812      	ldr	r2, [r2, #0]
 8014f2a:	3b04      	subs	r3, #4
 8014f2c:	2a00      	cmp	r2, #0
 8014f2e:	d1cb      	bne.n	8014ec8 <quorem+0x94>
 8014f30:	3c01      	subs	r4, #1
 8014f32:	e7c6      	b.n	8014ec2 <quorem+0x8e>
 8014f34:	6812      	ldr	r2, [r2, #0]
 8014f36:	3b04      	subs	r3, #4
 8014f38:	2a00      	cmp	r2, #0
 8014f3a:	d1ef      	bne.n	8014f1c <quorem+0xe8>
 8014f3c:	3c01      	subs	r4, #1
 8014f3e:	e7ea      	b.n	8014f16 <quorem+0xe2>
 8014f40:	2000      	movs	r0, #0
 8014f42:	e7ee      	b.n	8014f22 <quorem+0xee>
 8014f44:	0000      	movs	r0, r0
	...

08014f48 <_dtoa_r>:
 8014f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f4c:	69c7      	ldr	r7, [r0, #28]
 8014f4e:	b097      	sub	sp, #92	@ 0x5c
 8014f50:	ed8d 0b04 	vstr	d0, [sp, #16]
 8014f54:	ec55 4b10 	vmov	r4, r5, d0
 8014f58:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8014f5a:	9107      	str	r1, [sp, #28]
 8014f5c:	4681      	mov	r9, r0
 8014f5e:	920c      	str	r2, [sp, #48]	@ 0x30
 8014f60:	9311      	str	r3, [sp, #68]	@ 0x44
 8014f62:	b97f      	cbnz	r7, 8014f84 <_dtoa_r+0x3c>
 8014f64:	2010      	movs	r0, #16
 8014f66:	f000 fe09 	bl	8015b7c <malloc>
 8014f6a:	4602      	mov	r2, r0
 8014f6c:	f8c9 001c 	str.w	r0, [r9, #28]
 8014f70:	b920      	cbnz	r0, 8014f7c <_dtoa_r+0x34>
 8014f72:	4ba9      	ldr	r3, [pc, #676]	@ (8015218 <_dtoa_r+0x2d0>)
 8014f74:	21ef      	movs	r1, #239	@ 0xef
 8014f76:	48a9      	ldr	r0, [pc, #676]	@ (801521c <_dtoa_r+0x2d4>)
 8014f78:	f002 fc3a 	bl	80177f0 <__assert_func>
 8014f7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014f80:	6007      	str	r7, [r0, #0]
 8014f82:	60c7      	str	r7, [r0, #12]
 8014f84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014f88:	6819      	ldr	r1, [r3, #0]
 8014f8a:	b159      	cbz	r1, 8014fa4 <_dtoa_r+0x5c>
 8014f8c:	685a      	ldr	r2, [r3, #4]
 8014f8e:	604a      	str	r2, [r1, #4]
 8014f90:	2301      	movs	r3, #1
 8014f92:	4093      	lsls	r3, r2
 8014f94:	608b      	str	r3, [r1, #8]
 8014f96:	4648      	mov	r0, r9
 8014f98:	f000 fee6 	bl	8015d68 <_Bfree>
 8014f9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014fa0:	2200      	movs	r2, #0
 8014fa2:	601a      	str	r2, [r3, #0]
 8014fa4:	1e2b      	subs	r3, r5, #0
 8014fa6:	bfb9      	ittee	lt
 8014fa8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014fac:	9305      	strlt	r3, [sp, #20]
 8014fae:	2300      	movge	r3, #0
 8014fb0:	6033      	strge	r3, [r6, #0]
 8014fb2:	9f05      	ldr	r7, [sp, #20]
 8014fb4:	4b9a      	ldr	r3, [pc, #616]	@ (8015220 <_dtoa_r+0x2d8>)
 8014fb6:	bfbc      	itt	lt
 8014fb8:	2201      	movlt	r2, #1
 8014fba:	6032      	strlt	r2, [r6, #0]
 8014fbc:	43bb      	bics	r3, r7
 8014fbe:	d112      	bne.n	8014fe6 <_dtoa_r+0x9e>
 8014fc0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014fc2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014fc6:	6013      	str	r3, [r2, #0]
 8014fc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014fcc:	4323      	orrs	r3, r4
 8014fce:	f000 855a 	beq.w	8015a86 <_dtoa_r+0xb3e>
 8014fd2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014fd4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8015234 <_dtoa_r+0x2ec>
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	f000 855c 	beq.w	8015a96 <_dtoa_r+0xb4e>
 8014fde:	f10a 0303 	add.w	r3, sl, #3
 8014fe2:	f000 bd56 	b.w	8015a92 <_dtoa_r+0xb4a>
 8014fe6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8014fea:	2200      	movs	r2, #0
 8014fec:	ec51 0b17 	vmov	r0, r1, d7
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8014ff6:	f7fb fd6f 	bl	8010ad8 <__aeabi_dcmpeq>
 8014ffa:	4680      	mov	r8, r0
 8014ffc:	b158      	cbz	r0, 8015016 <_dtoa_r+0xce>
 8014ffe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015000:	2301      	movs	r3, #1
 8015002:	6013      	str	r3, [r2, #0]
 8015004:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015006:	b113      	cbz	r3, 801500e <_dtoa_r+0xc6>
 8015008:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801500a:	4b86      	ldr	r3, [pc, #536]	@ (8015224 <_dtoa_r+0x2dc>)
 801500c:	6013      	str	r3, [r2, #0]
 801500e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8015238 <_dtoa_r+0x2f0>
 8015012:	f000 bd40 	b.w	8015a96 <_dtoa_r+0xb4e>
 8015016:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801501a:	aa14      	add	r2, sp, #80	@ 0x50
 801501c:	a915      	add	r1, sp, #84	@ 0x54
 801501e:	4648      	mov	r0, r9
 8015020:	f001 fa3e 	bl	80164a0 <__d2b>
 8015024:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8015028:	9002      	str	r0, [sp, #8]
 801502a:	2e00      	cmp	r6, #0
 801502c:	d078      	beq.n	8015120 <_dtoa_r+0x1d8>
 801502e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015030:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8015034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015038:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801503c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8015040:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8015044:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8015048:	4619      	mov	r1, r3
 801504a:	2200      	movs	r2, #0
 801504c:	4b76      	ldr	r3, [pc, #472]	@ (8015228 <_dtoa_r+0x2e0>)
 801504e:	f7fb f923 	bl	8010298 <__aeabi_dsub>
 8015052:	a36b      	add	r3, pc, #428	@ (adr r3, 8015200 <_dtoa_r+0x2b8>)
 8015054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015058:	f7fb fad6 	bl	8010608 <__aeabi_dmul>
 801505c:	a36a      	add	r3, pc, #424	@ (adr r3, 8015208 <_dtoa_r+0x2c0>)
 801505e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015062:	f7fb f91b 	bl	801029c <__adddf3>
 8015066:	4604      	mov	r4, r0
 8015068:	4630      	mov	r0, r6
 801506a:	460d      	mov	r5, r1
 801506c:	f7fb fa62 	bl	8010534 <__aeabi_i2d>
 8015070:	a367      	add	r3, pc, #412	@ (adr r3, 8015210 <_dtoa_r+0x2c8>)
 8015072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015076:	f7fb fac7 	bl	8010608 <__aeabi_dmul>
 801507a:	4602      	mov	r2, r0
 801507c:	460b      	mov	r3, r1
 801507e:	4620      	mov	r0, r4
 8015080:	4629      	mov	r1, r5
 8015082:	f7fb f90b 	bl	801029c <__adddf3>
 8015086:	4604      	mov	r4, r0
 8015088:	460d      	mov	r5, r1
 801508a:	f7fb fd6d 	bl	8010b68 <__aeabi_d2iz>
 801508e:	2200      	movs	r2, #0
 8015090:	4607      	mov	r7, r0
 8015092:	2300      	movs	r3, #0
 8015094:	4620      	mov	r0, r4
 8015096:	4629      	mov	r1, r5
 8015098:	f7fb fd28 	bl	8010aec <__aeabi_dcmplt>
 801509c:	b140      	cbz	r0, 80150b0 <_dtoa_r+0x168>
 801509e:	4638      	mov	r0, r7
 80150a0:	f7fb fa48 	bl	8010534 <__aeabi_i2d>
 80150a4:	4622      	mov	r2, r4
 80150a6:	462b      	mov	r3, r5
 80150a8:	f7fb fd16 	bl	8010ad8 <__aeabi_dcmpeq>
 80150ac:	b900      	cbnz	r0, 80150b0 <_dtoa_r+0x168>
 80150ae:	3f01      	subs	r7, #1
 80150b0:	2f16      	cmp	r7, #22
 80150b2:	d852      	bhi.n	801515a <_dtoa_r+0x212>
 80150b4:	4b5d      	ldr	r3, [pc, #372]	@ (801522c <_dtoa_r+0x2e4>)
 80150b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80150ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80150c2:	f7fb fd13 	bl	8010aec <__aeabi_dcmplt>
 80150c6:	2800      	cmp	r0, #0
 80150c8:	d049      	beq.n	801515e <_dtoa_r+0x216>
 80150ca:	3f01      	subs	r7, #1
 80150cc:	2300      	movs	r3, #0
 80150ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80150d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80150d2:	1b9b      	subs	r3, r3, r6
 80150d4:	1e5a      	subs	r2, r3, #1
 80150d6:	bf45      	ittet	mi
 80150d8:	f1c3 0301 	rsbmi	r3, r3, #1
 80150dc:	9300      	strmi	r3, [sp, #0]
 80150de:	2300      	movpl	r3, #0
 80150e0:	2300      	movmi	r3, #0
 80150e2:	9206      	str	r2, [sp, #24]
 80150e4:	bf54      	ite	pl
 80150e6:	9300      	strpl	r3, [sp, #0]
 80150e8:	9306      	strmi	r3, [sp, #24]
 80150ea:	2f00      	cmp	r7, #0
 80150ec:	db39      	blt.n	8015162 <_dtoa_r+0x21a>
 80150ee:	9b06      	ldr	r3, [sp, #24]
 80150f0:	970d      	str	r7, [sp, #52]	@ 0x34
 80150f2:	443b      	add	r3, r7
 80150f4:	9306      	str	r3, [sp, #24]
 80150f6:	2300      	movs	r3, #0
 80150f8:	9308      	str	r3, [sp, #32]
 80150fa:	9b07      	ldr	r3, [sp, #28]
 80150fc:	2b09      	cmp	r3, #9
 80150fe:	d863      	bhi.n	80151c8 <_dtoa_r+0x280>
 8015100:	2b05      	cmp	r3, #5
 8015102:	bfc4      	itt	gt
 8015104:	3b04      	subgt	r3, #4
 8015106:	9307      	strgt	r3, [sp, #28]
 8015108:	9b07      	ldr	r3, [sp, #28]
 801510a:	f1a3 0302 	sub.w	r3, r3, #2
 801510e:	bfcc      	ite	gt
 8015110:	2400      	movgt	r4, #0
 8015112:	2401      	movle	r4, #1
 8015114:	2b03      	cmp	r3, #3
 8015116:	d863      	bhi.n	80151e0 <_dtoa_r+0x298>
 8015118:	e8df f003 	tbb	[pc, r3]
 801511c:	2b375452 	.word	0x2b375452
 8015120:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8015124:	441e      	add	r6, r3
 8015126:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801512a:	2b20      	cmp	r3, #32
 801512c:	bfc1      	itttt	gt
 801512e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8015132:	409f      	lslgt	r7, r3
 8015134:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8015138:	fa24 f303 	lsrgt.w	r3, r4, r3
 801513c:	bfd6      	itet	le
 801513e:	f1c3 0320 	rsble	r3, r3, #32
 8015142:	ea47 0003 	orrgt.w	r0, r7, r3
 8015146:	fa04 f003 	lslle.w	r0, r4, r3
 801514a:	f7fb f9e3 	bl	8010514 <__aeabi_ui2d>
 801514e:	2201      	movs	r2, #1
 8015150:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8015154:	3e01      	subs	r6, #1
 8015156:	9212      	str	r2, [sp, #72]	@ 0x48
 8015158:	e776      	b.n	8015048 <_dtoa_r+0x100>
 801515a:	2301      	movs	r3, #1
 801515c:	e7b7      	b.n	80150ce <_dtoa_r+0x186>
 801515e:	9010      	str	r0, [sp, #64]	@ 0x40
 8015160:	e7b6      	b.n	80150d0 <_dtoa_r+0x188>
 8015162:	9b00      	ldr	r3, [sp, #0]
 8015164:	1bdb      	subs	r3, r3, r7
 8015166:	9300      	str	r3, [sp, #0]
 8015168:	427b      	negs	r3, r7
 801516a:	9308      	str	r3, [sp, #32]
 801516c:	2300      	movs	r3, #0
 801516e:	930d      	str	r3, [sp, #52]	@ 0x34
 8015170:	e7c3      	b.n	80150fa <_dtoa_r+0x1b2>
 8015172:	2301      	movs	r3, #1
 8015174:	9309      	str	r3, [sp, #36]	@ 0x24
 8015176:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015178:	eb07 0b03 	add.w	fp, r7, r3
 801517c:	f10b 0301 	add.w	r3, fp, #1
 8015180:	2b01      	cmp	r3, #1
 8015182:	9303      	str	r3, [sp, #12]
 8015184:	bfb8      	it	lt
 8015186:	2301      	movlt	r3, #1
 8015188:	e006      	b.n	8015198 <_dtoa_r+0x250>
 801518a:	2301      	movs	r3, #1
 801518c:	9309      	str	r3, [sp, #36]	@ 0x24
 801518e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015190:	2b00      	cmp	r3, #0
 8015192:	dd28      	ble.n	80151e6 <_dtoa_r+0x29e>
 8015194:	469b      	mov	fp, r3
 8015196:	9303      	str	r3, [sp, #12]
 8015198:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801519c:	2100      	movs	r1, #0
 801519e:	2204      	movs	r2, #4
 80151a0:	f102 0514 	add.w	r5, r2, #20
 80151a4:	429d      	cmp	r5, r3
 80151a6:	d926      	bls.n	80151f6 <_dtoa_r+0x2ae>
 80151a8:	6041      	str	r1, [r0, #4]
 80151aa:	4648      	mov	r0, r9
 80151ac:	f000 fd9c 	bl	8015ce8 <_Balloc>
 80151b0:	4682      	mov	sl, r0
 80151b2:	2800      	cmp	r0, #0
 80151b4:	d142      	bne.n	801523c <_dtoa_r+0x2f4>
 80151b6:	4b1e      	ldr	r3, [pc, #120]	@ (8015230 <_dtoa_r+0x2e8>)
 80151b8:	4602      	mov	r2, r0
 80151ba:	f240 11af 	movw	r1, #431	@ 0x1af
 80151be:	e6da      	b.n	8014f76 <_dtoa_r+0x2e>
 80151c0:	2300      	movs	r3, #0
 80151c2:	e7e3      	b.n	801518c <_dtoa_r+0x244>
 80151c4:	2300      	movs	r3, #0
 80151c6:	e7d5      	b.n	8015174 <_dtoa_r+0x22c>
 80151c8:	2401      	movs	r4, #1
 80151ca:	2300      	movs	r3, #0
 80151cc:	9307      	str	r3, [sp, #28]
 80151ce:	9409      	str	r4, [sp, #36]	@ 0x24
 80151d0:	f04f 3bff 	mov.w	fp, #4294967295
 80151d4:	2200      	movs	r2, #0
 80151d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80151da:	2312      	movs	r3, #18
 80151dc:	920c      	str	r2, [sp, #48]	@ 0x30
 80151de:	e7db      	b.n	8015198 <_dtoa_r+0x250>
 80151e0:	2301      	movs	r3, #1
 80151e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80151e4:	e7f4      	b.n	80151d0 <_dtoa_r+0x288>
 80151e6:	f04f 0b01 	mov.w	fp, #1
 80151ea:	f8cd b00c 	str.w	fp, [sp, #12]
 80151ee:	465b      	mov	r3, fp
 80151f0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80151f4:	e7d0      	b.n	8015198 <_dtoa_r+0x250>
 80151f6:	3101      	adds	r1, #1
 80151f8:	0052      	lsls	r2, r2, #1
 80151fa:	e7d1      	b.n	80151a0 <_dtoa_r+0x258>
 80151fc:	f3af 8000 	nop.w
 8015200:	636f4361 	.word	0x636f4361
 8015204:	3fd287a7 	.word	0x3fd287a7
 8015208:	8b60c8b3 	.word	0x8b60c8b3
 801520c:	3fc68a28 	.word	0x3fc68a28
 8015210:	509f79fb 	.word	0x509f79fb
 8015214:	3fd34413 	.word	0x3fd34413
 8015218:	08018556 	.word	0x08018556
 801521c:	0801856d 	.word	0x0801856d
 8015220:	7ff00000 	.word	0x7ff00000
 8015224:	08018521 	.word	0x08018521
 8015228:	3ff80000 	.word	0x3ff80000
 801522c:	08018720 	.word	0x08018720
 8015230:	080185c5 	.word	0x080185c5
 8015234:	08018552 	.word	0x08018552
 8015238:	08018520 	.word	0x08018520
 801523c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015240:	6018      	str	r0, [r3, #0]
 8015242:	9b03      	ldr	r3, [sp, #12]
 8015244:	2b0e      	cmp	r3, #14
 8015246:	f200 80a1 	bhi.w	801538c <_dtoa_r+0x444>
 801524a:	2c00      	cmp	r4, #0
 801524c:	f000 809e 	beq.w	801538c <_dtoa_r+0x444>
 8015250:	2f00      	cmp	r7, #0
 8015252:	dd33      	ble.n	80152bc <_dtoa_r+0x374>
 8015254:	4b9c      	ldr	r3, [pc, #624]	@ (80154c8 <_dtoa_r+0x580>)
 8015256:	f007 020f 	and.w	r2, r7, #15
 801525a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801525e:	ed93 7b00 	vldr	d7, [r3]
 8015262:	05f8      	lsls	r0, r7, #23
 8015264:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8015268:	ea4f 1427 	mov.w	r4, r7, asr #4
 801526c:	d516      	bpl.n	801529c <_dtoa_r+0x354>
 801526e:	4b97      	ldr	r3, [pc, #604]	@ (80154cc <_dtoa_r+0x584>)
 8015270:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015274:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015278:	f7fb faf0 	bl	801085c <__aeabi_ddiv>
 801527c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015280:	f004 040f 	and.w	r4, r4, #15
 8015284:	2603      	movs	r6, #3
 8015286:	4d91      	ldr	r5, [pc, #580]	@ (80154cc <_dtoa_r+0x584>)
 8015288:	b954      	cbnz	r4, 80152a0 <_dtoa_r+0x358>
 801528a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801528e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015292:	f7fb fae3 	bl	801085c <__aeabi_ddiv>
 8015296:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801529a:	e028      	b.n	80152ee <_dtoa_r+0x3a6>
 801529c:	2602      	movs	r6, #2
 801529e:	e7f2      	b.n	8015286 <_dtoa_r+0x33e>
 80152a0:	07e1      	lsls	r1, r4, #31
 80152a2:	d508      	bpl.n	80152b6 <_dtoa_r+0x36e>
 80152a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80152a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80152ac:	f7fb f9ac 	bl	8010608 <__aeabi_dmul>
 80152b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80152b4:	3601      	adds	r6, #1
 80152b6:	1064      	asrs	r4, r4, #1
 80152b8:	3508      	adds	r5, #8
 80152ba:	e7e5      	b.n	8015288 <_dtoa_r+0x340>
 80152bc:	f000 80af 	beq.w	801541e <_dtoa_r+0x4d6>
 80152c0:	427c      	negs	r4, r7
 80152c2:	4b81      	ldr	r3, [pc, #516]	@ (80154c8 <_dtoa_r+0x580>)
 80152c4:	4d81      	ldr	r5, [pc, #516]	@ (80154cc <_dtoa_r+0x584>)
 80152c6:	f004 020f 	and.w	r2, r4, #15
 80152ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80152ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80152d6:	f7fb f997 	bl	8010608 <__aeabi_dmul>
 80152da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80152de:	1124      	asrs	r4, r4, #4
 80152e0:	2300      	movs	r3, #0
 80152e2:	2602      	movs	r6, #2
 80152e4:	2c00      	cmp	r4, #0
 80152e6:	f040 808f 	bne.w	8015408 <_dtoa_r+0x4c0>
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d1d3      	bne.n	8015296 <_dtoa_r+0x34e>
 80152ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80152f0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	f000 8094 	beq.w	8015422 <_dtoa_r+0x4da>
 80152fa:	4b75      	ldr	r3, [pc, #468]	@ (80154d0 <_dtoa_r+0x588>)
 80152fc:	2200      	movs	r2, #0
 80152fe:	4620      	mov	r0, r4
 8015300:	4629      	mov	r1, r5
 8015302:	f7fb fbf3 	bl	8010aec <__aeabi_dcmplt>
 8015306:	2800      	cmp	r0, #0
 8015308:	f000 808b 	beq.w	8015422 <_dtoa_r+0x4da>
 801530c:	9b03      	ldr	r3, [sp, #12]
 801530e:	2b00      	cmp	r3, #0
 8015310:	f000 8087 	beq.w	8015422 <_dtoa_r+0x4da>
 8015314:	f1bb 0f00 	cmp.w	fp, #0
 8015318:	dd34      	ble.n	8015384 <_dtoa_r+0x43c>
 801531a:	4620      	mov	r0, r4
 801531c:	4b6d      	ldr	r3, [pc, #436]	@ (80154d4 <_dtoa_r+0x58c>)
 801531e:	2200      	movs	r2, #0
 8015320:	4629      	mov	r1, r5
 8015322:	f7fb f971 	bl	8010608 <__aeabi_dmul>
 8015326:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801532a:	f107 38ff 	add.w	r8, r7, #4294967295
 801532e:	3601      	adds	r6, #1
 8015330:	465c      	mov	r4, fp
 8015332:	4630      	mov	r0, r6
 8015334:	f7fb f8fe 	bl	8010534 <__aeabi_i2d>
 8015338:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801533c:	f7fb f964 	bl	8010608 <__aeabi_dmul>
 8015340:	4b65      	ldr	r3, [pc, #404]	@ (80154d8 <_dtoa_r+0x590>)
 8015342:	2200      	movs	r2, #0
 8015344:	f7fa ffaa 	bl	801029c <__adddf3>
 8015348:	4605      	mov	r5, r0
 801534a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801534e:	2c00      	cmp	r4, #0
 8015350:	d16a      	bne.n	8015428 <_dtoa_r+0x4e0>
 8015352:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015356:	4b61      	ldr	r3, [pc, #388]	@ (80154dc <_dtoa_r+0x594>)
 8015358:	2200      	movs	r2, #0
 801535a:	f7fa ff9d 	bl	8010298 <__aeabi_dsub>
 801535e:	4602      	mov	r2, r0
 8015360:	460b      	mov	r3, r1
 8015362:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015366:	462a      	mov	r2, r5
 8015368:	4633      	mov	r3, r6
 801536a:	f7fb fbdd 	bl	8010b28 <__aeabi_dcmpgt>
 801536e:	2800      	cmp	r0, #0
 8015370:	f040 8298 	bne.w	80158a4 <_dtoa_r+0x95c>
 8015374:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015378:	462a      	mov	r2, r5
 801537a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801537e:	f7fb fbb5 	bl	8010aec <__aeabi_dcmplt>
 8015382:	bb38      	cbnz	r0, 80153d4 <_dtoa_r+0x48c>
 8015384:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8015388:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801538c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801538e:	2b00      	cmp	r3, #0
 8015390:	f2c0 8157 	blt.w	8015642 <_dtoa_r+0x6fa>
 8015394:	2f0e      	cmp	r7, #14
 8015396:	f300 8154 	bgt.w	8015642 <_dtoa_r+0x6fa>
 801539a:	4b4b      	ldr	r3, [pc, #300]	@ (80154c8 <_dtoa_r+0x580>)
 801539c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80153a0:	ed93 7b00 	vldr	d7, [r3]
 80153a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	ed8d 7b00 	vstr	d7, [sp]
 80153ac:	f280 80e5 	bge.w	801557a <_dtoa_r+0x632>
 80153b0:	9b03      	ldr	r3, [sp, #12]
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	f300 80e1 	bgt.w	801557a <_dtoa_r+0x632>
 80153b8:	d10c      	bne.n	80153d4 <_dtoa_r+0x48c>
 80153ba:	4b48      	ldr	r3, [pc, #288]	@ (80154dc <_dtoa_r+0x594>)
 80153bc:	2200      	movs	r2, #0
 80153be:	ec51 0b17 	vmov	r0, r1, d7
 80153c2:	f7fb f921 	bl	8010608 <__aeabi_dmul>
 80153c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80153ca:	f7fb fba3 	bl	8010b14 <__aeabi_dcmpge>
 80153ce:	2800      	cmp	r0, #0
 80153d0:	f000 8266 	beq.w	80158a0 <_dtoa_r+0x958>
 80153d4:	2400      	movs	r4, #0
 80153d6:	4625      	mov	r5, r4
 80153d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80153da:	4656      	mov	r6, sl
 80153dc:	ea6f 0803 	mvn.w	r8, r3
 80153e0:	2700      	movs	r7, #0
 80153e2:	4621      	mov	r1, r4
 80153e4:	4648      	mov	r0, r9
 80153e6:	f000 fcbf 	bl	8015d68 <_Bfree>
 80153ea:	2d00      	cmp	r5, #0
 80153ec:	f000 80bd 	beq.w	801556a <_dtoa_r+0x622>
 80153f0:	b12f      	cbz	r7, 80153fe <_dtoa_r+0x4b6>
 80153f2:	42af      	cmp	r7, r5
 80153f4:	d003      	beq.n	80153fe <_dtoa_r+0x4b6>
 80153f6:	4639      	mov	r1, r7
 80153f8:	4648      	mov	r0, r9
 80153fa:	f000 fcb5 	bl	8015d68 <_Bfree>
 80153fe:	4629      	mov	r1, r5
 8015400:	4648      	mov	r0, r9
 8015402:	f000 fcb1 	bl	8015d68 <_Bfree>
 8015406:	e0b0      	b.n	801556a <_dtoa_r+0x622>
 8015408:	07e2      	lsls	r2, r4, #31
 801540a:	d505      	bpl.n	8015418 <_dtoa_r+0x4d0>
 801540c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015410:	f7fb f8fa 	bl	8010608 <__aeabi_dmul>
 8015414:	3601      	adds	r6, #1
 8015416:	2301      	movs	r3, #1
 8015418:	1064      	asrs	r4, r4, #1
 801541a:	3508      	adds	r5, #8
 801541c:	e762      	b.n	80152e4 <_dtoa_r+0x39c>
 801541e:	2602      	movs	r6, #2
 8015420:	e765      	b.n	80152ee <_dtoa_r+0x3a6>
 8015422:	9c03      	ldr	r4, [sp, #12]
 8015424:	46b8      	mov	r8, r7
 8015426:	e784      	b.n	8015332 <_dtoa_r+0x3ea>
 8015428:	4b27      	ldr	r3, [pc, #156]	@ (80154c8 <_dtoa_r+0x580>)
 801542a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801542c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015430:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015434:	4454      	add	r4, sl
 8015436:	2900      	cmp	r1, #0
 8015438:	d054      	beq.n	80154e4 <_dtoa_r+0x59c>
 801543a:	4929      	ldr	r1, [pc, #164]	@ (80154e0 <_dtoa_r+0x598>)
 801543c:	2000      	movs	r0, #0
 801543e:	f7fb fa0d 	bl	801085c <__aeabi_ddiv>
 8015442:	4633      	mov	r3, r6
 8015444:	462a      	mov	r2, r5
 8015446:	f7fa ff27 	bl	8010298 <__aeabi_dsub>
 801544a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801544e:	4656      	mov	r6, sl
 8015450:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015454:	f7fb fb88 	bl	8010b68 <__aeabi_d2iz>
 8015458:	4605      	mov	r5, r0
 801545a:	f7fb f86b 	bl	8010534 <__aeabi_i2d>
 801545e:	4602      	mov	r2, r0
 8015460:	460b      	mov	r3, r1
 8015462:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015466:	f7fa ff17 	bl	8010298 <__aeabi_dsub>
 801546a:	3530      	adds	r5, #48	@ 0x30
 801546c:	4602      	mov	r2, r0
 801546e:	460b      	mov	r3, r1
 8015470:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015474:	f806 5b01 	strb.w	r5, [r6], #1
 8015478:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801547c:	f7fb fb36 	bl	8010aec <__aeabi_dcmplt>
 8015480:	2800      	cmp	r0, #0
 8015482:	d172      	bne.n	801556a <_dtoa_r+0x622>
 8015484:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015488:	4911      	ldr	r1, [pc, #68]	@ (80154d0 <_dtoa_r+0x588>)
 801548a:	2000      	movs	r0, #0
 801548c:	f7fa ff04 	bl	8010298 <__aeabi_dsub>
 8015490:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015494:	f7fb fb2a 	bl	8010aec <__aeabi_dcmplt>
 8015498:	2800      	cmp	r0, #0
 801549a:	f040 80b4 	bne.w	8015606 <_dtoa_r+0x6be>
 801549e:	42a6      	cmp	r6, r4
 80154a0:	f43f af70 	beq.w	8015384 <_dtoa_r+0x43c>
 80154a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80154a8:	4b0a      	ldr	r3, [pc, #40]	@ (80154d4 <_dtoa_r+0x58c>)
 80154aa:	2200      	movs	r2, #0
 80154ac:	f7fb f8ac 	bl	8010608 <__aeabi_dmul>
 80154b0:	4b08      	ldr	r3, [pc, #32]	@ (80154d4 <_dtoa_r+0x58c>)
 80154b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80154b6:	2200      	movs	r2, #0
 80154b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80154bc:	f7fb f8a4 	bl	8010608 <__aeabi_dmul>
 80154c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80154c4:	e7c4      	b.n	8015450 <_dtoa_r+0x508>
 80154c6:	bf00      	nop
 80154c8:	08018720 	.word	0x08018720
 80154cc:	080186f8 	.word	0x080186f8
 80154d0:	3ff00000 	.word	0x3ff00000
 80154d4:	40240000 	.word	0x40240000
 80154d8:	401c0000 	.word	0x401c0000
 80154dc:	40140000 	.word	0x40140000
 80154e0:	3fe00000 	.word	0x3fe00000
 80154e4:	4631      	mov	r1, r6
 80154e6:	4628      	mov	r0, r5
 80154e8:	f7fb f88e 	bl	8010608 <__aeabi_dmul>
 80154ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80154f0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80154f2:	4656      	mov	r6, sl
 80154f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80154f8:	f7fb fb36 	bl	8010b68 <__aeabi_d2iz>
 80154fc:	4605      	mov	r5, r0
 80154fe:	f7fb f819 	bl	8010534 <__aeabi_i2d>
 8015502:	4602      	mov	r2, r0
 8015504:	460b      	mov	r3, r1
 8015506:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801550a:	f7fa fec5 	bl	8010298 <__aeabi_dsub>
 801550e:	3530      	adds	r5, #48	@ 0x30
 8015510:	f806 5b01 	strb.w	r5, [r6], #1
 8015514:	4602      	mov	r2, r0
 8015516:	460b      	mov	r3, r1
 8015518:	42a6      	cmp	r6, r4
 801551a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801551e:	f04f 0200 	mov.w	r2, #0
 8015522:	d124      	bne.n	801556e <_dtoa_r+0x626>
 8015524:	4baf      	ldr	r3, [pc, #700]	@ (80157e4 <_dtoa_r+0x89c>)
 8015526:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801552a:	f7fa feb7 	bl	801029c <__adddf3>
 801552e:	4602      	mov	r2, r0
 8015530:	460b      	mov	r3, r1
 8015532:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015536:	f7fb faf7 	bl	8010b28 <__aeabi_dcmpgt>
 801553a:	2800      	cmp	r0, #0
 801553c:	d163      	bne.n	8015606 <_dtoa_r+0x6be>
 801553e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015542:	49a8      	ldr	r1, [pc, #672]	@ (80157e4 <_dtoa_r+0x89c>)
 8015544:	2000      	movs	r0, #0
 8015546:	f7fa fea7 	bl	8010298 <__aeabi_dsub>
 801554a:	4602      	mov	r2, r0
 801554c:	460b      	mov	r3, r1
 801554e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015552:	f7fb facb 	bl	8010aec <__aeabi_dcmplt>
 8015556:	2800      	cmp	r0, #0
 8015558:	f43f af14 	beq.w	8015384 <_dtoa_r+0x43c>
 801555c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801555e:	1e73      	subs	r3, r6, #1
 8015560:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015562:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015566:	2b30      	cmp	r3, #48	@ 0x30
 8015568:	d0f8      	beq.n	801555c <_dtoa_r+0x614>
 801556a:	4647      	mov	r7, r8
 801556c:	e03b      	b.n	80155e6 <_dtoa_r+0x69e>
 801556e:	4b9e      	ldr	r3, [pc, #632]	@ (80157e8 <_dtoa_r+0x8a0>)
 8015570:	f7fb f84a 	bl	8010608 <__aeabi_dmul>
 8015574:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015578:	e7bc      	b.n	80154f4 <_dtoa_r+0x5ac>
 801557a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801557e:	4656      	mov	r6, sl
 8015580:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015584:	4620      	mov	r0, r4
 8015586:	4629      	mov	r1, r5
 8015588:	f7fb f968 	bl	801085c <__aeabi_ddiv>
 801558c:	f7fb faec 	bl	8010b68 <__aeabi_d2iz>
 8015590:	4680      	mov	r8, r0
 8015592:	f7fa ffcf 	bl	8010534 <__aeabi_i2d>
 8015596:	e9dd 2300 	ldrd	r2, r3, [sp]
 801559a:	f7fb f835 	bl	8010608 <__aeabi_dmul>
 801559e:	4602      	mov	r2, r0
 80155a0:	460b      	mov	r3, r1
 80155a2:	4620      	mov	r0, r4
 80155a4:	4629      	mov	r1, r5
 80155a6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80155aa:	f7fa fe75 	bl	8010298 <__aeabi_dsub>
 80155ae:	f806 4b01 	strb.w	r4, [r6], #1
 80155b2:	9d03      	ldr	r5, [sp, #12]
 80155b4:	eba6 040a 	sub.w	r4, r6, sl
 80155b8:	42a5      	cmp	r5, r4
 80155ba:	4602      	mov	r2, r0
 80155bc:	460b      	mov	r3, r1
 80155be:	d133      	bne.n	8015628 <_dtoa_r+0x6e0>
 80155c0:	f7fa fe6c 	bl	801029c <__adddf3>
 80155c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80155c8:	4604      	mov	r4, r0
 80155ca:	460d      	mov	r5, r1
 80155cc:	f7fb faac 	bl	8010b28 <__aeabi_dcmpgt>
 80155d0:	b9c0      	cbnz	r0, 8015604 <_dtoa_r+0x6bc>
 80155d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80155d6:	4620      	mov	r0, r4
 80155d8:	4629      	mov	r1, r5
 80155da:	f7fb fa7d 	bl	8010ad8 <__aeabi_dcmpeq>
 80155de:	b110      	cbz	r0, 80155e6 <_dtoa_r+0x69e>
 80155e0:	f018 0f01 	tst.w	r8, #1
 80155e4:	d10e      	bne.n	8015604 <_dtoa_r+0x6bc>
 80155e6:	9902      	ldr	r1, [sp, #8]
 80155e8:	4648      	mov	r0, r9
 80155ea:	f000 fbbd 	bl	8015d68 <_Bfree>
 80155ee:	2300      	movs	r3, #0
 80155f0:	7033      	strb	r3, [r6, #0]
 80155f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80155f4:	3701      	adds	r7, #1
 80155f6:	601f      	str	r7, [r3, #0]
 80155f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	f000 824b 	beq.w	8015a96 <_dtoa_r+0xb4e>
 8015600:	601e      	str	r6, [r3, #0]
 8015602:	e248      	b.n	8015a96 <_dtoa_r+0xb4e>
 8015604:	46b8      	mov	r8, r7
 8015606:	4633      	mov	r3, r6
 8015608:	461e      	mov	r6, r3
 801560a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801560e:	2a39      	cmp	r2, #57	@ 0x39
 8015610:	d106      	bne.n	8015620 <_dtoa_r+0x6d8>
 8015612:	459a      	cmp	sl, r3
 8015614:	d1f8      	bne.n	8015608 <_dtoa_r+0x6c0>
 8015616:	2230      	movs	r2, #48	@ 0x30
 8015618:	f108 0801 	add.w	r8, r8, #1
 801561c:	f88a 2000 	strb.w	r2, [sl]
 8015620:	781a      	ldrb	r2, [r3, #0]
 8015622:	3201      	adds	r2, #1
 8015624:	701a      	strb	r2, [r3, #0]
 8015626:	e7a0      	b.n	801556a <_dtoa_r+0x622>
 8015628:	4b6f      	ldr	r3, [pc, #444]	@ (80157e8 <_dtoa_r+0x8a0>)
 801562a:	2200      	movs	r2, #0
 801562c:	f7fa ffec 	bl	8010608 <__aeabi_dmul>
 8015630:	2200      	movs	r2, #0
 8015632:	2300      	movs	r3, #0
 8015634:	4604      	mov	r4, r0
 8015636:	460d      	mov	r5, r1
 8015638:	f7fb fa4e 	bl	8010ad8 <__aeabi_dcmpeq>
 801563c:	2800      	cmp	r0, #0
 801563e:	d09f      	beq.n	8015580 <_dtoa_r+0x638>
 8015640:	e7d1      	b.n	80155e6 <_dtoa_r+0x69e>
 8015642:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015644:	2a00      	cmp	r2, #0
 8015646:	f000 80ea 	beq.w	801581e <_dtoa_r+0x8d6>
 801564a:	9a07      	ldr	r2, [sp, #28]
 801564c:	2a01      	cmp	r2, #1
 801564e:	f300 80cd 	bgt.w	80157ec <_dtoa_r+0x8a4>
 8015652:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015654:	2a00      	cmp	r2, #0
 8015656:	f000 80c1 	beq.w	80157dc <_dtoa_r+0x894>
 801565a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801565e:	9c08      	ldr	r4, [sp, #32]
 8015660:	9e00      	ldr	r6, [sp, #0]
 8015662:	9a00      	ldr	r2, [sp, #0]
 8015664:	441a      	add	r2, r3
 8015666:	9200      	str	r2, [sp, #0]
 8015668:	9a06      	ldr	r2, [sp, #24]
 801566a:	2101      	movs	r1, #1
 801566c:	441a      	add	r2, r3
 801566e:	4648      	mov	r0, r9
 8015670:	9206      	str	r2, [sp, #24]
 8015672:	f000 fc77 	bl	8015f64 <__i2b>
 8015676:	4605      	mov	r5, r0
 8015678:	b166      	cbz	r6, 8015694 <_dtoa_r+0x74c>
 801567a:	9b06      	ldr	r3, [sp, #24]
 801567c:	2b00      	cmp	r3, #0
 801567e:	dd09      	ble.n	8015694 <_dtoa_r+0x74c>
 8015680:	42b3      	cmp	r3, r6
 8015682:	9a00      	ldr	r2, [sp, #0]
 8015684:	bfa8      	it	ge
 8015686:	4633      	movge	r3, r6
 8015688:	1ad2      	subs	r2, r2, r3
 801568a:	9200      	str	r2, [sp, #0]
 801568c:	9a06      	ldr	r2, [sp, #24]
 801568e:	1af6      	subs	r6, r6, r3
 8015690:	1ad3      	subs	r3, r2, r3
 8015692:	9306      	str	r3, [sp, #24]
 8015694:	9b08      	ldr	r3, [sp, #32]
 8015696:	b30b      	cbz	r3, 80156dc <_dtoa_r+0x794>
 8015698:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801569a:	2b00      	cmp	r3, #0
 801569c:	f000 80c6 	beq.w	801582c <_dtoa_r+0x8e4>
 80156a0:	2c00      	cmp	r4, #0
 80156a2:	f000 80c0 	beq.w	8015826 <_dtoa_r+0x8de>
 80156a6:	4629      	mov	r1, r5
 80156a8:	4622      	mov	r2, r4
 80156aa:	4648      	mov	r0, r9
 80156ac:	f000 fd12 	bl	80160d4 <__pow5mult>
 80156b0:	9a02      	ldr	r2, [sp, #8]
 80156b2:	4601      	mov	r1, r0
 80156b4:	4605      	mov	r5, r0
 80156b6:	4648      	mov	r0, r9
 80156b8:	f000 fc6a 	bl	8015f90 <__multiply>
 80156bc:	9902      	ldr	r1, [sp, #8]
 80156be:	4680      	mov	r8, r0
 80156c0:	4648      	mov	r0, r9
 80156c2:	f000 fb51 	bl	8015d68 <_Bfree>
 80156c6:	9b08      	ldr	r3, [sp, #32]
 80156c8:	1b1b      	subs	r3, r3, r4
 80156ca:	9308      	str	r3, [sp, #32]
 80156cc:	f000 80b1 	beq.w	8015832 <_dtoa_r+0x8ea>
 80156d0:	9a08      	ldr	r2, [sp, #32]
 80156d2:	4641      	mov	r1, r8
 80156d4:	4648      	mov	r0, r9
 80156d6:	f000 fcfd 	bl	80160d4 <__pow5mult>
 80156da:	9002      	str	r0, [sp, #8]
 80156dc:	2101      	movs	r1, #1
 80156de:	4648      	mov	r0, r9
 80156e0:	f000 fc40 	bl	8015f64 <__i2b>
 80156e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80156e6:	4604      	mov	r4, r0
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	f000 81d8 	beq.w	8015a9e <_dtoa_r+0xb56>
 80156ee:	461a      	mov	r2, r3
 80156f0:	4601      	mov	r1, r0
 80156f2:	4648      	mov	r0, r9
 80156f4:	f000 fcee 	bl	80160d4 <__pow5mult>
 80156f8:	9b07      	ldr	r3, [sp, #28]
 80156fa:	2b01      	cmp	r3, #1
 80156fc:	4604      	mov	r4, r0
 80156fe:	f300 809f 	bgt.w	8015840 <_dtoa_r+0x8f8>
 8015702:	9b04      	ldr	r3, [sp, #16]
 8015704:	2b00      	cmp	r3, #0
 8015706:	f040 8097 	bne.w	8015838 <_dtoa_r+0x8f0>
 801570a:	9b05      	ldr	r3, [sp, #20]
 801570c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015710:	2b00      	cmp	r3, #0
 8015712:	f040 8093 	bne.w	801583c <_dtoa_r+0x8f4>
 8015716:	9b05      	ldr	r3, [sp, #20]
 8015718:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801571c:	0d1b      	lsrs	r3, r3, #20
 801571e:	051b      	lsls	r3, r3, #20
 8015720:	b133      	cbz	r3, 8015730 <_dtoa_r+0x7e8>
 8015722:	9b00      	ldr	r3, [sp, #0]
 8015724:	3301      	adds	r3, #1
 8015726:	9300      	str	r3, [sp, #0]
 8015728:	9b06      	ldr	r3, [sp, #24]
 801572a:	3301      	adds	r3, #1
 801572c:	9306      	str	r3, [sp, #24]
 801572e:	2301      	movs	r3, #1
 8015730:	9308      	str	r3, [sp, #32]
 8015732:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015734:	2b00      	cmp	r3, #0
 8015736:	f000 81b8 	beq.w	8015aaa <_dtoa_r+0xb62>
 801573a:	6923      	ldr	r3, [r4, #16]
 801573c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015740:	6918      	ldr	r0, [r3, #16]
 8015742:	f000 fbc3 	bl	8015ecc <__hi0bits>
 8015746:	f1c0 0020 	rsb	r0, r0, #32
 801574a:	9b06      	ldr	r3, [sp, #24]
 801574c:	4418      	add	r0, r3
 801574e:	f010 001f 	ands.w	r0, r0, #31
 8015752:	f000 8082 	beq.w	801585a <_dtoa_r+0x912>
 8015756:	f1c0 0320 	rsb	r3, r0, #32
 801575a:	2b04      	cmp	r3, #4
 801575c:	dd73      	ble.n	8015846 <_dtoa_r+0x8fe>
 801575e:	9b00      	ldr	r3, [sp, #0]
 8015760:	f1c0 001c 	rsb	r0, r0, #28
 8015764:	4403      	add	r3, r0
 8015766:	9300      	str	r3, [sp, #0]
 8015768:	9b06      	ldr	r3, [sp, #24]
 801576a:	4403      	add	r3, r0
 801576c:	4406      	add	r6, r0
 801576e:	9306      	str	r3, [sp, #24]
 8015770:	9b00      	ldr	r3, [sp, #0]
 8015772:	2b00      	cmp	r3, #0
 8015774:	dd05      	ble.n	8015782 <_dtoa_r+0x83a>
 8015776:	9902      	ldr	r1, [sp, #8]
 8015778:	461a      	mov	r2, r3
 801577a:	4648      	mov	r0, r9
 801577c:	f000 fd04 	bl	8016188 <__lshift>
 8015780:	9002      	str	r0, [sp, #8]
 8015782:	9b06      	ldr	r3, [sp, #24]
 8015784:	2b00      	cmp	r3, #0
 8015786:	dd05      	ble.n	8015794 <_dtoa_r+0x84c>
 8015788:	4621      	mov	r1, r4
 801578a:	461a      	mov	r2, r3
 801578c:	4648      	mov	r0, r9
 801578e:	f000 fcfb 	bl	8016188 <__lshift>
 8015792:	4604      	mov	r4, r0
 8015794:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015796:	2b00      	cmp	r3, #0
 8015798:	d061      	beq.n	801585e <_dtoa_r+0x916>
 801579a:	9802      	ldr	r0, [sp, #8]
 801579c:	4621      	mov	r1, r4
 801579e:	f000 fd5f 	bl	8016260 <__mcmp>
 80157a2:	2800      	cmp	r0, #0
 80157a4:	da5b      	bge.n	801585e <_dtoa_r+0x916>
 80157a6:	2300      	movs	r3, #0
 80157a8:	9902      	ldr	r1, [sp, #8]
 80157aa:	220a      	movs	r2, #10
 80157ac:	4648      	mov	r0, r9
 80157ae:	f000 fafd 	bl	8015dac <__multadd>
 80157b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80157b4:	9002      	str	r0, [sp, #8]
 80157b6:	f107 38ff 	add.w	r8, r7, #4294967295
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	f000 8177 	beq.w	8015aae <_dtoa_r+0xb66>
 80157c0:	4629      	mov	r1, r5
 80157c2:	2300      	movs	r3, #0
 80157c4:	220a      	movs	r2, #10
 80157c6:	4648      	mov	r0, r9
 80157c8:	f000 faf0 	bl	8015dac <__multadd>
 80157cc:	f1bb 0f00 	cmp.w	fp, #0
 80157d0:	4605      	mov	r5, r0
 80157d2:	dc6f      	bgt.n	80158b4 <_dtoa_r+0x96c>
 80157d4:	9b07      	ldr	r3, [sp, #28]
 80157d6:	2b02      	cmp	r3, #2
 80157d8:	dc49      	bgt.n	801586e <_dtoa_r+0x926>
 80157da:	e06b      	b.n	80158b4 <_dtoa_r+0x96c>
 80157dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80157de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80157e2:	e73c      	b.n	801565e <_dtoa_r+0x716>
 80157e4:	3fe00000 	.word	0x3fe00000
 80157e8:	40240000 	.word	0x40240000
 80157ec:	9b03      	ldr	r3, [sp, #12]
 80157ee:	1e5c      	subs	r4, r3, #1
 80157f0:	9b08      	ldr	r3, [sp, #32]
 80157f2:	42a3      	cmp	r3, r4
 80157f4:	db09      	blt.n	801580a <_dtoa_r+0x8c2>
 80157f6:	1b1c      	subs	r4, r3, r4
 80157f8:	9b03      	ldr	r3, [sp, #12]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	f6bf af30 	bge.w	8015660 <_dtoa_r+0x718>
 8015800:	9b00      	ldr	r3, [sp, #0]
 8015802:	9a03      	ldr	r2, [sp, #12]
 8015804:	1a9e      	subs	r6, r3, r2
 8015806:	2300      	movs	r3, #0
 8015808:	e72b      	b.n	8015662 <_dtoa_r+0x71a>
 801580a:	9b08      	ldr	r3, [sp, #32]
 801580c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801580e:	9408      	str	r4, [sp, #32]
 8015810:	1ae3      	subs	r3, r4, r3
 8015812:	441a      	add	r2, r3
 8015814:	9e00      	ldr	r6, [sp, #0]
 8015816:	9b03      	ldr	r3, [sp, #12]
 8015818:	920d      	str	r2, [sp, #52]	@ 0x34
 801581a:	2400      	movs	r4, #0
 801581c:	e721      	b.n	8015662 <_dtoa_r+0x71a>
 801581e:	9c08      	ldr	r4, [sp, #32]
 8015820:	9e00      	ldr	r6, [sp, #0]
 8015822:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8015824:	e728      	b.n	8015678 <_dtoa_r+0x730>
 8015826:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801582a:	e751      	b.n	80156d0 <_dtoa_r+0x788>
 801582c:	9a08      	ldr	r2, [sp, #32]
 801582e:	9902      	ldr	r1, [sp, #8]
 8015830:	e750      	b.n	80156d4 <_dtoa_r+0x78c>
 8015832:	f8cd 8008 	str.w	r8, [sp, #8]
 8015836:	e751      	b.n	80156dc <_dtoa_r+0x794>
 8015838:	2300      	movs	r3, #0
 801583a:	e779      	b.n	8015730 <_dtoa_r+0x7e8>
 801583c:	9b04      	ldr	r3, [sp, #16]
 801583e:	e777      	b.n	8015730 <_dtoa_r+0x7e8>
 8015840:	2300      	movs	r3, #0
 8015842:	9308      	str	r3, [sp, #32]
 8015844:	e779      	b.n	801573a <_dtoa_r+0x7f2>
 8015846:	d093      	beq.n	8015770 <_dtoa_r+0x828>
 8015848:	9a00      	ldr	r2, [sp, #0]
 801584a:	331c      	adds	r3, #28
 801584c:	441a      	add	r2, r3
 801584e:	9200      	str	r2, [sp, #0]
 8015850:	9a06      	ldr	r2, [sp, #24]
 8015852:	441a      	add	r2, r3
 8015854:	441e      	add	r6, r3
 8015856:	9206      	str	r2, [sp, #24]
 8015858:	e78a      	b.n	8015770 <_dtoa_r+0x828>
 801585a:	4603      	mov	r3, r0
 801585c:	e7f4      	b.n	8015848 <_dtoa_r+0x900>
 801585e:	9b03      	ldr	r3, [sp, #12]
 8015860:	2b00      	cmp	r3, #0
 8015862:	46b8      	mov	r8, r7
 8015864:	dc20      	bgt.n	80158a8 <_dtoa_r+0x960>
 8015866:	469b      	mov	fp, r3
 8015868:	9b07      	ldr	r3, [sp, #28]
 801586a:	2b02      	cmp	r3, #2
 801586c:	dd1e      	ble.n	80158ac <_dtoa_r+0x964>
 801586e:	f1bb 0f00 	cmp.w	fp, #0
 8015872:	f47f adb1 	bne.w	80153d8 <_dtoa_r+0x490>
 8015876:	4621      	mov	r1, r4
 8015878:	465b      	mov	r3, fp
 801587a:	2205      	movs	r2, #5
 801587c:	4648      	mov	r0, r9
 801587e:	f000 fa95 	bl	8015dac <__multadd>
 8015882:	4601      	mov	r1, r0
 8015884:	4604      	mov	r4, r0
 8015886:	9802      	ldr	r0, [sp, #8]
 8015888:	f000 fcea 	bl	8016260 <__mcmp>
 801588c:	2800      	cmp	r0, #0
 801588e:	f77f ada3 	ble.w	80153d8 <_dtoa_r+0x490>
 8015892:	4656      	mov	r6, sl
 8015894:	2331      	movs	r3, #49	@ 0x31
 8015896:	f806 3b01 	strb.w	r3, [r6], #1
 801589a:	f108 0801 	add.w	r8, r8, #1
 801589e:	e59f      	b.n	80153e0 <_dtoa_r+0x498>
 80158a0:	9c03      	ldr	r4, [sp, #12]
 80158a2:	46b8      	mov	r8, r7
 80158a4:	4625      	mov	r5, r4
 80158a6:	e7f4      	b.n	8015892 <_dtoa_r+0x94a>
 80158a8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80158ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	f000 8101 	beq.w	8015ab6 <_dtoa_r+0xb6e>
 80158b4:	2e00      	cmp	r6, #0
 80158b6:	dd05      	ble.n	80158c4 <_dtoa_r+0x97c>
 80158b8:	4629      	mov	r1, r5
 80158ba:	4632      	mov	r2, r6
 80158bc:	4648      	mov	r0, r9
 80158be:	f000 fc63 	bl	8016188 <__lshift>
 80158c2:	4605      	mov	r5, r0
 80158c4:	9b08      	ldr	r3, [sp, #32]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d05c      	beq.n	8015984 <_dtoa_r+0xa3c>
 80158ca:	6869      	ldr	r1, [r5, #4]
 80158cc:	4648      	mov	r0, r9
 80158ce:	f000 fa0b 	bl	8015ce8 <_Balloc>
 80158d2:	4606      	mov	r6, r0
 80158d4:	b928      	cbnz	r0, 80158e2 <_dtoa_r+0x99a>
 80158d6:	4b82      	ldr	r3, [pc, #520]	@ (8015ae0 <_dtoa_r+0xb98>)
 80158d8:	4602      	mov	r2, r0
 80158da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80158de:	f7ff bb4a 	b.w	8014f76 <_dtoa_r+0x2e>
 80158e2:	692a      	ldr	r2, [r5, #16]
 80158e4:	3202      	adds	r2, #2
 80158e6:	0092      	lsls	r2, r2, #2
 80158e8:	f105 010c 	add.w	r1, r5, #12
 80158ec:	300c      	adds	r0, #12
 80158ee:	f001 ff69 	bl	80177c4 <memcpy>
 80158f2:	2201      	movs	r2, #1
 80158f4:	4631      	mov	r1, r6
 80158f6:	4648      	mov	r0, r9
 80158f8:	f000 fc46 	bl	8016188 <__lshift>
 80158fc:	f10a 0301 	add.w	r3, sl, #1
 8015900:	9300      	str	r3, [sp, #0]
 8015902:	eb0a 030b 	add.w	r3, sl, fp
 8015906:	9308      	str	r3, [sp, #32]
 8015908:	9b04      	ldr	r3, [sp, #16]
 801590a:	f003 0301 	and.w	r3, r3, #1
 801590e:	462f      	mov	r7, r5
 8015910:	9306      	str	r3, [sp, #24]
 8015912:	4605      	mov	r5, r0
 8015914:	9b00      	ldr	r3, [sp, #0]
 8015916:	9802      	ldr	r0, [sp, #8]
 8015918:	4621      	mov	r1, r4
 801591a:	f103 3bff 	add.w	fp, r3, #4294967295
 801591e:	f7ff fa89 	bl	8014e34 <quorem>
 8015922:	4603      	mov	r3, r0
 8015924:	3330      	adds	r3, #48	@ 0x30
 8015926:	9003      	str	r0, [sp, #12]
 8015928:	4639      	mov	r1, r7
 801592a:	9802      	ldr	r0, [sp, #8]
 801592c:	9309      	str	r3, [sp, #36]	@ 0x24
 801592e:	f000 fc97 	bl	8016260 <__mcmp>
 8015932:	462a      	mov	r2, r5
 8015934:	9004      	str	r0, [sp, #16]
 8015936:	4621      	mov	r1, r4
 8015938:	4648      	mov	r0, r9
 801593a:	f000 fcad 	bl	8016298 <__mdiff>
 801593e:	68c2      	ldr	r2, [r0, #12]
 8015940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015942:	4606      	mov	r6, r0
 8015944:	bb02      	cbnz	r2, 8015988 <_dtoa_r+0xa40>
 8015946:	4601      	mov	r1, r0
 8015948:	9802      	ldr	r0, [sp, #8]
 801594a:	f000 fc89 	bl	8016260 <__mcmp>
 801594e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015950:	4602      	mov	r2, r0
 8015952:	4631      	mov	r1, r6
 8015954:	4648      	mov	r0, r9
 8015956:	920c      	str	r2, [sp, #48]	@ 0x30
 8015958:	9309      	str	r3, [sp, #36]	@ 0x24
 801595a:	f000 fa05 	bl	8015d68 <_Bfree>
 801595e:	9b07      	ldr	r3, [sp, #28]
 8015960:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015962:	9e00      	ldr	r6, [sp, #0]
 8015964:	ea42 0103 	orr.w	r1, r2, r3
 8015968:	9b06      	ldr	r3, [sp, #24]
 801596a:	4319      	orrs	r1, r3
 801596c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801596e:	d10d      	bne.n	801598c <_dtoa_r+0xa44>
 8015970:	2b39      	cmp	r3, #57	@ 0x39
 8015972:	d027      	beq.n	80159c4 <_dtoa_r+0xa7c>
 8015974:	9a04      	ldr	r2, [sp, #16]
 8015976:	2a00      	cmp	r2, #0
 8015978:	dd01      	ble.n	801597e <_dtoa_r+0xa36>
 801597a:	9b03      	ldr	r3, [sp, #12]
 801597c:	3331      	adds	r3, #49	@ 0x31
 801597e:	f88b 3000 	strb.w	r3, [fp]
 8015982:	e52e      	b.n	80153e2 <_dtoa_r+0x49a>
 8015984:	4628      	mov	r0, r5
 8015986:	e7b9      	b.n	80158fc <_dtoa_r+0x9b4>
 8015988:	2201      	movs	r2, #1
 801598a:	e7e2      	b.n	8015952 <_dtoa_r+0xa0a>
 801598c:	9904      	ldr	r1, [sp, #16]
 801598e:	2900      	cmp	r1, #0
 8015990:	db04      	blt.n	801599c <_dtoa_r+0xa54>
 8015992:	9807      	ldr	r0, [sp, #28]
 8015994:	4301      	orrs	r1, r0
 8015996:	9806      	ldr	r0, [sp, #24]
 8015998:	4301      	orrs	r1, r0
 801599a:	d120      	bne.n	80159de <_dtoa_r+0xa96>
 801599c:	2a00      	cmp	r2, #0
 801599e:	ddee      	ble.n	801597e <_dtoa_r+0xa36>
 80159a0:	9902      	ldr	r1, [sp, #8]
 80159a2:	9300      	str	r3, [sp, #0]
 80159a4:	2201      	movs	r2, #1
 80159a6:	4648      	mov	r0, r9
 80159a8:	f000 fbee 	bl	8016188 <__lshift>
 80159ac:	4621      	mov	r1, r4
 80159ae:	9002      	str	r0, [sp, #8]
 80159b0:	f000 fc56 	bl	8016260 <__mcmp>
 80159b4:	2800      	cmp	r0, #0
 80159b6:	9b00      	ldr	r3, [sp, #0]
 80159b8:	dc02      	bgt.n	80159c0 <_dtoa_r+0xa78>
 80159ba:	d1e0      	bne.n	801597e <_dtoa_r+0xa36>
 80159bc:	07da      	lsls	r2, r3, #31
 80159be:	d5de      	bpl.n	801597e <_dtoa_r+0xa36>
 80159c0:	2b39      	cmp	r3, #57	@ 0x39
 80159c2:	d1da      	bne.n	801597a <_dtoa_r+0xa32>
 80159c4:	2339      	movs	r3, #57	@ 0x39
 80159c6:	f88b 3000 	strb.w	r3, [fp]
 80159ca:	4633      	mov	r3, r6
 80159cc:	461e      	mov	r6, r3
 80159ce:	3b01      	subs	r3, #1
 80159d0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80159d4:	2a39      	cmp	r2, #57	@ 0x39
 80159d6:	d04e      	beq.n	8015a76 <_dtoa_r+0xb2e>
 80159d8:	3201      	adds	r2, #1
 80159da:	701a      	strb	r2, [r3, #0]
 80159dc:	e501      	b.n	80153e2 <_dtoa_r+0x49a>
 80159de:	2a00      	cmp	r2, #0
 80159e0:	dd03      	ble.n	80159ea <_dtoa_r+0xaa2>
 80159e2:	2b39      	cmp	r3, #57	@ 0x39
 80159e4:	d0ee      	beq.n	80159c4 <_dtoa_r+0xa7c>
 80159e6:	3301      	adds	r3, #1
 80159e8:	e7c9      	b.n	801597e <_dtoa_r+0xa36>
 80159ea:	9a00      	ldr	r2, [sp, #0]
 80159ec:	9908      	ldr	r1, [sp, #32]
 80159ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80159f2:	428a      	cmp	r2, r1
 80159f4:	d028      	beq.n	8015a48 <_dtoa_r+0xb00>
 80159f6:	9902      	ldr	r1, [sp, #8]
 80159f8:	2300      	movs	r3, #0
 80159fa:	220a      	movs	r2, #10
 80159fc:	4648      	mov	r0, r9
 80159fe:	f000 f9d5 	bl	8015dac <__multadd>
 8015a02:	42af      	cmp	r7, r5
 8015a04:	9002      	str	r0, [sp, #8]
 8015a06:	f04f 0300 	mov.w	r3, #0
 8015a0a:	f04f 020a 	mov.w	r2, #10
 8015a0e:	4639      	mov	r1, r7
 8015a10:	4648      	mov	r0, r9
 8015a12:	d107      	bne.n	8015a24 <_dtoa_r+0xadc>
 8015a14:	f000 f9ca 	bl	8015dac <__multadd>
 8015a18:	4607      	mov	r7, r0
 8015a1a:	4605      	mov	r5, r0
 8015a1c:	9b00      	ldr	r3, [sp, #0]
 8015a1e:	3301      	adds	r3, #1
 8015a20:	9300      	str	r3, [sp, #0]
 8015a22:	e777      	b.n	8015914 <_dtoa_r+0x9cc>
 8015a24:	f000 f9c2 	bl	8015dac <__multadd>
 8015a28:	4629      	mov	r1, r5
 8015a2a:	4607      	mov	r7, r0
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	220a      	movs	r2, #10
 8015a30:	4648      	mov	r0, r9
 8015a32:	f000 f9bb 	bl	8015dac <__multadd>
 8015a36:	4605      	mov	r5, r0
 8015a38:	e7f0      	b.n	8015a1c <_dtoa_r+0xad4>
 8015a3a:	f1bb 0f00 	cmp.w	fp, #0
 8015a3e:	bfcc      	ite	gt
 8015a40:	465e      	movgt	r6, fp
 8015a42:	2601      	movle	r6, #1
 8015a44:	4456      	add	r6, sl
 8015a46:	2700      	movs	r7, #0
 8015a48:	9902      	ldr	r1, [sp, #8]
 8015a4a:	9300      	str	r3, [sp, #0]
 8015a4c:	2201      	movs	r2, #1
 8015a4e:	4648      	mov	r0, r9
 8015a50:	f000 fb9a 	bl	8016188 <__lshift>
 8015a54:	4621      	mov	r1, r4
 8015a56:	9002      	str	r0, [sp, #8]
 8015a58:	f000 fc02 	bl	8016260 <__mcmp>
 8015a5c:	2800      	cmp	r0, #0
 8015a5e:	dcb4      	bgt.n	80159ca <_dtoa_r+0xa82>
 8015a60:	d102      	bne.n	8015a68 <_dtoa_r+0xb20>
 8015a62:	9b00      	ldr	r3, [sp, #0]
 8015a64:	07db      	lsls	r3, r3, #31
 8015a66:	d4b0      	bmi.n	80159ca <_dtoa_r+0xa82>
 8015a68:	4633      	mov	r3, r6
 8015a6a:	461e      	mov	r6, r3
 8015a6c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015a70:	2a30      	cmp	r2, #48	@ 0x30
 8015a72:	d0fa      	beq.n	8015a6a <_dtoa_r+0xb22>
 8015a74:	e4b5      	b.n	80153e2 <_dtoa_r+0x49a>
 8015a76:	459a      	cmp	sl, r3
 8015a78:	d1a8      	bne.n	80159cc <_dtoa_r+0xa84>
 8015a7a:	2331      	movs	r3, #49	@ 0x31
 8015a7c:	f108 0801 	add.w	r8, r8, #1
 8015a80:	f88a 3000 	strb.w	r3, [sl]
 8015a84:	e4ad      	b.n	80153e2 <_dtoa_r+0x49a>
 8015a86:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015a88:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8015ae4 <_dtoa_r+0xb9c>
 8015a8c:	b11b      	cbz	r3, 8015a96 <_dtoa_r+0xb4e>
 8015a8e:	f10a 0308 	add.w	r3, sl, #8
 8015a92:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8015a94:	6013      	str	r3, [r2, #0]
 8015a96:	4650      	mov	r0, sl
 8015a98:	b017      	add	sp, #92	@ 0x5c
 8015a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a9e:	9b07      	ldr	r3, [sp, #28]
 8015aa0:	2b01      	cmp	r3, #1
 8015aa2:	f77f ae2e 	ble.w	8015702 <_dtoa_r+0x7ba>
 8015aa6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015aa8:	9308      	str	r3, [sp, #32]
 8015aaa:	2001      	movs	r0, #1
 8015aac:	e64d      	b.n	801574a <_dtoa_r+0x802>
 8015aae:	f1bb 0f00 	cmp.w	fp, #0
 8015ab2:	f77f aed9 	ble.w	8015868 <_dtoa_r+0x920>
 8015ab6:	4656      	mov	r6, sl
 8015ab8:	9802      	ldr	r0, [sp, #8]
 8015aba:	4621      	mov	r1, r4
 8015abc:	f7ff f9ba 	bl	8014e34 <quorem>
 8015ac0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8015ac4:	f806 3b01 	strb.w	r3, [r6], #1
 8015ac8:	eba6 020a 	sub.w	r2, r6, sl
 8015acc:	4593      	cmp	fp, r2
 8015ace:	ddb4      	ble.n	8015a3a <_dtoa_r+0xaf2>
 8015ad0:	9902      	ldr	r1, [sp, #8]
 8015ad2:	2300      	movs	r3, #0
 8015ad4:	220a      	movs	r2, #10
 8015ad6:	4648      	mov	r0, r9
 8015ad8:	f000 f968 	bl	8015dac <__multadd>
 8015adc:	9002      	str	r0, [sp, #8]
 8015ade:	e7eb      	b.n	8015ab8 <_dtoa_r+0xb70>
 8015ae0:	080185c5 	.word	0x080185c5
 8015ae4:	08018549 	.word	0x08018549

08015ae8 <_free_r>:
 8015ae8:	b538      	push	{r3, r4, r5, lr}
 8015aea:	4605      	mov	r5, r0
 8015aec:	2900      	cmp	r1, #0
 8015aee:	d041      	beq.n	8015b74 <_free_r+0x8c>
 8015af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015af4:	1f0c      	subs	r4, r1, #4
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	bfb8      	it	lt
 8015afa:	18e4      	addlt	r4, r4, r3
 8015afc:	f000 f8e8 	bl	8015cd0 <__malloc_lock>
 8015b00:	4a1d      	ldr	r2, [pc, #116]	@ (8015b78 <_free_r+0x90>)
 8015b02:	6813      	ldr	r3, [r2, #0]
 8015b04:	b933      	cbnz	r3, 8015b14 <_free_r+0x2c>
 8015b06:	6063      	str	r3, [r4, #4]
 8015b08:	6014      	str	r4, [r2, #0]
 8015b0a:	4628      	mov	r0, r5
 8015b0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015b10:	f000 b8e4 	b.w	8015cdc <__malloc_unlock>
 8015b14:	42a3      	cmp	r3, r4
 8015b16:	d908      	bls.n	8015b2a <_free_r+0x42>
 8015b18:	6820      	ldr	r0, [r4, #0]
 8015b1a:	1821      	adds	r1, r4, r0
 8015b1c:	428b      	cmp	r3, r1
 8015b1e:	bf01      	itttt	eq
 8015b20:	6819      	ldreq	r1, [r3, #0]
 8015b22:	685b      	ldreq	r3, [r3, #4]
 8015b24:	1809      	addeq	r1, r1, r0
 8015b26:	6021      	streq	r1, [r4, #0]
 8015b28:	e7ed      	b.n	8015b06 <_free_r+0x1e>
 8015b2a:	461a      	mov	r2, r3
 8015b2c:	685b      	ldr	r3, [r3, #4]
 8015b2e:	b10b      	cbz	r3, 8015b34 <_free_r+0x4c>
 8015b30:	42a3      	cmp	r3, r4
 8015b32:	d9fa      	bls.n	8015b2a <_free_r+0x42>
 8015b34:	6811      	ldr	r1, [r2, #0]
 8015b36:	1850      	adds	r0, r2, r1
 8015b38:	42a0      	cmp	r0, r4
 8015b3a:	d10b      	bne.n	8015b54 <_free_r+0x6c>
 8015b3c:	6820      	ldr	r0, [r4, #0]
 8015b3e:	4401      	add	r1, r0
 8015b40:	1850      	adds	r0, r2, r1
 8015b42:	4283      	cmp	r3, r0
 8015b44:	6011      	str	r1, [r2, #0]
 8015b46:	d1e0      	bne.n	8015b0a <_free_r+0x22>
 8015b48:	6818      	ldr	r0, [r3, #0]
 8015b4a:	685b      	ldr	r3, [r3, #4]
 8015b4c:	6053      	str	r3, [r2, #4]
 8015b4e:	4408      	add	r0, r1
 8015b50:	6010      	str	r0, [r2, #0]
 8015b52:	e7da      	b.n	8015b0a <_free_r+0x22>
 8015b54:	d902      	bls.n	8015b5c <_free_r+0x74>
 8015b56:	230c      	movs	r3, #12
 8015b58:	602b      	str	r3, [r5, #0]
 8015b5a:	e7d6      	b.n	8015b0a <_free_r+0x22>
 8015b5c:	6820      	ldr	r0, [r4, #0]
 8015b5e:	1821      	adds	r1, r4, r0
 8015b60:	428b      	cmp	r3, r1
 8015b62:	bf04      	itt	eq
 8015b64:	6819      	ldreq	r1, [r3, #0]
 8015b66:	685b      	ldreq	r3, [r3, #4]
 8015b68:	6063      	str	r3, [r4, #4]
 8015b6a:	bf04      	itt	eq
 8015b6c:	1809      	addeq	r1, r1, r0
 8015b6e:	6021      	streq	r1, [r4, #0]
 8015b70:	6054      	str	r4, [r2, #4]
 8015b72:	e7ca      	b.n	8015b0a <_free_r+0x22>
 8015b74:	bd38      	pop	{r3, r4, r5, pc}
 8015b76:	bf00      	nop
 8015b78:	200003dc 	.word	0x200003dc

08015b7c <malloc>:
 8015b7c:	4b02      	ldr	r3, [pc, #8]	@ (8015b88 <malloc+0xc>)
 8015b7e:	4601      	mov	r1, r0
 8015b80:	6818      	ldr	r0, [r3, #0]
 8015b82:	f000 b825 	b.w	8015bd0 <_malloc_r>
 8015b86:	bf00      	nop
 8015b88:	20000018 	.word	0x20000018

08015b8c <sbrk_aligned>:
 8015b8c:	b570      	push	{r4, r5, r6, lr}
 8015b8e:	4e0f      	ldr	r6, [pc, #60]	@ (8015bcc <sbrk_aligned+0x40>)
 8015b90:	460c      	mov	r4, r1
 8015b92:	6831      	ldr	r1, [r6, #0]
 8015b94:	4605      	mov	r5, r0
 8015b96:	b911      	cbnz	r1, 8015b9e <sbrk_aligned+0x12>
 8015b98:	f001 fe04 	bl	80177a4 <_sbrk_r>
 8015b9c:	6030      	str	r0, [r6, #0]
 8015b9e:	4621      	mov	r1, r4
 8015ba0:	4628      	mov	r0, r5
 8015ba2:	f001 fdff 	bl	80177a4 <_sbrk_r>
 8015ba6:	1c43      	adds	r3, r0, #1
 8015ba8:	d103      	bne.n	8015bb2 <sbrk_aligned+0x26>
 8015baa:	f04f 34ff 	mov.w	r4, #4294967295
 8015bae:	4620      	mov	r0, r4
 8015bb0:	bd70      	pop	{r4, r5, r6, pc}
 8015bb2:	1cc4      	adds	r4, r0, #3
 8015bb4:	f024 0403 	bic.w	r4, r4, #3
 8015bb8:	42a0      	cmp	r0, r4
 8015bba:	d0f8      	beq.n	8015bae <sbrk_aligned+0x22>
 8015bbc:	1a21      	subs	r1, r4, r0
 8015bbe:	4628      	mov	r0, r5
 8015bc0:	f001 fdf0 	bl	80177a4 <_sbrk_r>
 8015bc4:	3001      	adds	r0, #1
 8015bc6:	d1f2      	bne.n	8015bae <sbrk_aligned+0x22>
 8015bc8:	e7ef      	b.n	8015baa <sbrk_aligned+0x1e>
 8015bca:	bf00      	nop
 8015bcc:	200003d8 	.word	0x200003d8

08015bd0 <_malloc_r>:
 8015bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015bd4:	1ccd      	adds	r5, r1, #3
 8015bd6:	f025 0503 	bic.w	r5, r5, #3
 8015bda:	3508      	adds	r5, #8
 8015bdc:	2d0c      	cmp	r5, #12
 8015bde:	bf38      	it	cc
 8015be0:	250c      	movcc	r5, #12
 8015be2:	2d00      	cmp	r5, #0
 8015be4:	4606      	mov	r6, r0
 8015be6:	db01      	blt.n	8015bec <_malloc_r+0x1c>
 8015be8:	42a9      	cmp	r1, r5
 8015bea:	d904      	bls.n	8015bf6 <_malloc_r+0x26>
 8015bec:	230c      	movs	r3, #12
 8015bee:	6033      	str	r3, [r6, #0]
 8015bf0:	2000      	movs	r0, #0
 8015bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015bf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015ccc <_malloc_r+0xfc>
 8015bfa:	f000 f869 	bl	8015cd0 <__malloc_lock>
 8015bfe:	f8d8 3000 	ldr.w	r3, [r8]
 8015c02:	461c      	mov	r4, r3
 8015c04:	bb44      	cbnz	r4, 8015c58 <_malloc_r+0x88>
 8015c06:	4629      	mov	r1, r5
 8015c08:	4630      	mov	r0, r6
 8015c0a:	f7ff ffbf 	bl	8015b8c <sbrk_aligned>
 8015c0e:	1c43      	adds	r3, r0, #1
 8015c10:	4604      	mov	r4, r0
 8015c12:	d158      	bne.n	8015cc6 <_malloc_r+0xf6>
 8015c14:	f8d8 4000 	ldr.w	r4, [r8]
 8015c18:	4627      	mov	r7, r4
 8015c1a:	2f00      	cmp	r7, #0
 8015c1c:	d143      	bne.n	8015ca6 <_malloc_r+0xd6>
 8015c1e:	2c00      	cmp	r4, #0
 8015c20:	d04b      	beq.n	8015cba <_malloc_r+0xea>
 8015c22:	6823      	ldr	r3, [r4, #0]
 8015c24:	4639      	mov	r1, r7
 8015c26:	4630      	mov	r0, r6
 8015c28:	eb04 0903 	add.w	r9, r4, r3
 8015c2c:	f001 fdba 	bl	80177a4 <_sbrk_r>
 8015c30:	4581      	cmp	r9, r0
 8015c32:	d142      	bne.n	8015cba <_malloc_r+0xea>
 8015c34:	6821      	ldr	r1, [r4, #0]
 8015c36:	1a6d      	subs	r5, r5, r1
 8015c38:	4629      	mov	r1, r5
 8015c3a:	4630      	mov	r0, r6
 8015c3c:	f7ff ffa6 	bl	8015b8c <sbrk_aligned>
 8015c40:	3001      	adds	r0, #1
 8015c42:	d03a      	beq.n	8015cba <_malloc_r+0xea>
 8015c44:	6823      	ldr	r3, [r4, #0]
 8015c46:	442b      	add	r3, r5
 8015c48:	6023      	str	r3, [r4, #0]
 8015c4a:	f8d8 3000 	ldr.w	r3, [r8]
 8015c4e:	685a      	ldr	r2, [r3, #4]
 8015c50:	bb62      	cbnz	r2, 8015cac <_malloc_r+0xdc>
 8015c52:	f8c8 7000 	str.w	r7, [r8]
 8015c56:	e00f      	b.n	8015c78 <_malloc_r+0xa8>
 8015c58:	6822      	ldr	r2, [r4, #0]
 8015c5a:	1b52      	subs	r2, r2, r5
 8015c5c:	d420      	bmi.n	8015ca0 <_malloc_r+0xd0>
 8015c5e:	2a0b      	cmp	r2, #11
 8015c60:	d917      	bls.n	8015c92 <_malloc_r+0xc2>
 8015c62:	1961      	adds	r1, r4, r5
 8015c64:	42a3      	cmp	r3, r4
 8015c66:	6025      	str	r5, [r4, #0]
 8015c68:	bf18      	it	ne
 8015c6a:	6059      	strne	r1, [r3, #4]
 8015c6c:	6863      	ldr	r3, [r4, #4]
 8015c6e:	bf08      	it	eq
 8015c70:	f8c8 1000 	streq.w	r1, [r8]
 8015c74:	5162      	str	r2, [r4, r5]
 8015c76:	604b      	str	r3, [r1, #4]
 8015c78:	4630      	mov	r0, r6
 8015c7a:	f000 f82f 	bl	8015cdc <__malloc_unlock>
 8015c7e:	f104 000b 	add.w	r0, r4, #11
 8015c82:	1d23      	adds	r3, r4, #4
 8015c84:	f020 0007 	bic.w	r0, r0, #7
 8015c88:	1ac2      	subs	r2, r0, r3
 8015c8a:	bf1c      	itt	ne
 8015c8c:	1a1b      	subne	r3, r3, r0
 8015c8e:	50a3      	strne	r3, [r4, r2]
 8015c90:	e7af      	b.n	8015bf2 <_malloc_r+0x22>
 8015c92:	6862      	ldr	r2, [r4, #4]
 8015c94:	42a3      	cmp	r3, r4
 8015c96:	bf0c      	ite	eq
 8015c98:	f8c8 2000 	streq.w	r2, [r8]
 8015c9c:	605a      	strne	r2, [r3, #4]
 8015c9e:	e7eb      	b.n	8015c78 <_malloc_r+0xa8>
 8015ca0:	4623      	mov	r3, r4
 8015ca2:	6864      	ldr	r4, [r4, #4]
 8015ca4:	e7ae      	b.n	8015c04 <_malloc_r+0x34>
 8015ca6:	463c      	mov	r4, r7
 8015ca8:	687f      	ldr	r7, [r7, #4]
 8015caa:	e7b6      	b.n	8015c1a <_malloc_r+0x4a>
 8015cac:	461a      	mov	r2, r3
 8015cae:	685b      	ldr	r3, [r3, #4]
 8015cb0:	42a3      	cmp	r3, r4
 8015cb2:	d1fb      	bne.n	8015cac <_malloc_r+0xdc>
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	6053      	str	r3, [r2, #4]
 8015cb8:	e7de      	b.n	8015c78 <_malloc_r+0xa8>
 8015cba:	230c      	movs	r3, #12
 8015cbc:	6033      	str	r3, [r6, #0]
 8015cbe:	4630      	mov	r0, r6
 8015cc0:	f000 f80c 	bl	8015cdc <__malloc_unlock>
 8015cc4:	e794      	b.n	8015bf0 <_malloc_r+0x20>
 8015cc6:	6005      	str	r5, [r0, #0]
 8015cc8:	e7d6      	b.n	8015c78 <_malloc_r+0xa8>
 8015cca:	bf00      	nop
 8015ccc:	200003dc 	.word	0x200003dc

08015cd0 <__malloc_lock>:
 8015cd0:	4801      	ldr	r0, [pc, #4]	@ (8015cd8 <__malloc_lock+0x8>)
 8015cd2:	f7ff b8a6 	b.w	8014e22 <__retarget_lock_acquire_recursive>
 8015cd6:	bf00      	nop
 8015cd8:	200003d4 	.word	0x200003d4

08015cdc <__malloc_unlock>:
 8015cdc:	4801      	ldr	r0, [pc, #4]	@ (8015ce4 <__malloc_unlock+0x8>)
 8015cde:	f7ff b8a1 	b.w	8014e24 <__retarget_lock_release_recursive>
 8015ce2:	bf00      	nop
 8015ce4:	200003d4 	.word	0x200003d4

08015ce8 <_Balloc>:
 8015ce8:	b570      	push	{r4, r5, r6, lr}
 8015cea:	69c6      	ldr	r6, [r0, #28]
 8015cec:	4604      	mov	r4, r0
 8015cee:	460d      	mov	r5, r1
 8015cf0:	b976      	cbnz	r6, 8015d10 <_Balloc+0x28>
 8015cf2:	2010      	movs	r0, #16
 8015cf4:	f7ff ff42 	bl	8015b7c <malloc>
 8015cf8:	4602      	mov	r2, r0
 8015cfa:	61e0      	str	r0, [r4, #28]
 8015cfc:	b920      	cbnz	r0, 8015d08 <_Balloc+0x20>
 8015cfe:	4b18      	ldr	r3, [pc, #96]	@ (8015d60 <_Balloc+0x78>)
 8015d00:	4818      	ldr	r0, [pc, #96]	@ (8015d64 <_Balloc+0x7c>)
 8015d02:	216b      	movs	r1, #107	@ 0x6b
 8015d04:	f001 fd74 	bl	80177f0 <__assert_func>
 8015d08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015d0c:	6006      	str	r6, [r0, #0]
 8015d0e:	60c6      	str	r6, [r0, #12]
 8015d10:	69e6      	ldr	r6, [r4, #28]
 8015d12:	68f3      	ldr	r3, [r6, #12]
 8015d14:	b183      	cbz	r3, 8015d38 <_Balloc+0x50>
 8015d16:	69e3      	ldr	r3, [r4, #28]
 8015d18:	68db      	ldr	r3, [r3, #12]
 8015d1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015d1e:	b9b8      	cbnz	r0, 8015d50 <_Balloc+0x68>
 8015d20:	2101      	movs	r1, #1
 8015d22:	fa01 f605 	lsl.w	r6, r1, r5
 8015d26:	1d72      	adds	r2, r6, #5
 8015d28:	0092      	lsls	r2, r2, #2
 8015d2a:	4620      	mov	r0, r4
 8015d2c:	f001 fd7e 	bl	801782c <_calloc_r>
 8015d30:	b160      	cbz	r0, 8015d4c <_Balloc+0x64>
 8015d32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015d36:	e00e      	b.n	8015d56 <_Balloc+0x6e>
 8015d38:	2221      	movs	r2, #33	@ 0x21
 8015d3a:	2104      	movs	r1, #4
 8015d3c:	4620      	mov	r0, r4
 8015d3e:	f001 fd75 	bl	801782c <_calloc_r>
 8015d42:	69e3      	ldr	r3, [r4, #28]
 8015d44:	60f0      	str	r0, [r6, #12]
 8015d46:	68db      	ldr	r3, [r3, #12]
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d1e4      	bne.n	8015d16 <_Balloc+0x2e>
 8015d4c:	2000      	movs	r0, #0
 8015d4e:	bd70      	pop	{r4, r5, r6, pc}
 8015d50:	6802      	ldr	r2, [r0, #0]
 8015d52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015d56:	2300      	movs	r3, #0
 8015d58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015d5c:	e7f7      	b.n	8015d4e <_Balloc+0x66>
 8015d5e:	bf00      	nop
 8015d60:	08018556 	.word	0x08018556
 8015d64:	080185d6 	.word	0x080185d6

08015d68 <_Bfree>:
 8015d68:	b570      	push	{r4, r5, r6, lr}
 8015d6a:	69c6      	ldr	r6, [r0, #28]
 8015d6c:	4605      	mov	r5, r0
 8015d6e:	460c      	mov	r4, r1
 8015d70:	b976      	cbnz	r6, 8015d90 <_Bfree+0x28>
 8015d72:	2010      	movs	r0, #16
 8015d74:	f7ff ff02 	bl	8015b7c <malloc>
 8015d78:	4602      	mov	r2, r0
 8015d7a:	61e8      	str	r0, [r5, #28]
 8015d7c:	b920      	cbnz	r0, 8015d88 <_Bfree+0x20>
 8015d7e:	4b09      	ldr	r3, [pc, #36]	@ (8015da4 <_Bfree+0x3c>)
 8015d80:	4809      	ldr	r0, [pc, #36]	@ (8015da8 <_Bfree+0x40>)
 8015d82:	218f      	movs	r1, #143	@ 0x8f
 8015d84:	f001 fd34 	bl	80177f0 <__assert_func>
 8015d88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015d8c:	6006      	str	r6, [r0, #0]
 8015d8e:	60c6      	str	r6, [r0, #12]
 8015d90:	b13c      	cbz	r4, 8015da2 <_Bfree+0x3a>
 8015d92:	69eb      	ldr	r3, [r5, #28]
 8015d94:	6862      	ldr	r2, [r4, #4]
 8015d96:	68db      	ldr	r3, [r3, #12]
 8015d98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015d9c:	6021      	str	r1, [r4, #0]
 8015d9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015da2:	bd70      	pop	{r4, r5, r6, pc}
 8015da4:	08018556 	.word	0x08018556
 8015da8:	080185d6 	.word	0x080185d6

08015dac <__multadd>:
 8015dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015db0:	690d      	ldr	r5, [r1, #16]
 8015db2:	4607      	mov	r7, r0
 8015db4:	460c      	mov	r4, r1
 8015db6:	461e      	mov	r6, r3
 8015db8:	f101 0c14 	add.w	ip, r1, #20
 8015dbc:	2000      	movs	r0, #0
 8015dbe:	f8dc 3000 	ldr.w	r3, [ip]
 8015dc2:	b299      	uxth	r1, r3
 8015dc4:	fb02 6101 	mla	r1, r2, r1, r6
 8015dc8:	0c1e      	lsrs	r6, r3, #16
 8015dca:	0c0b      	lsrs	r3, r1, #16
 8015dcc:	fb02 3306 	mla	r3, r2, r6, r3
 8015dd0:	b289      	uxth	r1, r1
 8015dd2:	3001      	adds	r0, #1
 8015dd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015dd8:	4285      	cmp	r5, r0
 8015dda:	f84c 1b04 	str.w	r1, [ip], #4
 8015dde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015de2:	dcec      	bgt.n	8015dbe <__multadd+0x12>
 8015de4:	b30e      	cbz	r6, 8015e2a <__multadd+0x7e>
 8015de6:	68a3      	ldr	r3, [r4, #8]
 8015de8:	42ab      	cmp	r3, r5
 8015dea:	dc19      	bgt.n	8015e20 <__multadd+0x74>
 8015dec:	6861      	ldr	r1, [r4, #4]
 8015dee:	4638      	mov	r0, r7
 8015df0:	3101      	adds	r1, #1
 8015df2:	f7ff ff79 	bl	8015ce8 <_Balloc>
 8015df6:	4680      	mov	r8, r0
 8015df8:	b928      	cbnz	r0, 8015e06 <__multadd+0x5a>
 8015dfa:	4602      	mov	r2, r0
 8015dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8015e30 <__multadd+0x84>)
 8015dfe:	480d      	ldr	r0, [pc, #52]	@ (8015e34 <__multadd+0x88>)
 8015e00:	21ba      	movs	r1, #186	@ 0xba
 8015e02:	f001 fcf5 	bl	80177f0 <__assert_func>
 8015e06:	6922      	ldr	r2, [r4, #16]
 8015e08:	3202      	adds	r2, #2
 8015e0a:	f104 010c 	add.w	r1, r4, #12
 8015e0e:	0092      	lsls	r2, r2, #2
 8015e10:	300c      	adds	r0, #12
 8015e12:	f001 fcd7 	bl	80177c4 <memcpy>
 8015e16:	4621      	mov	r1, r4
 8015e18:	4638      	mov	r0, r7
 8015e1a:	f7ff ffa5 	bl	8015d68 <_Bfree>
 8015e1e:	4644      	mov	r4, r8
 8015e20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015e24:	3501      	adds	r5, #1
 8015e26:	615e      	str	r6, [r3, #20]
 8015e28:	6125      	str	r5, [r4, #16]
 8015e2a:	4620      	mov	r0, r4
 8015e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e30:	080185c5 	.word	0x080185c5
 8015e34:	080185d6 	.word	0x080185d6

08015e38 <__s2b>:
 8015e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e3c:	460c      	mov	r4, r1
 8015e3e:	4615      	mov	r5, r2
 8015e40:	461f      	mov	r7, r3
 8015e42:	2209      	movs	r2, #9
 8015e44:	3308      	adds	r3, #8
 8015e46:	4606      	mov	r6, r0
 8015e48:	fb93 f3f2 	sdiv	r3, r3, r2
 8015e4c:	2100      	movs	r1, #0
 8015e4e:	2201      	movs	r2, #1
 8015e50:	429a      	cmp	r2, r3
 8015e52:	db09      	blt.n	8015e68 <__s2b+0x30>
 8015e54:	4630      	mov	r0, r6
 8015e56:	f7ff ff47 	bl	8015ce8 <_Balloc>
 8015e5a:	b940      	cbnz	r0, 8015e6e <__s2b+0x36>
 8015e5c:	4602      	mov	r2, r0
 8015e5e:	4b19      	ldr	r3, [pc, #100]	@ (8015ec4 <__s2b+0x8c>)
 8015e60:	4819      	ldr	r0, [pc, #100]	@ (8015ec8 <__s2b+0x90>)
 8015e62:	21d3      	movs	r1, #211	@ 0xd3
 8015e64:	f001 fcc4 	bl	80177f0 <__assert_func>
 8015e68:	0052      	lsls	r2, r2, #1
 8015e6a:	3101      	adds	r1, #1
 8015e6c:	e7f0      	b.n	8015e50 <__s2b+0x18>
 8015e6e:	9b08      	ldr	r3, [sp, #32]
 8015e70:	6143      	str	r3, [r0, #20]
 8015e72:	2d09      	cmp	r5, #9
 8015e74:	f04f 0301 	mov.w	r3, #1
 8015e78:	6103      	str	r3, [r0, #16]
 8015e7a:	dd16      	ble.n	8015eaa <__s2b+0x72>
 8015e7c:	f104 0909 	add.w	r9, r4, #9
 8015e80:	46c8      	mov	r8, r9
 8015e82:	442c      	add	r4, r5
 8015e84:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015e88:	4601      	mov	r1, r0
 8015e8a:	3b30      	subs	r3, #48	@ 0x30
 8015e8c:	220a      	movs	r2, #10
 8015e8e:	4630      	mov	r0, r6
 8015e90:	f7ff ff8c 	bl	8015dac <__multadd>
 8015e94:	45a0      	cmp	r8, r4
 8015e96:	d1f5      	bne.n	8015e84 <__s2b+0x4c>
 8015e98:	f1a5 0408 	sub.w	r4, r5, #8
 8015e9c:	444c      	add	r4, r9
 8015e9e:	1b2d      	subs	r5, r5, r4
 8015ea0:	1963      	adds	r3, r4, r5
 8015ea2:	42bb      	cmp	r3, r7
 8015ea4:	db04      	blt.n	8015eb0 <__s2b+0x78>
 8015ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015eaa:	340a      	adds	r4, #10
 8015eac:	2509      	movs	r5, #9
 8015eae:	e7f6      	b.n	8015e9e <__s2b+0x66>
 8015eb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015eb4:	4601      	mov	r1, r0
 8015eb6:	3b30      	subs	r3, #48	@ 0x30
 8015eb8:	220a      	movs	r2, #10
 8015eba:	4630      	mov	r0, r6
 8015ebc:	f7ff ff76 	bl	8015dac <__multadd>
 8015ec0:	e7ee      	b.n	8015ea0 <__s2b+0x68>
 8015ec2:	bf00      	nop
 8015ec4:	080185c5 	.word	0x080185c5
 8015ec8:	080185d6 	.word	0x080185d6

08015ecc <__hi0bits>:
 8015ecc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015ed0:	4603      	mov	r3, r0
 8015ed2:	bf36      	itet	cc
 8015ed4:	0403      	lslcc	r3, r0, #16
 8015ed6:	2000      	movcs	r0, #0
 8015ed8:	2010      	movcc	r0, #16
 8015eda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015ede:	bf3c      	itt	cc
 8015ee0:	021b      	lslcc	r3, r3, #8
 8015ee2:	3008      	addcc	r0, #8
 8015ee4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015ee8:	bf3c      	itt	cc
 8015eea:	011b      	lslcc	r3, r3, #4
 8015eec:	3004      	addcc	r0, #4
 8015eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015ef2:	bf3c      	itt	cc
 8015ef4:	009b      	lslcc	r3, r3, #2
 8015ef6:	3002      	addcc	r0, #2
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	db05      	blt.n	8015f08 <__hi0bits+0x3c>
 8015efc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015f00:	f100 0001 	add.w	r0, r0, #1
 8015f04:	bf08      	it	eq
 8015f06:	2020      	moveq	r0, #32
 8015f08:	4770      	bx	lr

08015f0a <__lo0bits>:
 8015f0a:	6803      	ldr	r3, [r0, #0]
 8015f0c:	4602      	mov	r2, r0
 8015f0e:	f013 0007 	ands.w	r0, r3, #7
 8015f12:	d00b      	beq.n	8015f2c <__lo0bits+0x22>
 8015f14:	07d9      	lsls	r1, r3, #31
 8015f16:	d421      	bmi.n	8015f5c <__lo0bits+0x52>
 8015f18:	0798      	lsls	r0, r3, #30
 8015f1a:	bf49      	itett	mi
 8015f1c:	085b      	lsrmi	r3, r3, #1
 8015f1e:	089b      	lsrpl	r3, r3, #2
 8015f20:	2001      	movmi	r0, #1
 8015f22:	6013      	strmi	r3, [r2, #0]
 8015f24:	bf5c      	itt	pl
 8015f26:	6013      	strpl	r3, [r2, #0]
 8015f28:	2002      	movpl	r0, #2
 8015f2a:	4770      	bx	lr
 8015f2c:	b299      	uxth	r1, r3
 8015f2e:	b909      	cbnz	r1, 8015f34 <__lo0bits+0x2a>
 8015f30:	0c1b      	lsrs	r3, r3, #16
 8015f32:	2010      	movs	r0, #16
 8015f34:	b2d9      	uxtb	r1, r3
 8015f36:	b909      	cbnz	r1, 8015f3c <__lo0bits+0x32>
 8015f38:	3008      	adds	r0, #8
 8015f3a:	0a1b      	lsrs	r3, r3, #8
 8015f3c:	0719      	lsls	r1, r3, #28
 8015f3e:	bf04      	itt	eq
 8015f40:	091b      	lsreq	r3, r3, #4
 8015f42:	3004      	addeq	r0, #4
 8015f44:	0799      	lsls	r1, r3, #30
 8015f46:	bf04      	itt	eq
 8015f48:	089b      	lsreq	r3, r3, #2
 8015f4a:	3002      	addeq	r0, #2
 8015f4c:	07d9      	lsls	r1, r3, #31
 8015f4e:	d403      	bmi.n	8015f58 <__lo0bits+0x4e>
 8015f50:	085b      	lsrs	r3, r3, #1
 8015f52:	f100 0001 	add.w	r0, r0, #1
 8015f56:	d003      	beq.n	8015f60 <__lo0bits+0x56>
 8015f58:	6013      	str	r3, [r2, #0]
 8015f5a:	4770      	bx	lr
 8015f5c:	2000      	movs	r0, #0
 8015f5e:	4770      	bx	lr
 8015f60:	2020      	movs	r0, #32
 8015f62:	4770      	bx	lr

08015f64 <__i2b>:
 8015f64:	b510      	push	{r4, lr}
 8015f66:	460c      	mov	r4, r1
 8015f68:	2101      	movs	r1, #1
 8015f6a:	f7ff febd 	bl	8015ce8 <_Balloc>
 8015f6e:	4602      	mov	r2, r0
 8015f70:	b928      	cbnz	r0, 8015f7e <__i2b+0x1a>
 8015f72:	4b05      	ldr	r3, [pc, #20]	@ (8015f88 <__i2b+0x24>)
 8015f74:	4805      	ldr	r0, [pc, #20]	@ (8015f8c <__i2b+0x28>)
 8015f76:	f240 1145 	movw	r1, #325	@ 0x145
 8015f7a:	f001 fc39 	bl	80177f0 <__assert_func>
 8015f7e:	2301      	movs	r3, #1
 8015f80:	6144      	str	r4, [r0, #20]
 8015f82:	6103      	str	r3, [r0, #16]
 8015f84:	bd10      	pop	{r4, pc}
 8015f86:	bf00      	nop
 8015f88:	080185c5 	.word	0x080185c5
 8015f8c:	080185d6 	.word	0x080185d6

08015f90 <__multiply>:
 8015f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f94:	4617      	mov	r7, r2
 8015f96:	690a      	ldr	r2, [r1, #16]
 8015f98:	693b      	ldr	r3, [r7, #16]
 8015f9a:	429a      	cmp	r2, r3
 8015f9c:	bfa8      	it	ge
 8015f9e:	463b      	movge	r3, r7
 8015fa0:	4689      	mov	r9, r1
 8015fa2:	bfa4      	itt	ge
 8015fa4:	460f      	movge	r7, r1
 8015fa6:	4699      	movge	r9, r3
 8015fa8:	693d      	ldr	r5, [r7, #16]
 8015faa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015fae:	68bb      	ldr	r3, [r7, #8]
 8015fb0:	6879      	ldr	r1, [r7, #4]
 8015fb2:	eb05 060a 	add.w	r6, r5, sl
 8015fb6:	42b3      	cmp	r3, r6
 8015fb8:	b085      	sub	sp, #20
 8015fba:	bfb8      	it	lt
 8015fbc:	3101      	addlt	r1, #1
 8015fbe:	f7ff fe93 	bl	8015ce8 <_Balloc>
 8015fc2:	b930      	cbnz	r0, 8015fd2 <__multiply+0x42>
 8015fc4:	4602      	mov	r2, r0
 8015fc6:	4b41      	ldr	r3, [pc, #260]	@ (80160cc <__multiply+0x13c>)
 8015fc8:	4841      	ldr	r0, [pc, #260]	@ (80160d0 <__multiply+0x140>)
 8015fca:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015fce:	f001 fc0f 	bl	80177f0 <__assert_func>
 8015fd2:	f100 0414 	add.w	r4, r0, #20
 8015fd6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8015fda:	4623      	mov	r3, r4
 8015fdc:	2200      	movs	r2, #0
 8015fde:	4573      	cmp	r3, lr
 8015fe0:	d320      	bcc.n	8016024 <__multiply+0x94>
 8015fe2:	f107 0814 	add.w	r8, r7, #20
 8015fe6:	f109 0114 	add.w	r1, r9, #20
 8015fea:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8015fee:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8015ff2:	9302      	str	r3, [sp, #8]
 8015ff4:	1beb      	subs	r3, r5, r7
 8015ff6:	3b15      	subs	r3, #21
 8015ff8:	f023 0303 	bic.w	r3, r3, #3
 8015ffc:	3304      	adds	r3, #4
 8015ffe:	3715      	adds	r7, #21
 8016000:	42bd      	cmp	r5, r7
 8016002:	bf38      	it	cc
 8016004:	2304      	movcc	r3, #4
 8016006:	9301      	str	r3, [sp, #4]
 8016008:	9b02      	ldr	r3, [sp, #8]
 801600a:	9103      	str	r1, [sp, #12]
 801600c:	428b      	cmp	r3, r1
 801600e:	d80c      	bhi.n	801602a <__multiply+0x9a>
 8016010:	2e00      	cmp	r6, #0
 8016012:	dd03      	ble.n	801601c <__multiply+0x8c>
 8016014:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016018:	2b00      	cmp	r3, #0
 801601a:	d055      	beq.n	80160c8 <__multiply+0x138>
 801601c:	6106      	str	r6, [r0, #16]
 801601e:	b005      	add	sp, #20
 8016020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016024:	f843 2b04 	str.w	r2, [r3], #4
 8016028:	e7d9      	b.n	8015fde <__multiply+0x4e>
 801602a:	f8b1 a000 	ldrh.w	sl, [r1]
 801602e:	f1ba 0f00 	cmp.w	sl, #0
 8016032:	d01f      	beq.n	8016074 <__multiply+0xe4>
 8016034:	46c4      	mov	ip, r8
 8016036:	46a1      	mov	r9, r4
 8016038:	2700      	movs	r7, #0
 801603a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801603e:	f8d9 3000 	ldr.w	r3, [r9]
 8016042:	fa1f fb82 	uxth.w	fp, r2
 8016046:	b29b      	uxth	r3, r3
 8016048:	fb0a 330b 	mla	r3, sl, fp, r3
 801604c:	443b      	add	r3, r7
 801604e:	f8d9 7000 	ldr.w	r7, [r9]
 8016052:	0c12      	lsrs	r2, r2, #16
 8016054:	0c3f      	lsrs	r7, r7, #16
 8016056:	fb0a 7202 	mla	r2, sl, r2, r7
 801605a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801605e:	b29b      	uxth	r3, r3
 8016060:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016064:	4565      	cmp	r5, ip
 8016066:	f849 3b04 	str.w	r3, [r9], #4
 801606a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801606e:	d8e4      	bhi.n	801603a <__multiply+0xaa>
 8016070:	9b01      	ldr	r3, [sp, #4]
 8016072:	50e7      	str	r7, [r4, r3]
 8016074:	9b03      	ldr	r3, [sp, #12]
 8016076:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801607a:	3104      	adds	r1, #4
 801607c:	f1b9 0f00 	cmp.w	r9, #0
 8016080:	d020      	beq.n	80160c4 <__multiply+0x134>
 8016082:	6823      	ldr	r3, [r4, #0]
 8016084:	4647      	mov	r7, r8
 8016086:	46a4      	mov	ip, r4
 8016088:	f04f 0a00 	mov.w	sl, #0
 801608c:	f8b7 b000 	ldrh.w	fp, [r7]
 8016090:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8016094:	fb09 220b 	mla	r2, r9, fp, r2
 8016098:	4452      	add	r2, sl
 801609a:	b29b      	uxth	r3, r3
 801609c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80160a0:	f84c 3b04 	str.w	r3, [ip], #4
 80160a4:	f857 3b04 	ldr.w	r3, [r7], #4
 80160a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80160ac:	f8bc 3000 	ldrh.w	r3, [ip]
 80160b0:	fb09 330a 	mla	r3, r9, sl, r3
 80160b4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80160b8:	42bd      	cmp	r5, r7
 80160ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80160be:	d8e5      	bhi.n	801608c <__multiply+0xfc>
 80160c0:	9a01      	ldr	r2, [sp, #4]
 80160c2:	50a3      	str	r3, [r4, r2]
 80160c4:	3404      	adds	r4, #4
 80160c6:	e79f      	b.n	8016008 <__multiply+0x78>
 80160c8:	3e01      	subs	r6, #1
 80160ca:	e7a1      	b.n	8016010 <__multiply+0x80>
 80160cc:	080185c5 	.word	0x080185c5
 80160d0:	080185d6 	.word	0x080185d6

080160d4 <__pow5mult>:
 80160d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160d8:	4615      	mov	r5, r2
 80160da:	f012 0203 	ands.w	r2, r2, #3
 80160de:	4607      	mov	r7, r0
 80160e0:	460e      	mov	r6, r1
 80160e2:	d007      	beq.n	80160f4 <__pow5mult+0x20>
 80160e4:	4c25      	ldr	r4, [pc, #148]	@ (801617c <__pow5mult+0xa8>)
 80160e6:	3a01      	subs	r2, #1
 80160e8:	2300      	movs	r3, #0
 80160ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80160ee:	f7ff fe5d 	bl	8015dac <__multadd>
 80160f2:	4606      	mov	r6, r0
 80160f4:	10ad      	asrs	r5, r5, #2
 80160f6:	d03d      	beq.n	8016174 <__pow5mult+0xa0>
 80160f8:	69fc      	ldr	r4, [r7, #28]
 80160fa:	b97c      	cbnz	r4, 801611c <__pow5mult+0x48>
 80160fc:	2010      	movs	r0, #16
 80160fe:	f7ff fd3d 	bl	8015b7c <malloc>
 8016102:	4602      	mov	r2, r0
 8016104:	61f8      	str	r0, [r7, #28]
 8016106:	b928      	cbnz	r0, 8016114 <__pow5mult+0x40>
 8016108:	4b1d      	ldr	r3, [pc, #116]	@ (8016180 <__pow5mult+0xac>)
 801610a:	481e      	ldr	r0, [pc, #120]	@ (8016184 <__pow5mult+0xb0>)
 801610c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8016110:	f001 fb6e 	bl	80177f0 <__assert_func>
 8016114:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016118:	6004      	str	r4, [r0, #0]
 801611a:	60c4      	str	r4, [r0, #12]
 801611c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8016120:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016124:	b94c      	cbnz	r4, 801613a <__pow5mult+0x66>
 8016126:	f240 2171 	movw	r1, #625	@ 0x271
 801612a:	4638      	mov	r0, r7
 801612c:	f7ff ff1a 	bl	8015f64 <__i2b>
 8016130:	2300      	movs	r3, #0
 8016132:	f8c8 0008 	str.w	r0, [r8, #8]
 8016136:	4604      	mov	r4, r0
 8016138:	6003      	str	r3, [r0, #0]
 801613a:	f04f 0900 	mov.w	r9, #0
 801613e:	07eb      	lsls	r3, r5, #31
 8016140:	d50a      	bpl.n	8016158 <__pow5mult+0x84>
 8016142:	4631      	mov	r1, r6
 8016144:	4622      	mov	r2, r4
 8016146:	4638      	mov	r0, r7
 8016148:	f7ff ff22 	bl	8015f90 <__multiply>
 801614c:	4631      	mov	r1, r6
 801614e:	4680      	mov	r8, r0
 8016150:	4638      	mov	r0, r7
 8016152:	f7ff fe09 	bl	8015d68 <_Bfree>
 8016156:	4646      	mov	r6, r8
 8016158:	106d      	asrs	r5, r5, #1
 801615a:	d00b      	beq.n	8016174 <__pow5mult+0xa0>
 801615c:	6820      	ldr	r0, [r4, #0]
 801615e:	b938      	cbnz	r0, 8016170 <__pow5mult+0x9c>
 8016160:	4622      	mov	r2, r4
 8016162:	4621      	mov	r1, r4
 8016164:	4638      	mov	r0, r7
 8016166:	f7ff ff13 	bl	8015f90 <__multiply>
 801616a:	6020      	str	r0, [r4, #0]
 801616c:	f8c0 9000 	str.w	r9, [r0]
 8016170:	4604      	mov	r4, r0
 8016172:	e7e4      	b.n	801613e <__pow5mult+0x6a>
 8016174:	4630      	mov	r0, r6
 8016176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801617a:	bf00      	nop
 801617c:	080186e8 	.word	0x080186e8
 8016180:	08018556 	.word	0x08018556
 8016184:	080185d6 	.word	0x080185d6

08016188 <__lshift>:
 8016188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801618c:	460c      	mov	r4, r1
 801618e:	6849      	ldr	r1, [r1, #4]
 8016190:	6923      	ldr	r3, [r4, #16]
 8016192:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016196:	68a3      	ldr	r3, [r4, #8]
 8016198:	4607      	mov	r7, r0
 801619a:	4691      	mov	r9, r2
 801619c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80161a0:	f108 0601 	add.w	r6, r8, #1
 80161a4:	42b3      	cmp	r3, r6
 80161a6:	db0b      	blt.n	80161c0 <__lshift+0x38>
 80161a8:	4638      	mov	r0, r7
 80161aa:	f7ff fd9d 	bl	8015ce8 <_Balloc>
 80161ae:	4605      	mov	r5, r0
 80161b0:	b948      	cbnz	r0, 80161c6 <__lshift+0x3e>
 80161b2:	4602      	mov	r2, r0
 80161b4:	4b28      	ldr	r3, [pc, #160]	@ (8016258 <__lshift+0xd0>)
 80161b6:	4829      	ldr	r0, [pc, #164]	@ (801625c <__lshift+0xd4>)
 80161b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80161bc:	f001 fb18 	bl	80177f0 <__assert_func>
 80161c0:	3101      	adds	r1, #1
 80161c2:	005b      	lsls	r3, r3, #1
 80161c4:	e7ee      	b.n	80161a4 <__lshift+0x1c>
 80161c6:	2300      	movs	r3, #0
 80161c8:	f100 0114 	add.w	r1, r0, #20
 80161cc:	f100 0210 	add.w	r2, r0, #16
 80161d0:	4618      	mov	r0, r3
 80161d2:	4553      	cmp	r3, sl
 80161d4:	db33      	blt.n	801623e <__lshift+0xb6>
 80161d6:	6920      	ldr	r0, [r4, #16]
 80161d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80161dc:	f104 0314 	add.w	r3, r4, #20
 80161e0:	f019 091f 	ands.w	r9, r9, #31
 80161e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80161e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80161ec:	d02b      	beq.n	8016246 <__lshift+0xbe>
 80161ee:	f1c9 0e20 	rsb	lr, r9, #32
 80161f2:	468a      	mov	sl, r1
 80161f4:	2200      	movs	r2, #0
 80161f6:	6818      	ldr	r0, [r3, #0]
 80161f8:	fa00 f009 	lsl.w	r0, r0, r9
 80161fc:	4310      	orrs	r0, r2
 80161fe:	f84a 0b04 	str.w	r0, [sl], #4
 8016202:	f853 2b04 	ldr.w	r2, [r3], #4
 8016206:	459c      	cmp	ip, r3
 8016208:	fa22 f20e 	lsr.w	r2, r2, lr
 801620c:	d8f3      	bhi.n	80161f6 <__lshift+0x6e>
 801620e:	ebac 0304 	sub.w	r3, ip, r4
 8016212:	3b15      	subs	r3, #21
 8016214:	f023 0303 	bic.w	r3, r3, #3
 8016218:	3304      	adds	r3, #4
 801621a:	f104 0015 	add.w	r0, r4, #21
 801621e:	4560      	cmp	r0, ip
 8016220:	bf88      	it	hi
 8016222:	2304      	movhi	r3, #4
 8016224:	50ca      	str	r2, [r1, r3]
 8016226:	b10a      	cbz	r2, 801622c <__lshift+0xa4>
 8016228:	f108 0602 	add.w	r6, r8, #2
 801622c:	3e01      	subs	r6, #1
 801622e:	4638      	mov	r0, r7
 8016230:	612e      	str	r6, [r5, #16]
 8016232:	4621      	mov	r1, r4
 8016234:	f7ff fd98 	bl	8015d68 <_Bfree>
 8016238:	4628      	mov	r0, r5
 801623a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801623e:	f842 0f04 	str.w	r0, [r2, #4]!
 8016242:	3301      	adds	r3, #1
 8016244:	e7c5      	b.n	80161d2 <__lshift+0x4a>
 8016246:	3904      	subs	r1, #4
 8016248:	f853 2b04 	ldr.w	r2, [r3], #4
 801624c:	f841 2f04 	str.w	r2, [r1, #4]!
 8016250:	459c      	cmp	ip, r3
 8016252:	d8f9      	bhi.n	8016248 <__lshift+0xc0>
 8016254:	e7ea      	b.n	801622c <__lshift+0xa4>
 8016256:	bf00      	nop
 8016258:	080185c5 	.word	0x080185c5
 801625c:	080185d6 	.word	0x080185d6

08016260 <__mcmp>:
 8016260:	690a      	ldr	r2, [r1, #16]
 8016262:	4603      	mov	r3, r0
 8016264:	6900      	ldr	r0, [r0, #16]
 8016266:	1a80      	subs	r0, r0, r2
 8016268:	b530      	push	{r4, r5, lr}
 801626a:	d10e      	bne.n	801628a <__mcmp+0x2a>
 801626c:	3314      	adds	r3, #20
 801626e:	3114      	adds	r1, #20
 8016270:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016274:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016278:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801627c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016280:	4295      	cmp	r5, r2
 8016282:	d003      	beq.n	801628c <__mcmp+0x2c>
 8016284:	d205      	bcs.n	8016292 <__mcmp+0x32>
 8016286:	f04f 30ff 	mov.w	r0, #4294967295
 801628a:	bd30      	pop	{r4, r5, pc}
 801628c:	42a3      	cmp	r3, r4
 801628e:	d3f3      	bcc.n	8016278 <__mcmp+0x18>
 8016290:	e7fb      	b.n	801628a <__mcmp+0x2a>
 8016292:	2001      	movs	r0, #1
 8016294:	e7f9      	b.n	801628a <__mcmp+0x2a>
	...

08016298 <__mdiff>:
 8016298:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801629c:	4689      	mov	r9, r1
 801629e:	4606      	mov	r6, r0
 80162a0:	4611      	mov	r1, r2
 80162a2:	4648      	mov	r0, r9
 80162a4:	4614      	mov	r4, r2
 80162a6:	f7ff ffdb 	bl	8016260 <__mcmp>
 80162aa:	1e05      	subs	r5, r0, #0
 80162ac:	d112      	bne.n	80162d4 <__mdiff+0x3c>
 80162ae:	4629      	mov	r1, r5
 80162b0:	4630      	mov	r0, r6
 80162b2:	f7ff fd19 	bl	8015ce8 <_Balloc>
 80162b6:	4602      	mov	r2, r0
 80162b8:	b928      	cbnz	r0, 80162c6 <__mdiff+0x2e>
 80162ba:	4b3f      	ldr	r3, [pc, #252]	@ (80163b8 <__mdiff+0x120>)
 80162bc:	f240 2137 	movw	r1, #567	@ 0x237
 80162c0:	483e      	ldr	r0, [pc, #248]	@ (80163bc <__mdiff+0x124>)
 80162c2:	f001 fa95 	bl	80177f0 <__assert_func>
 80162c6:	2301      	movs	r3, #1
 80162c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80162cc:	4610      	mov	r0, r2
 80162ce:	b003      	add	sp, #12
 80162d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162d4:	bfbc      	itt	lt
 80162d6:	464b      	movlt	r3, r9
 80162d8:	46a1      	movlt	r9, r4
 80162da:	4630      	mov	r0, r6
 80162dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80162e0:	bfba      	itte	lt
 80162e2:	461c      	movlt	r4, r3
 80162e4:	2501      	movlt	r5, #1
 80162e6:	2500      	movge	r5, #0
 80162e8:	f7ff fcfe 	bl	8015ce8 <_Balloc>
 80162ec:	4602      	mov	r2, r0
 80162ee:	b918      	cbnz	r0, 80162f8 <__mdiff+0x60>
 80162f0:	4b31      	ldr	r3, [pc, #196]	@ (80163b8 <__mdiff+0x120>)
 80162f2:	f240 2145 	movw	r1, #581	@ 0x245
 80162f6:	e7e3      	b.n	80162c0 <__mdiff+0x28>
 80162f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80162fc:	6926      	ldr	r6, [r4, #16]
 80162fe:	60c5      	str	r5, [r0, #12]
 8016300:	f109 0310 	add.w	r3, r9, #16
 8016304:	f109 0514 	add.w	r5, r9, #20
 8016308:	f104 0e14 	add.w	lr, r4, #20
 801630c:	f100 0b14 	add.w	fp, r0, #20
 8016310:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016314:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016318:	9301      	str	r3, [sp, #4]
 801631a:	46d9      	mov	r9, fp
 801631c:	f04f 0c00 	mov.w	ip, #0
 8016320:	9b01      	ldr	r3, [sp, #4]
 8016322:	f85e 0b04 	ldr.w	r0, [lr], #4
 8016326:	f853 af04 	ldr.w	sl, [r3, #4]!
 801632a:	9301      	str	r3, [sp, #4]
 801632c:	fa1f f38a 	uxth.w	r3, sl
 8016330:	4619      	mov	r1, r3
 8016332:	b283      	uxth	r3, r0
 8016334:	1acb      	subs	r3, r1, r3
 8016336:	0c00      	lsrs	r0, r0, #16
 8016338:	4463      	add	r3, ip
 801633a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801633e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016342:	b29b      	uxth	r3, r3
 8016344:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016348:	4576      	cmp	r6, lr
 801634a:	f849 3b04 	str.w	r3, [r9], #4
 801634e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016352:	d8e5      	bhi.n	8016320 <__mdiff+0x88>
 8016354:	1b33      	subs	r3, r6, r4
 8016356:	3b15      	subs	r3, #21
 8016358:	f023 0303 	bic.w	r3, r3, #3
 801635c:	3415      	adds	r4, #21
 801635e:	3304      	adds	r3, #4
 8016360:	42a6      	cmp	r6, r4
 8016362:	bf38      	it	cc
 8016364:	2304      	movcc	r3, #4
 8016366:	441d      	add	r5, r3
 8016368:	445b      	add	r3, fp
 801636a:	461e      	mov	r6, r3
 801636c:	462c      	mov	r4, r5
 801636e:	4544      	cmp	r4, r8
 8016370:	d30e      	bcc.n	8016390 <__mdiff+0xf8>
 8016372:	f108 0103 	add.w	r1, r8, #3
 8016376:	1b49      	subs	r1, r1, r5
 8016378:	f021 0103 	bic.w	r1, r1, #3
 801637c:	3d03      	subs	r5, #3
 801637e:	45a8      	cmp	r8, r5
 8016380:	bf38      	it	cc
 8016382:	2100      	movcc	r1, #0
 8016384:	440b      	add	r3, r1
 8016386:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801638a:	b191      	cbz	r1, 80163b2 <__mdiff+0x11a>
 801638c:	6117      	str	r7, [r2, #16]
 801638e:	e79d      	b.n	80162cc <__mdiff+0x34>
 8016390:	f854 1b04 	ldr.w	r1, [r4], #4
 8016394:	46e6      	mov	lr, ip
 8016396:	0c08      	lsrs	r0, r1, #16
 8016398:	fa1c fc81 	uxtah	ip, ip, r1
 801639c:	4471      	add	r1, lr
 801639e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80163a2:	b289      	uxth	r1, r1
 80163a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80163a8:	f846 1b04 	str.w	r1, [r6], #4
 80163ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80163b0:	e7dd      	b.n	801636e <__mdiff+0xd6>
 80163b2:	3f01      	subs	r7, #1
 80163b4:	e7e7      	b.n	8016386 <__mdiff+0xee>
 80163b6:	bf00      	nop
 80163b8:	080185c5 	.word	0x080185c5
 80163bc:	080185d6 	.word	0x080185d6

080163c0 <__ulp>:
 80163c0:	b082      	sub	sp, #8
 80163c2:	ed8d 0b00 	vstr	d0, [sp]
 80163c6:	9a01      	ldr	r2, [sp, #4]
 80163c8:	4b0f      	ldr	r3, [pc, #60]	@ (8016408 <__ulp+0x48>)
 80163ca:	4013      	ands	r3, r2
 80163cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	dc08      	bgt.n	80163e6 <__ulp+0x26>
 80163d4:	425b      	negs	r3, r3
 80163d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80163da:	ea4f 5223 	mov.w	r2, r3, asr #20
 80163de:	da04      	bge.n	80163ea <__ulp+0x2a>
 80163e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80163e4:	4113      	asrs	r3, r2
 80163e6:	2200      	movs	r2, #0
 80163e8:	e008      	b.n	80163fc <__ulp+0x3c>
 80163ea:	f1a2 0314 	sub.w	r3, r2, #20
 80163ee:	2b1e      	cmp	r3, #30
 80163f0:	bfda      	itte	le
 80163f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80163f6:	40da      	lsrle	r2, r3
 80163f8:	2201      	movgt	r2, #1
 80163fa:	2300      	movs	r3, #0
 80163fc:	4619      	mov	r1, r3
 80163fe:	4610      	mov	r0, r2
 8016400:	ec41 0b10 	vmov	d0, r0, r1
 8016404:	b002      	add	sp, #8
 8016406:	4770      	bx	lr
 8016408:	7ff00000 	.word	0x7ff00000

0801640c <__b2d>:
 801640c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016410:	6906      	ldr	r6, [r0, #16]
 8016412:	f100 0814 	add.w	r8, r0, #20
 8016416:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801641a:	1f37      	subs	r7, r6, #4
 801641c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016420:	4610      	mov	r0, r2
 8016422:	f7ff fd53 	bl	8015ecc <__hi0bits>
 8016426:	f1c0 0320 	rsb	r3, r0, #32
 801642a:	280a      	cmp	r0, #10
 801642c:	600b      	str	r3, [r1, #0]
 801642e:	491b      	ldr	r1, [pc, #108]	@ (801649c <__b2d+0x90>)
 8016430:	dc15      	bgt.n	801645e <__b2d+0x52>
 8016432:	f1c0 0c0b 	rsb	ip, r0, #11
 8016436:	fa22 f30c 	lsr.w	r3, r2, ip
 801643a:	45b8      	cmp	r8, r7
 801643c:	ea43 0501 	orr.w	r5, r3, r1
 8016440:	bf34      	ite	cc
 8016442:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016446:	2300      	movcs	r3, #0
 8016448:	3015      	adds	r0, #21
 801644a:	fa02 f000 	lsl.w	r0, r2, r0
 801644e:	fa23 f30c 	lsr.w	r3, r3, ip
 8016452:	4303      	orrs	r3, r0
 8016454:	461c      	mov	r4, r3
 8016456:	ec45 4b10 	vmov	d0, r4, r5
 801645a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801645e:	45b8      	cmp	r8, r7
 8016460:	bf3a      	itte	cc
 8016462:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016466:	f1a6 0708 	subcc.w	r7, r6, #8
 801646a:	2300      	movcs	r3, #0
 801646c:	380b      	subs	r0, #11
 801646e:	d012      	beq.n	8016496 <__b2d+0x8a>
 8016470:	f1c0 0120 	rsb	r1, r0, #32
 8016474:	fa23 f401 	lsr.w	r4, r3, r1
 8016478:	4082      	lsls	r2, r0
 801647a:	4322      	orrs	r2, r4
 801647c:	4547      	cmp	r7, r8
 801647e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8016482:	bf8c      	ite	hi
 8016484:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016488:	2200      	movls	r2, #0
 801648a:	4083      	lsls	r3, r0
 801648c:	40ca      	lsrs	r2, r1
 801648e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016492:	4313      	orrs	r3, r2
 8016494:	e7de      	b.n	8016454 <__b2d+0x48>
 8016496:	ea42 0501 	orr.w	r5, r2, r1
 801649a:	e7db      	b.n	8016454 <__b2d+0x48>
 801649c:	3ff00000 	.word	0x3ff00000

080164a0 <__d2b>:
 80164a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80164a4:	460f      	mov	r7, r1
 80164a6:	2101      	movs	r1, #1
 80164a8:	ec59 8b10 	vmov	r8, r9, d0
 80164ac:	4616      	mov	r6, r2
 80164ae:	f7ff fc1b 	bl	8015ce8 <_Balloc>
 80164b2:	4604      	mov	r4, r0
 80164b4:	b930      	cbnz	r0, 80164c4 <__d2b+0x24>
 80164b6:	4602      	mov	r2, r0
 80164b8:	4b23      	ldr	r3, [pc, #140]	@ (8016548 <__d2b+0xa8>)
 80164ba:	4824      	ldr	r0, [pc, #144]	@ (801654c <__d2b+0xac>)
 80164bc:	f240 310f 	movw	r1, #783	@ 0x30f
 80164c0:	f001 f996 	bl	80177f0 <__assert_func>
 80164c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80164c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80164cc:	b10d      	cbz	r5, 80164d2 <__d2b+0x32>
 80164ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80164d2:	9301      	str	r3, [sp, #4]
 80164d4:	f1b8 0300 	subs.w	r3, r8, #0
 80164d8:	d023      	beq.n	8016522 <__d2b+0x82>
 80164da:	4668      	mov	r0, sp
 80164dc:	9300      	str	r3, [sp, #0]
 80164de:	f7ff fd14 	bl	8015f0a <__lo0bits>
 80164e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80164e6:	b1d0      	cbz	r0, 801651e <__d2b+0x7e>
 80164e8:	f1c0 0320 	rsb	r3, r0, #32
 80164ec:	fa02 f303 	lsl.w	r3, r2, r3
 80164f0:	430b      	orrs	r3, r1
 80164f2:	40c2      	lsrs	r2, r0
 80164f4:	6163      	str	r3, [r4, #20]
 80164f6:	9201      	str	r2, [sp, #4]
 80164f8:	9b01      	ldr	r3, [sp, #4]
 80164fa:	61a3      	str	r3, [r4, #24]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	bf0c      	ite	eq
 8016500:	2201      	moveq	r2, #1
 8016502:	2202      	movne	r2, #2
 8016504:	6122      	str	r2, [r4, #16]
 8016506:	b1a5      	cbz	r5, 8016532 <__d2b+0x92>
 8016508:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801650c:	4405      	add	r5, r0
 801650e:	603d      	str	r5, [r7, #0]
 8016510:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016514:	6030      	str	r0, [r6, #0]
 8016516:	4620      	mov	r0, r4
 8016518:	b003      	add	sp, #12
 801651a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801651e:	6161      	str	r1, [r4, #20]
 8016520:	e7ea      	b.n	80164f8 <__d2b+0x58>
 8016522:	a801      	add	r0, sp, #4
 8016524:	f7ff fcf1 	bl	8015f0a <__lo0bits>
 8016528:	9b01      	ldr	r3, [sp, #4]
 801652a:	6163      	str	r3, [r4, #20]
 801652c:	3020      	adds	r0, #32
 801652e:	2201      	movs	r2, #1
 8016530:	e7e8      	b.n	8016504 <__d2b+0x64>
 8016532:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016536:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801653a:	6038      	str	r0, [r7, #0]
 801653c:	6918      	ldr	r0, [r3, #16]
 801653e:	f7ff fcc5 	bl	8015ecc <__hi0bits>
 8016542:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016546:	e7e5      	b.n	8016514 <__d2b+0x74>
 8016548:	080185c5 	.word	0x080185c5
 801654c:	080185d6 	.word	0x080185d6

08016550 <__ratio>:
 8016550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016554:	b085      	sub	sp, #20
 8016556:	e9cd 1000 	strd	r1, r0, [sp]
 801655a:	a902      	add	r1, sp, #8
 801655c:	f7ff ff56 	bl	801640c <__b2d>
 8016560:	9800      	ldr	r0, [sp, #0]
 8016562:	a903      	add	r1, sp, #12
 8016564:	ec55 4b10 	vmov	r4, r5, d0
 8016568:	f7ff ff50 	bl	801640c <__b2d>
 801656c:	9b01      	ldr	r3, [sp, #4]
 801656e:	6919      	ldr	r1, [r3, #16]
 8016570:	9b00      	ldr	r3, [sp, #0]
 8016572:	691b      	ldr	r3, [r3, #16]
 8016574:	1ac9      	subs	r1, r1, r3
 8016576:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801657a:	1a9b      	subs	r3, r3, r2
 801657c:	ec5b ab10 	vmov	sl, fp, d0
 8016580:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8016584:	2b00      	cmp	r3, #0
 8016586:	bfce      	itee	gt
 8016588:	462a      	movgt	r2, r5
 801658a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801658e:	465a      	movle	r2, fp
 8016590:	462f      	mov	r7, r5
 8016592:	46d9      	mov	r9, fp
 8016594:	bfcc      	ite	gt
 8016596:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801659a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801659e:	464b      	mov	r3, r9
 80165a0:	4652      	mov	r2, sl
 80165a2:	4620      	mov	r0, r4
 80165a4:	4639      	mov	r1, r7
 80165a6:	f7fa f959 	bl	801085c <__aeabi_ddiv>
 80165aa:	ec41 0b10 	vmov	d0, r0, r1
 80165ae:	b005      	add	sp, #20
 80165b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080165b4 <__copybits>:
 80165b4:	3901      	subs	r1, #1
 80165b6:	b570      	push	{r4, r5, r6, lr}
 80165b8:	1149      	asrs	r1, r1, #5
 80165ba:	6914      	ldr	r4, [r2, #16]
 80165bc:	3101      	adds	r1, #1
 80165be:	f102 0314 	add.w	r3, r2, #20
 80165c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80165c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80165ca:	1f05      	subs	r5, r0, #4
 80165cc:	42a3      	cmp	r3, r4
 80165ce:	d30c      	bcc.n	80165ea <__copybits+0x36>
 80165d0:	1aa3      	subs	r3, r4, r2
 80165d2:	3b11      	subs	r3, #17
 80165d4:	f023 0303 	bic.w	r3, r3, #3
 80165d8:	3211      	adds	r2, #17
 80165da:	42a2      	cmp	r2, r4
 80165dc:	bf88      	it	hi
 80165de:	2300      	movhi	r3, #0
 80165e0:	4418      	add	r0, r3
 80165e2:	2300      	movs	r3, #0
 80165e4:	4288      	cmp	r0, r1
 80165e6:	d305      	bcc.n	80165f4 <__copybits+0x40>
 80165e8:	bd70      	pop	{r4, r5, r6, pc}
 80165ea:	f853 6b04 	ldr.w	r6, [r3], #4
 80165ee:	f845 6f04 	str.w	r6, [r5, #4]!
 80165f2:	e7eb      	b.n	80165cc <__copybits+0x18>
 80165f4:	f840 3b04 	str.w	r3, [r0], #4
 80165f8:	e7f4      	b.n	80165e4 <__copybits+0x30>

080165fa <__any_on>:
 80165fa:	f100 0214 	add.w	r2, r0, #20
 80165fe:	6900      	ldr	r0, [r0, #16]
 8016600:	114b      	asrs	r3, r1, #5
 8016602:	4298      	cmp	r0, r3
 8016604:	b510      	push	{r4, lr}
 8016606:	db11      	blt.n	801662c <__any_on+0x32>
 8016608:	dd0a      	ble.n	8016620 <__any_on+0x26>
 801660a:	f011 011f 	ands.w	r1, r1, #31
 801660e:	d007      	beq.n	8016620 <__any_on+0x26>
 8016610:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016614:	fa24 f001 	lsr.w	r0, r4, r1
 8016618:	fa00 f101 	lsl.w	r1, r0, r1
 801661c:	428c      	cmp	r4, r1
 801661e:	d10b      	bne.n	8016638 <__any_on+0x3e>
 8016620:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016624:	4293      	cmp	r3, r2
 8016626:	d803      	bhi.n	8016630 <__any_on+0x36>
 8016628:	2000      	movs	r0, #0
 801662a:	bd10      	pop	{r4, pc}
 801662c:	4603      	mov	r3, r0
 801662e:	e7f7      	b.n	8016620 <__any_on+0x26>
 8016630:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016634:	2900      	cmp	r1, #0
 8016636:	d0f5      	beq.n	8016624 <__any_on+0x2a>
 8016638:	2001      	movs	r0, #1
 801663a:	e7f6      	b.n	801662a <__any_on+0x30>

0801663c <sulp>:
 801663c:	b570      	push	{r4, r5, r6, lr}
 801663e:	4604      	mov	r4, r0
 8016640:	460d      	mov	r5, r1
 8016642:	ec45 4b10 	vmov	d0, r4, r5
 8016646:	4616      	mov	r6, r2
 8016648:	f7ff feba 	bl	80163c0 <__ulp>
 801664c:	ec51 0b10 	vmov	r0, r1, d0
 8016650:	b17e      	cbz	r6, 8016672 <sulp+0x36>
 8016652:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016656:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801665a:	2b00      	cmp	r3, #0
 801665c:	dd09      	ble.n	8016672 <sulp+0x36>
 801665e:	051b      	lsls	r3, r3, #20
 8016660:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8016664:	2400      	movs	r4, #0
 8016666:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801666a:	4622      	mov	r2, r4
 801666c:	462b      	mov	r3, r5
 801666e:	f7f9 ffcb 	bl	8010608 <__aeabi_dmul>
 8016672:	ec41 0b10 	vmov	d0, r0, r1
 8016676:	bd70      	pop	{r4, r5, r6, pc}

08016678 <_strtod_l>:
 8016678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801667c:	b09f      	sub	sp, #124	@ 0x7c
 801667e:	460c      	mov	r4, r1
 8016680:	9217      	str	r2, [sp, #92]	@ 0x5c
 8016682:	2200      	movs	r2, #0
 8016684:	921a      	str	r2, [sp, #104]	@ 0x68
 8016686:	9005      	str	r0, [sp, #20]
 8016688:	f04f 0a00 	mov.w	sl, #0
 801668c:	f04f 0b00 	mov.w	fp, #0
 8016690:	460a      	mov	r2, r1
 8016692:	9219      	str	r2, [sp, #100]	@ 0x64
 8016694:	7811      	ldrb	r1, [r2, #0]
 8016696:	292b      	cmp	r1, #43	@ 0x2b
 8016698:	d04a      	beq.n	8016730 <_strtod_l+0xb8>
 801669a:	d838      	bhi.n	801670e <_strtod_l+0x96>
 801669c:	290d      	cmp	r1, #13
 801669e:	d832      	bhi.n	8016706 <_strtod_l+0x8e>
 80166a0:	2908      	cmp	r1, #8
 80166a2:	d832      	bhi.n	801670a <_strtod_l+0x92>
 80166a4:	2900      	cmp	r1, #0
 80166a6:	d03b      	beq.n	8016720 <_strtod_l+0xa8>
 80166a8:	2200      	movs	r2, #0
 80166aa:	920e      	str	r2, [sp, #56]	@ 0x38
 80166ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80166ae:	782a      	ldrb	r2, [r5, #0]
 80166b0:	2a30      	cmp	r2, #48	@ 0x30
 80166b2:	f040 80b2 	bne.w	801681a <_strtod_l+0x1a2>
 80166b6:	786a      	ldrb	r2, [r5, #1]
 80166b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80166bc:	2a58      	cmp	r2, #88	@ 0x58
 80166be:	d16e      	bne.n	801679e <_strtod_l+0x126>
 80166c0:	9302      	str	r3, [sp, #8]
 80166c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80166c4:	9301      	str	r3, [sp, #4]
 80166c6:	ab1a      	add	r3, sp, #104	@ 0x68
 80166c8:	9300      	str	r3, [sp, #0]
 80166ca:	4a8f      	ldr	r2, [pc, #572]	@ (8016908 <_strtod_l+0x290>)
 80166cc:	9805      	ldr	r0, [sp, #20]
 80166ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 80166d0:	a919      	add	r1, sp, #100	@ 0x64
 80166d2:	f001 f927 	bl	8017924 <__gethex>
 80166d6:	f010 060f 	ands.w	r6, r0, #15
 80166da:	4604      	mov	r4, r0
 80166dc:	d005      	beq.n	80166ea <_strtod_l+0x72>
 80166de:	2e06      	cmp	r6, #6
 80166e0:	d128      	bne.n	8016734 <_strtod_l+0xbc>
 80166e2:	3501      	adds	r5, #1
 80166e4:	2300      	movs	r3, #0
 80166e6:	9519      	str	r5, [sp, #100]	@ 0x64
 80166e8:	930e      	str	r3, [sp, #56]	@ 0x38
 80166ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	f040 858e 	bne.w	801720e <_strtod_l+0xb96>
 80166f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80166f4:	b1cb      	cbz	r3, 801672a <_strtod_l+0xb2>
 80166f6:	4652      	mov	r2, sl
 80166f8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80166fc:	ec43 2b10 	vmov	d0, r2, r3
 8016700:	b01f      	add	sp, #124	@ 0x7c
 8016702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016706:	2920      	cmp	r1, #32
 8016708:	d1ce      	bne.n	80166a8 <_strtod_l+0x30>
 801670a:	3201      	adds	r2, #1
 801670c:	e7c1      	b.n	8016692 <_strtod_l+0x1a>
 801670e:	292d      	cmp	r1, #45	@ 0x2d
 8016710:	d1ca      	bne.n	80166a8 <_strtod_l+0x30>
 8016712:	2101      	movs	r1, #1
 8016714:	910e      	str	r1, [sp, #56]	@ 0x38
 8016716:	1c51      	adds	r1, r2, #1
 8016718:	9119      	str	r1, [sp, #100]	@ 0x64
 801671a:	7852      	ldrb	r2, [r2, #1]
 801671c:	2a00      	cmp	r2, #0
 801671e:	d1c5      	bne.n	80166ac <_strtod_l+0x34>
 8016720:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016722:	9419      	str	r4, [sp, #100]	@ 0x64
 8016724:	2b00      	cmp	r3, #0
 8016726:	f040 8570 	bne.w	801720a <_strtod_l+0xb92>
 801672a:	4652      	mov	r2, sl
 801672c:	465b      	mov	r3, fp
 801672e:	e7e5      	b.n	80166fc <_strtod_l+0x84>
 8016730:	2100      	movs	r1, #0
 8016732:	e7ef      	b.n	8016714 <_strtod_l+0x9c>
 8016734:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016736:	b13a      	cbz	r2, 8016748 <_strtod_l+0xd0>
 8016738:	2135      	movs	r1, #53	@ 0x35
 801673a:	a81c      	add	r0, sp, #112	@ 0x70
 801673c:	f7ff ff3a 	bl	80165b4 <__copybits>
 8016740:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016742:	9805      	ldr	r0, [sp, #20]
 8016744:	f7ff fb10 	bl	8015d68 <_Bfree>
 8016748:	3e01      	subs	r6, #1
 801674a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801674c:	2e04      	cmp	r6, #4
 801674e:	d806      	bhi.n	801675e <_strtod_l+0xe6>
 8016750:	e8df f006 	tbb	[pc, r6]
 8016754:	201d0314 	.word	0x201d0314
 8016758:	14          	.byte	0x14
 8016759:	00          	.byte	0x00
 801675a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801675e:	05e1      	lsls	r1, r4, #23
 8016760:	bf48      	it	mi
 8016762:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8016766:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801676a:	0d1b      	lsrs	r3, r3, #20
 801676c:	051b      	lsls	r3, r3, #20
 801676e:	2b00      	cmp	r3, #0
 8016770:	d1bb      	bne.n	80166ea <_strtod_l+0x72>
 8016772:	f7fe fb2b 	bl	8014dcc <__errno>
 8016776:	2322      	movs	r3, #34	@ 0x22
 8016778:	6003      	str	r3, [r0, #0]
 801677a:	e7b6      	b.n	80166ea <_strtod_l+0x72>
 801677c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8016780:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016784:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016788:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801678c:	e7e7      	b.n	801675e <_strtod_l+0xe6>
 801678e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8016910 <_strtod_l+0x298>
 8016792:	e7e4      	b.n	801675e <_strtod_l+0xe6>
 8016794:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016798:	f04f 3aff 	mov.w	sl, #4294967295
 801679c:	e7df      	b.n	801675e <_strtod_l+0xe6>
 801679e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80167a0:	1c5a      	adds	r2, r3, #1
 80167a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80167a4:	785b      	ldrb	r3, [r3, #1]
 80167a6:	2b30      	cmp	r3, #48	@ 0x30
 80167a8:	d0f9      	beq.n	801679e <_strtod_l+0x126>
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d09d      	beq.n	80166ea <_strtod_l+0x72>
 80167ae:	2301      	movs	r3, #1
 80167b0:	2700      	movs	r7, #0
 80167b2:	9308      	str	r3, [sp, #32]
 80167b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80167b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80167b8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80167ba:	46b9      	mov	r9, r7
 80167bc:	220a      	movs	r2, #10
 80167be:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80167c0:	7805      	ldrb	r5, [r0, #0]
 80167c2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80167c6:	b2d9      	uxtb	r1, r3
 80167c8:	2909      	cmp	r1, #9
 80167ca:	d928      	bls.n	801681e <_strtod_l+0x1a6>
 80167cc:	494f      	ldr	r1, [pc, #316]	@ (801690c <_strtod_l+0x294>)
 80167ce:	2201      	movs	r2, #1
 80167d0:	f000 ffd6 	bl	8017780 <strncmp>
 80167d4:	2800      	cmp	r0, #0
 80167d6:	d032      	beq.n	801683e <_strtod_l+0x1c6>
 80167d8:	2000      	movs	r0, #0
 80167da:	462a      	mov	r2, r5
 80167dc:	900a      	str	r0, [sp, #40]	@ 0x28
 80167de:	464d      	mov	r5, r9
 80167e0:	4603      	mov	r3, r0
 80167e2:	2a65      	cmp	r2, #101	@ 0x65
 80167e4:	d001      	beq.n	80167ea <_strtod_l+0x172>
 80167e6:	2a45      	cmp	r2, #69	@ 0x45
 80167e8:	d114      	bne.n	8016814 <_strtod_l+0x19c>
 80167ea:	b91d      	cbnz	r5, 80167f4 <_strtod_l+0x17c>
 80167ec:	9a08      	ldr	r2, [sp, #32]
 80167ee:	4302      	orrs	r2, r0
 80167f0:	d096      	beq.n	8016720 <_strtod_l+0xa8>
 80167f2:	2500      	movs	r5, #0
 80167f4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80167f6:	1c62      	adds	r2, r4, #1
 80167f8:	9219      	str	r2, [sp, #100]	@ 0x64
 80167fa:	7862      	ldrb	r2, [r4, #1]
 80167fc:	2a2b      	cmp	r2, #43	@ 0x2b
 80167fe:	d07a      	beq.n	80168f6 <_strtod_l+0x27e>
 8016800:	2a2d      	cmp	r2, #45	@ 0x2d
 8016802:	d07e      	beq.n	8016902 <_strtod_l+0x28a>
 8016804:	f04f 0c00 	mov.w	ip, #0
 8016808:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801680c:	2909      	cmp	r1, #9
 801680e:	f240 8085 	bls.w	801691c <_strtod_l+0x2a4>
 8016812:	9419      	str	r4, [sp, #100]	@ 0x64
 8016814:	f04f 0800 	mov.w	r8, #0
 8016818:	e0a5      	b.n	8016966 <_strtod_l+0x2ee>
 801681a:	2300      	movs	r3, #0
 801681c:	e7c8      	b.n	80167b0 <_strtod_l+0x138>
 801681e:	f1b9 0f08 	cmp.w	r9, #8
 8016822:	bfd8      	it	le
 8016824:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8016826:	f100 0001 	add.w	r0, r0, #1
 801682a:	bfda      	itte	le
 801682c:	fb02 3301 	mlale	r3, r2, r1, r3
 8016830:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8016832:	fb02 3707 	mlagt	r7, r2, r7, r3
 8016836:	f109 0901 	add.w	r9, r9, #1
 801683a:	9019      	str	r0, [sp, #100]	@ 0x64
 801683c:	e7bf      	b.n	80167be <_strtod_l+0x146>
 801683e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016840:	1c5a      	adds	r2, r3, #1
 8016842:	9219      	str	r2, [sp, #100]	@ 0x64
 8016844:	785a      	ldrb	r2, [r3, #1]
 8016846:	f1b9 0f00 	cmp.w	r9, #0
 801684a:	d03b      	beq.n	80168c4 <_strtod_l+0x24c>
 801684c:	900a      	str	r0, [sp, #40]	@ 0x28
 801684e:	464d      	mov	r5, r9
 8016850:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8016854:	2b09      	cmp	r3, #9
 8016856:	d912      	bls.n	801687e <_strtod_l+0x206>
 8016858:	2301      	movs	r3, #1
 801685a:	e7c2      	b.n	80167e2 <_strtod_l+0x16a>
 801685c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801685e:	1c5a      	adds	r2, r3, #1
 8016860:	9219      	str	r2, [sp, #100]	@ 0x64
 8016862:	785a      	ldrb	r2, [r3, #1]
 8016864:	3001      	adds	r0, #1
 8016866:	2a30      	cmp	r2, #48	@ 0x30
 8016868:	d0f8      	beq.n	801685c <_strtod_l+0x1e4>
 801686a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801686e:	2b08      	cmp	r3, #8
 8016870:	f200 84d2 	bhi.w	8017218 <_strtod_l+0xba0>
 8016874:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016876:	900a      	str	r0, [sp, #40]	@ 0x28
 8016878:	2000      	movs	r0, #0
 801687a:	930c      	str	r3, [sp, #48]	@ 0x30
 801687c:	4605      	mov	r5, r0
 801687e:	3a30      	subs	r2, #48	@ 0x30
 8016880:	f100 0301 	add.w	r3, r0, #1
 8016884:	d018      	beq.n	80168b8 <_strtod_l+0x240>
 8016886:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016888:	4419      	add	r1, r3
 801688a:	910a      	str	r1, [sp, #40]	@ 0x28
 801688c:	462e      	mov	r6, r5
 801688e:	f04f 0e0a 	mov.w	lr, #10
 8016892:	1c71      	adds	r1, r6, #1
 8016894:	eba1 0c05 	sub.w	ip, r1, r5
 8016898:	4563      	cmp	r3, ip
 801689a:	dc15      	bgt.n	80168c8 <_strtod_l+0x250>
 801689c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80168a0:	182b      	adds	r3, r5, r0
 80168a2:	2b08      	cmp	r3, #8
 80168a4:	f105 0501 	add.w	r5, r5, #1
 80168a8:	4405      	add	r5, r0
 80168aa:	dc1a      	bgt.n	80168e2 <_strtod_l+0x26a>
 80168ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80168ae:	230a      	movs	r3, #10
 80168b0:	fb03 2301 	mla	r3, r3, r1, r2
 80168b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80168b6:	2300      	movs	r3, #0
 80168b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80168ba:	1c51      	adds	r1, r2, #1
 80168bc:	9119      	str	r1, [sp, #100]	@ 0x64
 80168be:	7852      	ldrb	r2, [r2, #1]
 80168c0:	4618      	mov	r0, r3
 80168c2:	e7c5      	b.n	8016850 <_strtod_l+0x1d8>
 80168c4:	4648      	mov	r0, r9
 80168c6:	e7ce      	b.n	8016866 <_strtod_l+0x1ee>
 80168c8:	2e08      	cmp	r6, #8
 80168ca:	dc05      	bgt.n	80168d8 <_strtod_l+0x260>
 80168cc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80168ce:	fb0e f606 	mul.w	r6, lr, r6
 80168d2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80168d4:	460e      	mov	r6, r1
 80168d6:	e7dc      	b.n	8016892 <_strtod_l+0x21a>
 80168d8:	2910      	cmp	r1, #16
 80168da:	bfd8      	it	le
 80168dc:	fb0e f707 	mulle.w	r7, lr, r7
 80168e0:	e7f8      	b.n	80168d4 <_strtod_l+0x25c>
 80168e2:	2b0f      	cmp	r3, #15
 80168e4:	bfdc      	itt	le
 80168e6:	230a      	movle	r3, #10
 80168e8:	fb03 2707 	mlale	r7, r3, r7, r2
 80168ec:	e7e3      	b.n	80168b6 <_strtod_l+0x23e>
 80168ee:	2300      	movs	r3, #0
 80168f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80168f2:	2301      	movs	r3, #1
 80168f4:	e77a      	b.n	80167ec <_strtod_l+0x174>
 80168f6:	f04f 0c00 	mov.w	ip, #0
 80168fa:	1ca2      	adds	r2, r4, #2
 80168fc:	9219      	str	r2, [sp, #100]	@ 0x64
 80168fe:	78a2      	ldrb	r2, [r4, #2]
 8016900:	e782      	b.n	8016808 <_strtod_l+0x190>
 8016902:	f04f 0c01 	mov.w	ip, #1
 8016906:	e7f8      	b.n	80168fa <_strtod_l+0x282>
 8016908:	080187fc 	.word	0x080187fc
 801690c:	0801862f 	.word	0x0801862f
 8016910:	7ff00000 	.word	0x7ff00000
 8016914:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016916:	1c51      	adds	r1, r2, #1
 8016918:	9119      	str	r1, [sp, #100]	@ 0x64
 801691a:	7852      	ldrb	r2, [r2, #1]
 801691c:	2a30      	cmp	r2, #48	@ 0x30
 801691e:	d0f9      	beq.n	8016914 <_strtod_l+0x29c>
 8016920:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8016924:	2908      	cmp	r1, #8
 8016926:	f63f af75 	bhi.w	8016814 <_strtod_l+0x19c>
 801692a:	3a30      	subs	r2, #48	@ 0x30
 801692c:	9209      	str	r2, [sp, #36]	@ 0x24
 801692e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016930:	920f      	str	r2, [sp, #60]	@ 0x3c
 8016932:	f04f 080a 	mov.w	r8, #10
 8016936:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016938:	1c56      	adds	r6, r2, #1
 801693a:	9619      	str	r6, [sp, #100]	@ 0x64
 801693c:	7852      	ldrb	r2, [r2, #1]
 801693e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016942:	f1be 0f09 	cmp.w	lr, #9
 8016946:	d939      	bls.n	80169bc <_strtod_l+0x344>
 8016948:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801694a:	1a76      	subs	r6, r6, r1
 801694c:	2e08      	cmp	r6, #8
 801694e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8016952:	dc03      	bgt.n	801695c <_strtod_l+0x2e4>
 8016954:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016956:	4588      	cmp	r8, r1
 8016958:	bfa8      	it	ge
 801695a:	4688      	movge	r8, r1
 801695c:	f1bc 0f00 	cmp.w	ip, #0
 8016960:	d001      	beq.n	8016966 <_strtod_l+0x2ee>
 8016962:	f1c8 0800 	rsb	r8, r8, #0
 8016966:	2d00      	cmp	r5, #0
 8016968:	d14e      	bne.n	8016a08 <_strtod_l+0x390>
 801696a:	9908      	ldr	r1, [sp, #32]
 801696c:	4308      	orrs	r0, r1
 801696e:	f47f aebc 	bne.w	80166ea <_strtod_l+0x72>
 8016972:	2b00      	cmp	r3, #0
 8016974:	f47f aed4 	bne.w	8016720 <_strtod_l+0xa8>
 8016978:	2a69      	cmp	r2, #105	@ 0x69
 801697a:	d028      	beq.n	80169ce <_strtod_l+0x356>
 801697c:	dc25      	bgt.n	80169ca <_strtod_l+0x352>
 801697e:	2a49      	cmp	r2, #73	@ 0x49
 8016980:	d025      	beq.n	80169ce <_strtod_l+0x356>
 8016982:	2a4e      	cmp	r2, #78	@ 0x4e
 8016984:	f47f aecc 	bne.w	8016720 <_strtod_l+0xa8>
 8016988:	499a      	ldr	r1, [pc, #616]	@ (8016bf4 <_strtod_l+0x57c>)
 801698a:	a819      	add	r0, sp, #100	@ 0x64
 801698c:	f001 f9ec 	bl	8017d68 <__match>
 8016990:	2800      	cmp	r0, #0
 8016992:	f43f aec5 	beq.w	8016720 <_strtod_l+0xa8>
 8016996:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016998:	781b      	ldrb	r3, [r3, #0]
 801699a:	2b28      	cmp	r3, #40	@ 0x28
 801699c:	d12e      	bne.n	80169fc <_strtod_l+0x384>
 801699e:	4996      	ldr	r1, [pc, #600]	@ (8016bf8 <_strtod_l+0x580>)
 80169a0:	aa1c      	add	r2, sp, #112	@ 0x70
 80169a2:	a819      	add	r0, sp, #100	@ 0x64
 80169a4:	f001 f9f4 	bl	8017d90 <__hexnan>
 80169a8:	2805      	cmp	r0, #5
 80169aa:	d127      	bne.n	80169fc <_strtod_l+0x384>
 80169ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80169ae:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80169b2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80169b6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80169ba:	e696      	b.n	80166ea <_strtod_l+0x72>
 80169bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80169be:	fb08 2101 	mla	r1, r8, r1, r2
 80169c2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80169c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80169c8:	e7b5      	b.n	8016936 <_strtod_l+0x2be>
 80169ca:	2a6e      	cmp	r2, #110	@ 0x6e
 80169cc:	e7da      	b.n	8016984 <_strtod_l+0x30c>
 80169ce:	498b      	ldr	r1, [pc, #556]	@ (8016bfc <_strtod_l+0x584>)
 80169d0:	a819      	add	r0, sp, #100	@ 0x64
 80169d2:	f001 f9c9 	bl	8017d68 <__match>
 80169d6:	2800      	cmp	r0, #0
 80169d8:	f43f aea2 	beq.w	8016720 <_strtod_l+0xa8>
 80169dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80169de:	4988      	ldr	r1, [pc, #544]	@ (8016c00 <_strtod_l+0x588>)
 80169e0:	3b01      	subs	r3, #1
 80169e2:	a819      	add	r0, sp, #100	@ 0x64
 80169e4:	9319      	str	r3, [sp, #100]	@ 0x64
 80169e6:	f001 f9bf 	bl	8017d68 <__match>
 80169ea:	b910      	cbnz	r0, 80169f2 <_strtod_l+0x37a>
 80169ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80169ee:	3301      	adds	r3, #1
 80169f0:	9319      	str	r3, [sp, #100]	@ 0x64
 80169f2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8016c10 <_strtod_l+0x598>
 80169f6:	f04f 0a00 	mov.w	sl, #0
 80169fa:	e676      	b.n	80166ea <_strtod_l+0x72>
 80169fc:	4881      	ldr	r0, [pc, #516]	@ (8016c04 <_strtod_l+0x58c>)
 80169fe:	f000 feef 	bl	80177e0 <nan>
 8016a02:	ec5b ab10 	vmov	sl, fp, d0
 8016a06:	e670      	b.n	80166ea <_strtod_l+0x72>
 8016a08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016a0a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8016a0c:	eba8 0303 	sub.w	r3, r8, r3
 8016a10:	f1b9 0f00 	cmp.w	r9, #0
 8016a14:	bf08      	it	eq
 8016a16:	46a9      	moveq	r9, r5
 8016a18:	2d10      	cmp	r5, #16
 8016a1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8016a1c:	462c      	mov	r4, r5
 8016a1e:	bfa8      	it	ge
 8016a20:	2410      	movge	r4, #16
 8016a22:	f7f9 fd77 	bl	8010514 <__aeabi_ui2d>
 8016a26:	2d09      	cmp	r5, #9
 8016a28:	4682      	mov	sl, r0
 8016a2a:	468b      	mov	fp, r1
 8016a2c:	dc13      	bgt.n	8016a56 <_strtod_l+0x3de>
 8016a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	f43f ae5a 	beq.w	80166ea <_strtod_l+0x72>
 8016a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016a38:	dd78      	ble.n	8016b2c <_strtod_l+0x4b4>
 8016a3a:	2b16      	cmp	r3, #22
 8016a3c:	dc5f      	bgt.n	8016afe <_strtod_l+0x486>
 8016a3e:	4972      	ldr	r1, [pc, #456]	@ (8016c08 <_strtod_l+0x590>)
 8016a40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016a44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016a48:	4652      	mov	r2, sl
 8016a4a:	465b      	mov	r3, fp
 8016a4c:	f7f9 fddc 	bl	8010608 <__aeabi_dmul>
 8016a50:	4682      	mov	sl, r0
 8016a52:	468b      	mov	fp, r1
 8016a54:	e649      	b.n	80166ea <_strtod_l+0x72>
 8016a56:	4b6c      	ldr	r3, [pc, #432]	@ (8016c08 <_strtod_l+0x590>)
 8016a58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016a5c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8016a60:	f7f9 fdd2 	bl	8010608 <__aeabi_dmul>
 8016a64:	4682      	mov	sl, r0
 8016a66:	4638      	mov	r0, r7
 8016a68:	468b      	mov	fp, r1
 8016a6a:	f7f9 fd53 	bl	8010514 <__aeabi_ui2d>
 8016a6e:	4602      	mov	r2, r0
 8016a70:	460b      	mov	r3, r1
 8016a72:	4650      	mov	r0, sl
 8016a74:	4659      	mov	r1, fp
 8016a76:	f7f9 fc11 	bl	801029c <__adddf3>
 8016a7a:	2d0f      	cmp	r5, #15
 8016a7c:	4682      	mov	sl, r0
 8016a7e:	468b      	mov	fp, r1
 8016a80:	ddd5      	ble.n	8016a2e <_strtod_l+0x3b6>
 8016a82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016a84:	1b2c      	subs	r4, r5, r4
 8016a86:	441c      	add	r4, r3
 8016a88:	2c00      	cmp	r4, #0
 8016a8a:	f340 8093 	ble.w	8016bb4 <_strtod_l+0x53c>
 8016a8e:	f014 030f 	ands.w	r3, r4, #15
 8016a92:	d00a      	beq.n	8016aaa <_strtod_l+0x432>
 8016a94:	495c      	ldr	r1, [pc, #368]	@ (8016c08 <_strtod_l+0x590>)
 8016a96:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016a9a:	4652      	mov	r2, sl
 8016a9c:	465b      	mov	r3, fp
 8016a9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016aa2:	f7f9 fdb1 	bl	8010608 <__aeabi_dmul>
 8016aa6:	4682      	mov	sl, r0
 8016aa8:	468b      	mov	fp, r1
 8016aaa:	f034 040f 	bics.w	r4, r4, #15
 8016aae:	d073      	beq.n	8016b98 <_strtod_l+0x520>
 8016ab0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8016ab4:	dd49      	ble.n	8016b4a <_strtod_l+0x4d2>
 8016ab6:	2400      	movs	r4, #0
 8016ab8:	46a0      	mov	r8, r4
 8016aba:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016abc:	46a1      	mov	r9, r4
 8016abe:	9a05      	ldr	r2, [sp, #20]
 8016ac0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8016c10 <_strtod_l+0x598>
 8016ac4:	2322      	movs	r3, #34	@ 0x22
 8016ac6:	6013      	str	r3, [r2, #0]
 8016ac8:	f04f 0a00 	mov.w	sl, #0
 8016acc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	f43f ae0b 	beq.w	80166ea <_strtod_l+0x72>
 8016ad4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016ad6:	9805      	ldr	r0, [sp, #20]
 8016ad8:	f7ff f946 	bl	8015d68 <_Bfree>
 8016adc:	9805      	ldr	r0, [sp, #20]
 8016ade:	4649      	mov	r1, r9
 8016ae0:	f7ff f942 	bl	8015d68 <_Bfree>
 8016ae4:	9805      	ldr	r0, [sp, #20]
 8016ae6:	4641      	mov	r1, r8
 8016ae8:	f7ff f93e 	bl	8015d68 <_Bfree>
 8016aec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016aee:	9805      	ldr	r0, [sp, #20]
 8016af0:	f7ff f93a 	bl	8015d68 <_Bfree>
 8016af4:	9805      	ldr	r0, [sp, #20]
 8016af6:	4621      	mov	r1, r4
 8016af8:	f7ff f936 	bl	8015d68 <_Bfree>
 8016afc:	e5f5      	b.n	80166ea <_strtod_l+0x72>
 8016afe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016b00:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8016b04:	4293      	cmp	r3, r2
 8016b06:	dbbc      	blt.n	8016a82 <_strtod_l+0x40a>
 8016b08:	4c3f      	ldr	r4, [pc, #252]	@ (8016c08 <_strtod_l+0x590>)
 8016b0a:	f1c5 050f 	rsb	r5, r5, #15
 8016b0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8016b12:	4652      	mov	r2, sl
 8016b14:	465b      	mov	r3, fp
 8016b16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b1a:	f7f9 fd75 	bl	8010608 <__aeabi_dmul>
 8016b1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016b20:	1b5d      	subs	r5, r3, r5
 8016b22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8016b26:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016b2a:	e78f      	b.n	8016a4c <_strtod_l+0x3d4>
 8016b2c:	3316      	adds	r3, #22
 8016b2e:	dba8      	blt.n	8016a82 <_strtod_l+0x40a>
 8016b30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016b32:	eba3 0808 	sub.w	r8, r3, r8
 8016b36:	4b34      	ldr	r3, [pc, #208]	@ (8016c08 <_strtod_l+0x590>)
 8016b38:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8016b3c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8016b40:	4650      	mov	r0, sl
 8016b42:	4659      	mov	r1, fp
 8016b44:	f7f9 fe8a 	bl	801085c <__aeabi_ddiv>
 8016b48:	e782      	b.n	8016a50 <_strtod_l+0x3d8>
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	4f2f      	ldr	r7, [pc, #188]	@ (8016c0c <_strtod_l+0x594>)
 8016b4e:	1124      	asrs	r4, r4, #4
 8016b50:	4650      	mov	r0, sl
 8016b52:	4659      	mov	r1, fp
 8016b54:	461e      	mov	r6, r3
 8016b56:	2c01      	cmp	r4, #1
 8016b58:	dc21      	bgt.n	8016b9e <_strtod_l+0x526>
 8016b5a:	b10b      	cbz	r3, 8016b60 <_strtod_l+0x4e8>
 8016b5c:	4682      	mov	sl, r0
 8016b5e:	468b      	mov	fp, r1
 8016b60:	492a      	ldr	r1, [pc, #168]	@ (8016c0c <_strtod_l+0x594>)
 8016b62:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8016b66:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8016b6a:	4652      	mov	r2, sl
 8016b6c:	465b      	mov	r3, fp
 8016b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b72:	f7f9 fd49 	bl	8010608 <__aeabi_dmul>
 8016b76:	4b26      	ldr	r3, [pc, #152]	@ (8016c10 <_strtod_l+0x598>)
 8016b78:	460a      	mov	r2, r1
 8016b7a:	400b      	ands	r3, r1
 8016b7c:	4925      	ldr	r1, [pc, #148]	@ (8016c14 <_strtod_l+0x59c>)
 8016b7e:	428b      	cmp	r3, r1
 8016b80:	4682      	mov	sl, r0
 8016b82:	d898      	bhi.n	8016ab6 <_strtod_l+0x43e>
 8016b84:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8016b88:	428b      	cmp	r3, r1
 8016b8a:	bf86      	itte	hi
 8016b8c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8016c18 <_strtod_l+0x5a0>
 8016b90:	f04f 3aff 	movhi.w	sl, #4294967295
 8016b94:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8016b98:	2300      	movs	r3, #0
 8016b9a:	9308      	str	r3, [sp, #32]
 8016b9c:	e076      	b.n	8016c8c <_strtod_l+0x614>
 8016b9e:	07e2      	lsls	r2, r4, #31
 8016ba0:	d504      	bpl.n	8016bac <_strtod_l+0x534>
 8016ba2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016ba6:	f7f9 fd2f 	bl	8010608 <__aeabi_dmul>
 8016baa:	2301      	movs	r3, #1
 8016bac:	3601      	adds	r6, #1
 8016bae:	1064      	asrs	r4, r4, #1
 8016bb0:	3708      	adds	r7, #8
 8016bb2:	e7d0      	b.n	8016b56 <_strtod_l+0x4de>
 8016bb4:	d0f0      	beq.n	8016b98 <_strtod_l+0x520>
 8016bb6:	4264      	negs	r4, r4
 8016bb8:	f014 020f 	ands.w	r2, r4, #15
 8016bbc:	d00a      	beq.n	8016bd4 <_strtod_l+0x55c>
 8016bbe:	4b12      	ldr	r3, [pc, #72]	@ (8016c08 <_strtod_l+0x590>)
 8016bc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016bc4:	4650      	mov	r0, sl
 8016bc6:	4659      	mov	r1, fp
 8016bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bcc:	f7f9 fe46 	bl	801085c <__aeabi_ddiv>
 8016bd0:	4682      	mov	sl, r0
 8016bd2:	468b      	mov	fp, r1
 8016bd4:	1124      	asrs	r4, r4, #4
 8016bd6:	d0df      	beq.n	8016b98 <_strtod_l+0x520>
 8016bd8:	2c1f      	cmp	r4, #31
 8016bda:	dd1f      	ble.n	8016c1c <_strtod_l+0x5a4>
 8016bdc:	2400      	movs	r4, #0
 8016bde:	46a0      	mov	r8, r4
 8016be0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016be2:	46a1      	mov	r9, r4
 8016be4:	9a05      	ldr	r2, [sp, #20]
 8016be6:	2322      	movs	r3, #34	@ 0x22
 8016be8:	f04f 0a00 	mov.w	sl, #0
 8016bec:	f04f 0b00 	mov.w	fp, #0
 8016bf0:	6013      	str	r3, [r2, #0]
 8016bf2:	e76b      	b.n	8016acc <_strtod_l+0x454>
 8016bf4:	0801851d 	.word	0x0801851d
 8016bf8:	080187e8 	.word	0x080187e8
 8016bfc:	08018515 	.word	0x08018515
 8016c00:	0801854c 	.word	0x0801854c
 8016c04:	08018685 	.word	0x08018685
 8016c08:	08018720 	.word	0x08018720
 8016c0c:	080186f8 	.word	0x080186f8
 8016c10:	7ff00000 	.word	0x7ff00000
 8016c14:	7ca00000 	.word	0x7ca00000
 8016c18:	7fefffff 	.word	0x7fefffff
 8016c1c:	f014 0310 	ands.w	r3, r4, #16
 8016c20:	bf18      	it	ne
 8016c22:	236a      	movne	r3, #106	@ 0x6a
 8016c24:	4ea9      	ldr	r6, [pc, #676]	@ (8016ecc <_strtod_l+0x854>)
 8016c26:	9308      	str	r3, [sp, #32]
 8016c28:	4650      	mov	r0, sl
 8016c2a:	4659      	mov	r1, fp
 8016c2c:	2300      	movs	r3, #0
 8016c2e:	07e7      	lsls	r7, r4, #31
 8016c30:	d504      	bpl.n	8016c3c <_strtod_l+0x5c4>
 8016c32:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016c36:	f7f9 fce7 	bl	8010608 <__aeabi_dmul>
 8016c3a:	2301      	movs	r3, #1
 8016c3c:	1064      	asrs	r4, r4, #1
 8016c3e:	f106 0608 	add.w	r6, r6, #8
 8016c42:	d1f4      	bne.n	8016c2e <_strtod_l+0x5b6>
 8016c44:	b10b      	cbz	r3, 8016c4a <_strtod_l+0x5d2>
 8016c46:	4682      	mov	sl, r0
 8016c48:	468b      	mov	fp, r1
 8016c4a:	9b08      	ldr	r3, [sp, #32]
 8016c4c:	b1b3      	cbz	r3, 8016c7c <_strtod_l+0x604>
 8016c4e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8016c52:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	4659      	mov	r1, fp
 8016c5a:	dd0f      	ble.n	8016c7c <_strtod_l+0x604>
 8016c5c:	2b1f      	cmp	r3, #31
 8016c5e:	dd56      	ble.n	8016d0e <_strtod_l+0x696>
 8016c60:	2b34      	cmp	r3, #52	@ 0x34
 8016c62:	bfde      	ittt	le
 8016c64:	f04f 33ff 	movle.w	r3, #4294967295
 8016c68:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8016c6c:	4093      	lslle	r3, r2
 8016c6e:	f04f 0a00 	mov.w	sl, #0
 8016c72:	bfcc      	ite	gt
 8016c74:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8016c78:	ea03 0b01 	andle.w	fp, r3, r1
 8016c7c:	2200      	movs	r2, #0
 8016c7e:	2300      	movs	r3, #0
 8016c80:	4650      	mov	r0, sl
 8016c82:	4659      	mov	r1, fp
 8016c84:	f7f9 ff28 	bl	8010ad8 <__aeabi_dcmpeq>
 8016c88:	2800      	cmp	r0, #0
 8016c8a:	d1a7      	bne.n	8016bdc <_strtod_l+0x564>
 8016c8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016c8e:	9300      	str	r3, [sp, #0]
 8016c90:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016c92:	9805      	ldr	r0, [sp, #20]
 8016c94:	462b      	mov	r3, r5
 8016c96:	464a      	mov	r2, r9
 8016c98:	f7ff f8ce 	bl	8015e38 <__s2b>
 8016c9c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8016c9e:	2800      	cmp	r0, #0
 8016ca0:	f43f af09 	beq.w	8016ab6 <_strtod_l+0x43e>
 8016ca4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016ca6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016ca8:	2a00      	cmp	r2, #0
 8016caa:	eba3 0308 	sub.w	r3, r3, r8
 8016cae:	bfa8      	it	ge
 8016cb0:	2300      	movge	r3, #0
 8016cb2:	9312      	str	r3, [sp, #72]	@ 0x48
 8016cb4:	2400      	movs	r4, #0
 8016cb6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016cba:	9316      	str	r3, [sp, #88]	@ 0x58
 8016cbc:	46a0      	mov	r8, r4
 8016cbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016cc0:	9805      	ldr	r0, [sp, #20]
 8016cc2:	6859      	ldr	r1, [r3, #4]
 8016cc4:	f7ff f810 	bl	8015ce8 <_Balloc>
 8016cc8:	4681      	mov	r9, r0
 8016cca:	2800      	cmp	r0, #0
 8016ccc:	f43f aef7 	beq.w	8016abe <_strtod_l+0x446>
 8016cd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016cd2:	691a      	ldr	r2, [r3, #16]
 8016cd4:	3202      	adds	r2, #2
 8016cd6:	f103 010c 	add.w	r1, r3, #12
 8016cda:	0092      	lsls	r2, r2, #2
 8016cdc:	300c      	adds	r0, #12
 8016cde:	f000 fd71 	bl	80177c4 <memcpy>
 8016ce2:	ec4b ab10 	vmov	d0, sl, fp
 8016ce6:	9805      	ldr	r0, [sp, #20]
 8016ce8:	aa1c      	add	r2, sp, #112	@ 0x70
 8016cea:	a91b      	add	r1, sp, #108	@ 0x6c
 8016cec:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8016cf0:	f7ff fbd6 	bl	80164a0 <__d2b>
 8016cf4:	901a      	str	r0, [sp, #104]	@ 0x68
 8016cf6:	2800      	cmp	r0, #0
 8016cf8:	f43f aee1 	beq.w	8016abe <_strtod_l+0x446>
 8016cfc:	9805      	ldr	r0, [sp, #20]
 8016cfe:	2101      	movs	r1, #1
 8016d00:	f7ff f930 	bl	8015f64 <__i2b>
 8016d04:	4680      	mov	r8, r0
 8016d06:	b948      	cbnz	r0, 8016d1c <_strtod_l+0x6a4>
 8016d08:	f04f 0800 	mov.w	r8, #0
 8016d0c:	e6d7      	b.n	8016abe <_strtod_l+0x446>
 8016d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8016d12:	fa02 f303 	lsl.w	r3, r2, r3
 8016d16:	ea03 0a0a 	and.w	sl, r3, sl
 8016d1a:	e7af      	b.n	8016c7c <_strtod_l+0x604>
 8016d1c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8016d1e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8016d20:	2d00      	cmp	r5, #0
 8016d22:	bfab      	itete	ge
 8016d24:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8016d26:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8016d28:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8016d2a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8016d2c:	bfac      	ite	ge
 8016d2e:	18ef      	addge	r7, r5, r3
 8016d30:	1b5e      	sublt	r6, r3, r5
 8016d32:	9b08      	ldr	r3, [sp, #32]
 8016d34:	1aed      	subs	r5, r5, r3
 8016d36:	4415      	add	r5, r2
 8016d38:	4b65      	ldr	r3, [pc, #404]	@ (8016ed0 <_strtod_l+0x858>)
 8016d3a:	3d01      	subs	r5, #1
 8016d3c:	429d      	cmp	r5, r3
 8016d3e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8016d42:	da50      	bge.n	8016de6 <_strtod_l+0x76e>
 8016d44:	1b5b      	subs	r3, r3, r5
 8016d46:	2b1f      	cmp	r3, #31
 8016d48:	eba2 0203 	sub.w	r2, r2, r3
 8016d4c:	f04f 0101 	mov.w	r1, #1
 8016d50:	dc3d      	bgt.n	8016dce <_strtod_l+0x756>
 8016d52:	fa01 f303 	lsl.w	r3, r1, r3
 8016d56:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016d58:	2300      	movs	r3, #0
 8016d5a:	9310      	str	r3, [sp, #64]	@ 0x40
 8016d5c:	18bd      	adds	r5, r7, r2
 8016d5e:	9b08      	ldr	r3, [sp, #32]
 8016d60:	42af      	cmp	r7, r5
 8016d62:	4416      	add	r6, r2
 8016d64:	441e      	add	r6, r3
 8016d66:	463b      	mov	r3, r7
 8016d68:	bfa8      	it	ge
 8016d6a:	462b      	movge	r3, r5
 8016d6c:	42b3      	cmp	r3, r6
 8016d6e:	bfa8      	it	ge
 8016d70:	4633      	movge	r3, r6
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	bfc2      	ittt	gt
 8016d76:	1aed      	subgt	r5, r5, r3
 8016d78:	1af6      	subgt	r6, r6, r3
 8016d7a:	1aff      	subgt	r7, r7, r3
 8016d7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	dd16      	ble.n	8016db0 <_strtod_l+0x738>
 8016d82:	4641      	mov	r1, r8
 8016d84:	9805      	ldr	r0, [sp, #20]
 8016d86:	461a      	mov	r2, r3
 8016d88:	f7ff f9a4 	bl	80160d4 <__pow5mult>
 8016d8c:	4680      	mov	r8, r0
 8016d8e:	2800      	cmp	r0, #0
 8016d90:	d0ba      	beq.n	8016d08 <_strtod_l+0x690>
 8016d92:	4601      	mov	r1, r0
 8016d94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016d96:	9805      	ldr	r0, [sp, #20]
 8016d98:	f7ff f8fa 	bl	8015f90 <__multiply>
 8016d9c:	900a      	str	r0, [sp, #40]	@ 0x28
 8016d9e:	2800      	cmp	r0, #0
 8016da0:	f43f ae8d 	beq.w	8016abe <_strtod_l+0x446>
 8016da4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016da6:	9805      	ldr	r0, [sp, #20]
 8016da8:	f7fe ffde 	bl	8015d68 <_Bfree>
 8016dac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016dae:	931a      	str	r3, [sp, #104]	@ 0x68
 8016db0:	2d00      	cmp	r5, #0
 8016db2:	dc1d      	bgt.n	8016df0 <_strtod_l+0x778>
 8016db4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	dd23      	ble.n	8016e02 <_strtod_l+0x78a>
 8016dba:	4649      	mov	r1, r9
 8016dbc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8016dbe:	9805      	ldr	r0, [sp, #20]
 8016dc0:	f7ff f988 	bl	80160d4 <__pow5mult>
 8016dc4:	4681      	mov	r9, r0
 8016dc6:	b9e0      	cbnz	r0, 8016e02 <_strtod_l+0x78a>
 8016dc8:	f04f 0900 	mov.w	r9, #0
 8016dcc:	e677      	b.n	8016abe <_strtod_l+0x446>
 8016dce:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8016dd2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8016dd6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8016dda:	35e2      	adds	r5, #226	@ 0xe2
 8016ddc:	fa01 f305 	lsl.w	r3, r1, r5
 8016de0:	9310      	str	r3, [sp, #64]	@ 0x40
 8016de2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016de4:	e7ba      	b.n	8016d5c <_strtod_l+0x6e4>
 8016de6:	2300      	movs	r3, #0
 8016de8:	9310      	str	r3, [sp, #64]	@ 0x40
 8016dea:	2301      	movs	r3, #1
 8016dec:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016dee:	e7b5      	b.n	8016d5c <_strtod_l+0x6e4>
 8016df0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016df2:	9805      	ldr	r0, [sp, #20]
 8016df4:	462a      	mov	r2, r5
 8016df6:	f7ff f9c7 	bl	8016188 <__lshift>
 8016dfa:	901a      	str	r0, [sp, #104]	@ 0x68
 8016dfc:	2800      	cmp	r0, #0
 8016dfe:	d1d9      	bne.n	8016db4 <_strtod_l+0x73c>
 8016e00:	e65d      	b.n	8016abe <_strtod_l+0x446>
 8016e02:	2e00      	cmp	r6, #0
 8016e04:	dd07      	ble.n	8016e16 <_strtod_l+0x79e>
 8016e06:	4649      	mov	r1, r9
 8016e08:	9805      	ldr	r0, [sp, #20]
 8016e0a:	4632      	mov	r2, r6
 8016e0c:	f7ff f9bc 	bl	8016188 <__lshift>
 8016e10:	4681      	mov	r9, r0
 8016e12:	2800      	cmp	r0, #0
 8016e14:	d0d8      	beq.n	8016dc8 <_strtod_l+0x750>
 8016e16:	2f00      	cmp	r7, #0
 8016e18:	dd08      	ble.n	8016e2c <_strtod_l+0x7b4>
 8016e1a:	4641      	mov	r1, r8
 8016e1c:	9805      	ldr	r0, [sp, #20]
 8016e1e:	463a      	mov	r2, r7
 8016e20:	f7ff f9b2 	bl	8016188 <__lshift>
 8016e24:	4680      	mov	r8, r0
 8016e26:	2800      	cmp	r0, #0
 8016e28:	f43f ae49 	beq.w	8016abe <_strtod_l+0x446>
 8016e2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016e2e:	9805      	ldr	r0, [sp, #20]
 8016e30:	464a      	mov	r2, r9
 8016e32:	f7ff fa31 	bl	8016298 <__mdiff>
 8016e36:	4604      	mov	r4, r0
 8016e38:	2800      	cmp	r0, #0
 8016e3a:	f43f ae40 	beq.w	8016abe <_strtod_l+0x446>
 8016e3e:	68c3      	ldr	r3, [r0, #12]
 8016e40:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016e42:	2300      	movs	r3, #0
 8016e44:	60c3      	str	r3, [r0, #12]
 8016e46:	4641      	mov	r1, r8
 8016e48:	f7ff fa0a 	bl	8016260 <__mcmp>
 8016e4c:	2800      	cmp	r0, #0
 8016e4e:	da45      	bge.n	8016edc <_strtod_l+0x864>
 8016e50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016e52:	ea53 030a 	orrs.w	r3, r3, sl
 8016e56:	d16b      	bne.n	8016f30 <_strtod_l+0x8b8>
 8016e58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d167      	bne.n	8016f30 <_strtod_l+0x8b8>
 8016e60:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016e64:	0d1b      	lsrs	r3, r3, #20
 8016e66:	051b      	lsls	r3, r3, #20
 8016e68:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016e6c:	d960      	bls.n	8016f30 <_strtod_l+0x8b8>
 8016e6e:	6963      	ldr	r3, [r4, #20]
 8016e70:	b913      	cbnz	r3, 8016e78 <_strtod_l+0x800>
 8016e72:	6923      	ldr	r3, [r4, #16]
 8016e74:	2b01      	cmp	r3, #1
 8016e76:	dd5b      	ble.n	8016f30 <_strtod_l+0x8b8>
 8016e78:	4621      	mov	r1, r4
 8016e7a:	2201      	movs	r2, #1
 8016e7c:	9805      	ldr	r0, [sp, #20]
 8016e7e:	f7ff f983 	bl	8016188 <__lshift>
 8016e82:	4641      	mov	r1, r8
 8016e84:	4604      	mov	r4, r0
 8016e86:	f7ff f9eb 	bl	8016260 <__mcmp>
 8016e8a:	2800      	cmp	r0, #0
 8016e8c:	dd50      	ble.n	8016f30 <_strtod_l+0x8b8>
 8016e8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016e92:	9a08      	ldr	r2, [sp, #32]
 8016e94:	0d1b      	lsrs	r3, r3, #20
 8016e96:	051b      	lsls	r3, r3, #20
 8016e98:	2a00      	cmp	r2, #0
 8016e9a:	d06a      	beq.n	8016f72 <_strtod_l+0x8fa>
 8016e9c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016ea0:	d867      	bhi.n	8016f72 <_strtod_l+0x8fa>
 8016ea2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8016ea6:	f67f ae9d 	bls.w	8016be4 <_strtod_l+0x56c>
 8016eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8016ed4 <_strtod_l+0x85c>)
 8016eac:	4650      	mov	r0, sl
 8016eae:	4659      	mov	r1, fp
 8016eb0:	2200      	movs	r2, #0
 8016eb2:	f7f9 fba9 	bl	8010608 <__aeabi_dmul>
 8016eb6:	4b08      	ldr	r3, [pc, #32]	@ (8016ed8 <_strtod_l+0x860>)
 8016eb8:	400b      	ands	r3, r1
 8016eba:	4682      	mov	sl, r0
 8016ebc:	468b      	mov	fp, r1
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	f47f ae08 	bne.w	8016ad4 <_strtod_l+0x45c>
 8016ec4:	9a05      	ldr	r2, [sp, #20]
 8016ec6:	2322      	movs	r3, #34	@ 0x22
 8016ec8:	6013      	str	r3, [r2, #0]
 8016eca:	e603      	b.n	8016ad4 <_strtod_l+0x45c>
 8016ecc:	08018810 	.word	0x08018810
 8016ed0:	fffffc02 	.word	0xfffffc02
 8016ed4:	39500000 	.word	0x39500000
 8016ed8:	7ff00000 	.word	0x7ff00000
 8016edc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8016ee0:	d165      	bne.n	8016fae <_strtod_l+0x936>
 8016ee2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016ee4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016ee8:	b35a      	cbz	r2, 8016f42 <_strtod_l+0x8ca>
 8016eea:	4a9f      	ldr	r2, [pc, #636]	@ (8017168 <_strtod_l+0xaf0>)
 8016eec:	4293      	cmp	r3, r2
 8016eee:	d12b      	bne.n	8016f48 <_strtod_l+0x8d0>
 8016ef0:	9b08      	ldr	r3, [sp, #32]
 8016ef2:	4651      	mov	r1, sl
 8016ef4:	b303      	cbz	r3, 8016f38 <_strtod_l+0x8c0>
 8016ef6:	4b9d      	ldr	r3, [pc, #628]	@ (801716c <_strtod_l+0xaf4>)
 8016ef8:	465a      	mov	r2, fp
 8016efa:	4013      	ands	r3, r2
 8016efc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8016f00:	f04f 32ff 	mov.w	r2, #4294967295
 8016f04:	d81b      	bhi.n	8016f3e <_strtod_l+0x8c6>
 8016f06:	0d1b      	lsrs	r3, r3, #20
 8016f08:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8016f10:	4299      	cmp	r1, r3
 8016f12:	d119      	bne.n	8016f48 <_strtod_l+0x8d0>
 8016f14:	4b96      	ldr	r3, [pc, #600]	@ (8017170 <_strtod_l+0xaf8>)
 8016f16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016f18:	429a      	cmp	r2, r3
 8016f1a:	d102      	bne.n	8016f22 <_strtod_l+0x8aa>
 8016f1c:	3101      	adds	r1, #1
 8016f1e:	f43f adce 	beq.w	8016abe <_strtod_l+0x446>
 8016f22:	4b92      	ldr	r3, [pc, #584]	@ (801716c <_strtod_l+0xaf4>)
 8016f24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016f26:	401a      	ands	r2, r3
 8016f28:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8016f2c:	f04f 0a00 	mov.w	sl, #0
 8016f30:	9b08      	ldr	r3, [sp, #32]
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d1b9      	bne.n	8016eaa <_strtod_l+0x832>
 8016f36:	e5cd      	b.n	8016ad4 <_strtod_l+0x45c>
 8016f38:	f04f 33ff 	mov.w	r3, #4294967295
 8016f3c:	e7e8      	b.n	8016f10 <_strtod_l+0x898>
 8016f3e:	4613      	mov	r3, r2
 8016f40:	e7e6      	b.n	8016f10 <_strtod_l+0x898>
 8016f42:	ea53 030a 	orrs.w	r3, r3, sl
 8016f46:	d0a2      	beq.n	8016e8e <_strtod_l+0x816>
 8016f48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016f4a:	b1db      	cbz	r3, 8016f84 <_strtod_l+0x90c>
 8016f4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016f4e:	4213      	tst	r3, r2
 8016f50:	d0ee      	beq.n	8016f30 <_strtod_l+0x8b8>
 8016f52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016f54:	9a08      	ldr	r2, [sp, #32]
 8016f56:	4650      	mov	r0, sl
 8016f58:	4659      	mov	r1, fp
 8016f5a:	b1bb      	cbz	r3, 8016f8c <_strtod_l+0x914>
 8016f5c:	f7ff fb6e 	bl	801663c <sulp>
 8016f60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016f64:	ec53 2b10 	vmov	r2, r3, d0
 8016f68:	f7f9 f998 	bl	801029c <__adddf3>
 8016f6c:	4682      	mov	sl, r0
 8016f6e:	468b      	mov	fp, r1
 8016f70:	e7de      	b.n	8016f30 <_strtod_l+0x8b8>
 8016f72:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8016f76:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016f7a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016f7e:	f04f 3aff 	mov.w	sl, #4294967295
 8016f82:	e7d5      	b.n	8016f30 <_strtod_l+0x8b8>
 8016f84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016f86:	ea13 0f0a 	tst.w	r3, sl
 8016f8a:	e7e1      	b.n	8016f50 <_strtod_l+0x8d8>
 8016f8c:	f7ff fb56 	bl	801663c <sulp>
 8016f90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016f94:	ec53 2b10 	vmov	r2, r3, d0
 8016f98:	f7f9 f97e 	bl	8010298 <__aeabi_dsub>
 8016f9c:	2200      	movs	r2, #0
 8016f9e:	2300      	movs	r3, #0
 8016fa0:	4682      	mov	sl, r0
 8016fa2:	468b      	mov	fp, r1
 8016fa4:	f7f9 fd98 	bl	8010ad8 <__aeabi_dcmpeq>
 8016fa8:	2800      	cmp	r0, #0
 8016faa:	d0c1      	beq.n	8016f30 <_strtod_l+0x8b8>
 8016fac:	e61a      	b.n	8016be4 <_strtod_l+0x56c>
 8016fae:	4641      	mov	r1, r8
 8016fb0:	4620      	mov	r0, r4
 8016fb2:	f7ff facd 	bl	8016550 <__ratio>
 8016fb6:	ec57 6b10 	vmov	r6, r7, d0
 8016fba:	2200      	movs	r2, #0
 8016fbc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8016fc0:	4630      	mov	r0, r6
 8016fc2:	4639      	mov	r1, r7
 8016fc4:	f7f9 fd9c 	bl	8010b00 <__aeabi_dcmple>
 8016fc8:	2800      	cmp	r0, #0
 8016fca:	d06f      	beq.n	80170ac <_strtod_l+0xa34>
 8016fcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d17a      	bne.n	80170c8 <_strtod_l+0xa50>
 8016fd2:	f1ba 0f00 	cmp.w	sl, #0
 8016fd6:	d158      	bne.n	801708a <_strtod_l+0xa12>
 8016fd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016fda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d15a      	bne.n	8017098 <_strtod_l+0xa20>
 8016fe2:	4b64      	ldr	r3, [pc, #400]	@ (8017174 <_strtod_l+0xafc>)
 8016fe4:	2200      	movs	r2, #0
 8016fe6:	4630      	mov	r0, r6
 8016fe8:	4639      	mov	r1, r7
 8016fea:	f7f9 fd7f 	bl	8010aec <__aeabi_dcmplt>
 8016fee:	2800      	cmp	r0, #0
 8016ff0:	d159      	bne.n	80170a6 <_strtod_l+0xa2e>
 8016ff2:	4630      	mov	r0, r6
 8016ff4:	4639      	mov	r1, r7
 8016ff6:	4b60      	ldr	r3, [pc, #384]	@ (8017178 <_strtod_l+0xb00>)
 8016ff8:	2200      	movs	r2, #0
 8016ffa:	f7f9 fb05 	bl	8010608 <__aeabi_dmul>
 8016ffe:	4606      	mov	r6, r0
 8017000:	460f      	mov	r7, r1
 8017002:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8017006:	9606      	str	r6, [sp, #24]
 8017008:	9307      	str	r3, [sp, #28]
 801700a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801700e:	4d57      	ldr	r5, [pc, #348]	@ (801716c <_strtod_l+0xaf4>)
 8017010:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8017014:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017016:	401d      	ands	r5, r3
 8017018:	4b58      	ldr	r3, [pc, #352]	@ (801717c <_strtod_l+0xb04>)
 801701a:	429d      	cmp	r5, r3
 801701c:	f040 80b2 	bne.w	8017184 <_strtod_l+0xb0c>
 8017020:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017022:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8017026:	ec4b ab10 	vmov	d0, sl, fp
 801702a:	f7ff f9c9 	bl	80163c0 <__ulp>
 801702e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017032:	ec51 0b10 	vmov	r0, r1, d0
 8017036:	f7f9 fae7 	bl	8010608 <__aeabi_dmul>
 801703a:	4652      	mov	r2, sl
 801703c:	465b      	mov	r3, fp
 801703e:	f7f9 f92d 	bl	801029c <__adddf3>
 8017042:	460b      	mov	r3, r1
 8017044:	4949      	ldr	r1, [pc, #292]	@ (801716c <_strtod_l+0xaf4>)
 8017046:	4a4e      	ldr	r2, [pc, #312]	@ (8017180 <_strtod_l+0xb08>)
 8017048:	4019      	ands	r1, r3
 801704a:	4291      	cmp	r1, r2
 801704c:	4682      	mov	sl, r0
 801704e:	d942      	bls.n	80170d6 <_strtod_l+0xa5e>
 8017050:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017052:	4b47      	ldr	r3, [pc, #284]	@ (8017170 <_strtod_l+0xaf8>)
 8017054:	429a      	cmp	r2, r3
 8017056:	d103      	bne.n	8017060 <_strtod_l+0x9e8>
 8017058:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801705a:	3301      	adds	r3, #1
 801705c:	f43f ad2f 	beq.w	8016abe <_strtod_l+0x446>
 8017060:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8017170 <_strtod_l+0xaf8>
 8017064:	f04f 3aff 	mov.w	sl, #4294967295
 8017068:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801706a:	9805      	ldr	r0, [sp, #20]
 801706c:	f7fe fe7c 	bl	8015d68 <_Bfree>
 8017070:	9805      	ldr	r0, [sp, #20]
 8017072:	4649      	mov	r1, r9
 8017074:	f7fe fe78 	bl	8015d68 <_Bfree>
 8017078:	9805      	ldr	r0, [sp, #20]
 801707a:	4641      	mov	r1, r8
 801707c:	f7fe fe74 	bl	8015d68 <_Bfree>
 8017080:	9805      	ldr	r0, [sp, #20]
 8017082:	4621      	mov	r1, r4
 8017084:	f7fe fe70 	bl	8015d68 <_Bfree>
 8017088:	e619      	b.n	8016cbe <_strtod_l+0x646>
 801708a:	f1ba 0f01 	cmp.w	sl, #1
 801708e:	d103      	bne.n	8017098 <_strtod_l+0xa20>
 8017090:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017092:	2b00      	cmp	r3, #0
 8017094:	f43f ada6 	beq.w	8016be4 <_strtod_l+0x56c>
 8017098:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8017148 <_strtod_l+0xad0>
 801709c:	4f35      	ldr	r7, [pc, #212]	@ (8017174 <_strtod_l+0xafc>)
 801709e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80170a2:	2600      	movs	r6, #0
 80170a4:	e7b1      	b.n	801700a <_strtod_l+0x992>
 80170a6:	4f34      	ldr	r7, [pc, #208]	@ (8017178 <_strtod_l+0xb00>)
 80170a8:	2600      	movs	r6, #0
 80170aa:	e7aa      	b.n	8017002 <_strtod_l+0x98a>
 80170ac:	4b32      	ldr	r3, [pc, #200]	@ (8017178 <_strtod_l+0xb00>)
 80170ae:	4630      	mov	r0, r6
 80170b0:	4639      	mov	r1, r7
 80170b2:	2200      	movs	r2, #0
 80170b4:	f7f9 faa8 	bl	8010608 <__aeabi_dmul>
 80170b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80170ba:	4606      	mov	r6, r0
 80170bc:	460f      	mov	r7, r1
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d09f      	beq.n	8017002 <_strtod_l+0x98a>
 80170c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80170c6:	e7a0      	b.n	801700a <_strtod_l+0x992>
 80170c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8017150 <_strtod_l+0xad8>
 80170cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80170d0:	ec57 6b17 	vmov	r6, r7, d7
 80170d4:	e799      	b.n	801700a <_strtod_l+0x992>
 80170d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80170da:	9b08      	ldr	r3, [sp, #32]
 80170dc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d1c1      	bne.n	8017068 <_strtod_l+0x9f0>
 80170e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80170e8:	0d1b      	lsrs	r3, r3, #20
 80170ea:	051b      	lsls	r3, r3, #20
 80170ec:	429d      	cmp	r5, r3
 80170ee:	d1bb      	bne.n	8017068 <_strtod_l+0x9f0>
 80170f0:	4630      	mov	r0, r6
 80170f2:	4639      	mov	r1, r7
 80170f4:	f7f9 fde8 	bl	8010cc8 <__aeabi_d2lz>
 80170f8:	f7f9 fa58 	bl	80105ac <__aeabi_l2d>
 80170fc:	4602      	mov	r2, r0
 80170fe:	460b      	mov	r3, r1
 8017100:	4630      	mov	r0, r6
 8017102:	4639      	mov	r1, r7
 8017104:	f7f9 f8c8 	bl	8010298 <__aeabi_dsub>
 8017108:	460b      	mov	r3, r1
 801710a:	4602      	mov	r2, r0
 801710c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8017110:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8017114:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017116:	ea46 060a 	orr.w	r6, r6, sl
 801711a:	431e      	orrs	r6, r3
 801711c:	d06f      	beq.n	80171fe <_strtod_l+0xb86>
 801711e:	a30e      	add	r3, pc, #56	@ (adr r3, 8017158 <_strtod_l+0xae0>)
 8017120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017124:	f7f9 fce2 	bl	8010aec <__aeabi_dcmplt>
 8017128:	2800      	cmp	r0, #0
 801712a:	f47f acd3 	bne.w	8016ad4 <_strtod_l+0x45c>
 801712e:	a30c      	add	r3, pc, #48	@ (adr r3, 8017160 <_strtod_l+0xae8>)
 8017130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017134:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017138:	f7f9 fcf6 	bl	8010b28 <__aeabi_dcmpgt>
 801713c:	2800      	cmp	r0, #0
 801713e:	d093      	beq.n	8017068 <_strtod_l+0x9f0>
 8017140:	e4c8      	b.n	8016ad4 <_strtod_l+0x45c>
 8017142:	bf00      	nop
 8017144:	f3af 8000 	nop.w
 8017148:	00000000 	.word	0x00000000
 801714c:	bff00000 	.word	0xbff00000
 8017150:	00000000 	.word	0x00000000
 8017154:	3ff00000 	.word	0x3ff00000
 8017158:	94a03595 	.word	0x94a03595
 801715c:	3fdfffff 	.word	0x3fdfffff
 8017160:	35afe535 	.word	0x35afe535
 8017164:	3fe00000 	.word	0x3fe00000
 8017168:	000fffff 	.word	0x000fffff
 801716c:	7ff00000 	.word	0x7ff00000
 8017170:	7fefffff 	.word	0x7fefffff
 8017174:	3ff00000 	.word	0x3ff00000
 8017178:	3fe00000 	.word	0x3fe00000
 801717c:	7fe00000 	.word	0x7fe00000
 8017180:	7c9fffff 	.word	0x7c9fffff
 8017184:	9b08      	ldr	r3, [sp, #32]
 8017186:	b323      	cbz	r3, 80171d2 <_strtod_l+0xb5a>
 8017188:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801718c:	d821      	bhi.n	80171d2 <_strtod_l+0xb5a>
 801718e:	a328      	add	r3, pc, #160	@ (adr r3, 8017230 <_strtod_l+0xbb8>)
 8017190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017194:	4630      	mov	r0, r6
 8017196:	4639      	mov	r1, r7
 8017198:	f7f9 fcb2 	bl	8010b00 <__aeabi_dcmple>
 801719c:	b1a0      	cbz	r0, 80171c8 <_strtod_l+0xb50>
 801719e:	4639      	mov	r1, r7
 80171a0:	4630      	mov	r0, r6
 80171a2:	f7f9 fd09 	bl	8010bb8 <__aeabi_d2uiz>
 80171a6:	2801      	cmp	r0, #1
 80171a8:	bf38      	it	cc
 80171aa:	2001      	movcc	r0, #1
 80171ac:	f7f9 f9b2 	bl	8010514 <__aeabi_ui2d>
 80171b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80171b2:	4606      	mov	r6, r0
 80171b4:	460f      	mov	r7, r1
 80171b6:	b9fb      	cbnz	r3, 80171f8 <_strtod_l+0xb80>
 80171b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80171bc:	9014      	str	r0, [sp, #80]	@ 0x50
 80171be:	9315      	str	r3, [sp, #84]	@ 0x54
 80171c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80171c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80171c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80171ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80171ce:	1b5b      	subs	r3, r3, r5
 80171d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80171d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80171d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80171da:	f7ff f8f1 	bl	80163c0 <__ulp>
 80171de:	4650      	mov	r0, sl
 80171e0:	ec53 2b10 	vmov	r2, r3, d0
 80171e4:	4659      	mov	r1, fp
 80171e6:	f7f9 fa0f 	bl	8010608 <__aeabi_dmul>
 80171ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80171ee:	f7f9 f855 	bl	801029c <__adddf3>
 80171f2:	4682      	mov	sl, r0
 80171f4:	468b      	mov	fp, r1
 80171f6:	e770      	b.n	80170da <_strtod_l+0xa62>
 80171f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80171fc:	e7e0      	b.n	80171c0 <_strtod_l+0xb48>
 80171fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8017238 <_strtod_l+0xbc0>)
 8017200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017204:	f7f9 fc72 	bl	8010aec <__aeabi_dcmplt>
 8017208:	e798      	b.n	801713c <_strtod_l+0xac4>
 801720a:	2300      	movs	r3, #0
 801720c:	930e      	str	r3, [sp, #56]	@ 0x38
 801720e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8017210:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017212:	6013      	str	r3, [r2, #0]
 8017214:	f7ff ba6d 	b.w	80166f2 <_strtod_l+0x7a>
 8017218:	2a65      	cmp	r2, #101	@ 0x65
 801721a:	f43f ab68 	beq.w	80168ee <_strtod_l+0x276>
 801721e:	2a45      	cmp	r2, #69	@ 0x45
 8017220:	f43f ab65 	beq.w	80168ee <_strtod_l+0x276>
 8017224:	2301      	movs	r3, #1
 8017226:	f7ff bba0 	b.w	801696a <_strtod_l+0x2f2>
 801722a:	bf00      	nop
 801722c:	f3af 8000 	nop.w
 8017230:	ffc00000 	.word	0xffc00000
 8017234:	41dfffff 	.word	0x41dfffff
 8017238:	94a03595 	.word	0x94a03595
 801723c:	3fcfffff 	.word	0x3fcfffff

08017240 <_strtod_r>:
 8017240:	4b01      	ldr	r3, [pc, #4]	@ (8017248 <_strtod_r+0x8>)
 8017242:	f7ff ba19 	b.w	8016678 <_strtod_l>
 8017246:	bf00      	nop
 8017248:	20000068 	.word	0x20000068

0801724c <_strtol_l.isra.0>:
 801724c:	2b24      	cmp	r3, #36	@ 0x24
 801724e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017252:	4686      	mov	lr, r0
 8017254:	4690      	mov	r8, r2
 8017256:	d801      	bhi.n	801725c <_strtol_l.isra.0+0x10>
 8017258:	2b01      	cmp	r3, #1
 801725a:	d106      	bne.n	801726a <_strtol_l.isra.0+0x1e>
 801725c:	f7fd fdb6 	bl	8014dcc <__errno>
 8017260:	2316      	movs	r3, #22
 8017262:	6003      	str	r3, [r0, #0]
 8017264:	2000      	movs	r0, #0
 8017266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801726a:	4834      	ldr	r0, [pc, #208]	@ (801733c <_strtol_l.isra.0+0xf0>)
 801726c:	460d      	mov	r5, r1
 801726e:	462a      	mov	r2, r5
 8017270:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017274:	5d06      	ldrb	r6, [r0, r4]
 8017276:	f016 0608 	ands.w	r6, r6, #8
 801727a:	d1f8      	bne.n	801726e <_strtol_l.isra.0+0x22>
 801727c:	2c2d      	cmp	r4, #45	@ 0x2d
 801727e:	d110      	bne.n	80172a2 <_strtol_l.isra.0+0x56>
 8017280:	782c      	ldrb	r4, [r5, #0]
 8017282:	2601      	movs	r6, #1
 8017284:	1c95      	adds	r5, r2, #2
 8017286:	f033 0210 	bics.w	r2, r3, #16
 801728a:	d115      	bne.n	80172b8 <_strtol_l.isra.0+0x6c>
 801728c:	2c30      	cmp	r4, #48	@ 0x30
 801728e:	d10d      	bne.n	80172ac <_strtol_l.isra.0+0x60>
 8017290:	782a      	ldrb	r2, [r5, #0]
 8017292:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8017296:	2a58      	cmp	r2, #88	@ 0x58
 8017298:	d108      	bne.n	80172ac <_strtol_l.isra.0+0x60>
 801729a:	786c      	ldrb	r4, [r5, #1]
 801729c:	3502      	adds	r5, #2
 801729e:	2310      	movs	r3, #16
 80172a0:	e00a      	b.n	80172b8 <_strtol_l.isra.0+0x6c>
 80172a2:	2c2b      	cmp	r4, #43	@ 0x2b
 80172a4:	bf04      	itt	eq
 80172a6:	782c      	ldrbeq	r4, [r5, #0]
 80172a8:	1c95      	addeq	r5, r2, #2
 80172aa:	e7ec      	b.n	8017286 <_strtol_l.isra.0+0x3a>
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d1f6      	bne.n	801729e <_strtol_l.isra.0+0x52>
 80172b0:	2c30      	cmp	r4, #48	@ 0x30
 80172b2:	bf14      	ite	ne
 80172b4:	230a      	movne	r3, #10
 80172b6:	2308      	moveq	r3, #8
 80172b8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80172bc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80172c0:	2200      	movs	r2, #0
 80172c2:	fbbc f9f3 	udiv	r9, ip, r3
 80172c6:	4610      	mov	r0, r2
 80172c8:	fb03 ca19 	mls	sl, r3, r9, ip
 80172cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80172d0:	2f09      	cmp	r7, #9
 80172d2:	d80f      	bhi.n	80172f4 <_strtol_l.isra.0+0xa8>
 80172d4:	463c      	mov	r4, r7
 80172d6:	42a3      	cmp	r3, r4
 80172d8:	dd1b      	ble.n	8017312 <_strtol_l.isra.0+0xc6>
 80172da:	1c57      	adds	r7, r2, #1
 80172dc:	d007      	beq.n	80172ee <_strtol_l.isra.0+0xa2>
 80172de:	4581      	cmp	r9, r0
 80172e0:	d314      	bcc.n	801730c <_strtol_l.isra.0+0xc0>
 80172e2:	d101      	bne.n	80172e8 <_strtol_l.isra.0+0x9c>
 80172e4:	45a2      	cmp	sl, r4
 80172e6:	db11      	blt.n	801730c <_strtol_l.isra.0+0xc0>
 80172e8:	fb00 4003 	mla	r0, r0, r3, r4
 80172ec:	2201      	movs	r2, #1
 80172ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80172f2:	e7eb      	b.n	80172cc <_strtol_l.isra.0+0x80>
 80172f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80172f8:	2f19      	cmp	r7, #25
 80172fa:	d801      	bhi.n	8017300 <_strtol_l.isra.0+0xb4>
 80172fc:	3c37      	subs	r4, #55	@ 0x37
 80172fe:	e7ea      	b.n	80172d6 <_strtol_l.isra.0+0x8a>
 8017300:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8017304:	2f19      	cmp	r7, #25
 8017306:	d804      	bhi.n	8017312 <_strtol_l.isra.0+0xc6>
 8017308:	3c57      	subs	r4, #87	@ 0x57
 801730a:	e7e4      	b.n	80172d6 <_strtol_l.isra.0+0x8a>
 801730c:	f04f 32ff 	mov.w	r2, #4294967295
 8017310:	e7ed      	b.n	80172ee <_strtol_l.isra.0+0xa2>
 8017312:	1c53      	adds	r3, r2, #1
 8017314:	d108      	bne.n	8017328 <_strtol_l.isra.0+0xdc>
 8017316:	2322      	movs	r3, #34	@ 0x22
 8017318:	f8ce 3000 	str.w	r3, [lr]
 801731c:	4660      	mov	r0, ip
 801731e:	f1b8 0f00 	cmp.w	r8, #0
 8017322:	d0a0      	beq.n	8017266 <_strtol_l.isra.0+0x1a>
 8017324:	1e69      	subs	r1, r5, #1
 8017326:	e006      	b.n	8017336 <_strtol_l.isra.0+0xea>
 8017328:	b106      	cbz	r6, 801732c <_strtol_l.isra.0+0xe0>
 801732a:	4240      	negs	r0, r0
 801732c:	f1b8 0f00 	cmp.w	r8, #0
 8017330:	d099      	beq.n	8017266 <_strtol_l.isra.0+0x1a>
 8017332:	2a00      	cmp	r2, #0
 8017334:	d1f6      	bne.n	8017324 <_strtol_l.isra.0+0xd8>
 8017336:	f8c8 1000 	str.w	r1, [r8]
 801733a:	e794      	b.n	8017266 <_strtol_l.isra.0+0x1a>
 801733c:	08018839 	.word	0x08018839

08017340 <_strtol_r>:
 8017340:	f7ff bf84 	b.w	801724c <_strtol_l.isra.0>

08017344 <__ssputs_r>:
 8017344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017348:	688e      	ldr	r6, [r1, #8]
 801734a:	461f      	mov	r7, r3
 801734c:	42be      	cmp	r6, r7
 801734e:	680b      	ldr	r3, [r1, #0]
 8017350:	4682      	mov	sl, r0
 8017352:	460c      	mov	r4, r1
 8017354:	4690      	mov	r8, r2
 8017356:	d82d      	bhi.n	80173b4 <__ssputs_r+0x70>
 8017358:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801735c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017360:	d026      	beq.n	80173b0 <__ssputs_r+0x6c>
 8017362:	6965      	ldr	r5, [r4, #20]
 8017364:	6909      	ldr	r1, [r1, #16]
 8017366:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801736a:	eba3 0901 	sub.w	r9, r3, r1
 801736e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017372:	1c7b      	adds	r3, r7, #1
 8017374:	444b      	add	r3, r9
 8017376:	106d      	asrs	r5, r5, #1
 8017378:	429d      	cmp	r5, r3
 801737a:	bf38      	it	cc
 801737c:	461d      	movcc	r5, r3
 801737e:	0553      	lsls	r3, r2, #21
 8017380:	d527      	bpl.n	80173d2 <__ssputs_r+0x8e>
 8017382:	4629      	mov	r1, r5
 8017384:	f7fe fc24 	bl	8015bd0 <_malloc_r>
 8017388:	4606      	mov	r6, r0
 801738a:	b360      	cbz	r0, 80173e6 <__ssputs_r+0xa2>
 801738c:	6921      	ldr	r1, [r4, #16]
 801738e:	464a      	mov	r2, r9
 8017390:	f000 fa18 	bl	80177c4 <memcpy>
 8017394:	89a3      	ldrh	r3, [r4, #12]
 8017396:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801739a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801739e:	81a3      	strh	r3, [r4, #12]
 80173a0:	6126      	str	r6, [r4, #16]
 80173a2:	6165      	str	r5, [r4, #20]
 80173a4:	444e      	add	r6, r9
 80173a6:	eba5 0509 	sub.w	r5, r5, r9
 80173aa:	6026      	str	r6, [r4, #0]
 80173ac:	60a5      	str	r5, [r4, #8]
 80173ae:	463e      	mov	r6, r7
 80173b0:	42be      	cmp	r6, r7
 80173b2:	d900      	bls.n	80173b6 <__ssputs_r+0x72>
 80173b4:	463e      	mov	r6, r7
 80173b6:	6820      	ldr	r0, [r4, #0]
 80173b8:	4632      	mov	r2, r6
 80173ba:	4641      	mov	r1, r8
 80173bc:	f000 f9c6 	bl	801774c <memmove>
 80173c0:	68a3      	ldr	r3, [r4, #8]
 80173c2:	1b9b      	subs	r3, r3, r6
 80173c4:	60a3      	str	r3, [r4, #8]
 80173c6:	6823      	ldr	r3, [r4, #0]
 80173c8:	4433      	add	r3, r6
 80173ca:	6023      	str	r3, [r4, #0]
 80173cc:	2000      	movs	r0, #0
 80173ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173d2:	462a      	mov	r2, r5
 80173d4:	f000 fd89 	bl	8017eea <_realloc_r>
 80173d8:	4606      	mov	r6, r0
 80173da:	2800      	cmp	r0, #0
 80173dc:	d1e0      	bne.n	80173a0 <__ssputs_r+0x5c>
 80173de:	6921      	ldr	r1, [r4, #16]
 80173e0:	4650      	mov	r0, sl
 80173e2:	f7fe fb81 	bl	8015ae8 <_free_r>
 80173e6:	230c      	movs	r3, #12
 80173e8:	f8ca 3000 	str.w	r3, [sl]
 80173ec:	89a3      	ldrh	r3, [r4, #12]
 80173ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80173f2:	81a3      	strh	r3, [r4, #12]
 80173f4:	f04f 30ff 	mov.w	r0, #4294967295
 80173f8:	e7e9      	b.n	80173ce <__ssputs_r+0x8a>
	...

080173fc <_svfiprintf_r>:
 80173fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017400:	4698      	mov	r8, r3
 8017402:	898b      	ldrh	r3, [r1, #12]
 8017404:	061b      	lsls	r3, r3, #24
 8017406:	b09d      	sub	sp, #116	@ 0x74
 8017408:	4607      	mov	r7, r0
 801740a:	460d      	mov	r5, r1
 801740c:	4614      	mov	r4, r2
 801740e:	d510      	bpl.n	8017432 <_svfiprintf_r+0x36>
 8017410:	690b      	ldr	r3, [r1, #16]
 8017412:	b973      	cbnz	r3, 8017432 <_svfiprintf_r+0x36>
 8017414:	2140      	movs	r1, #64	@ 0x40
 8017416:	f7fe fbdb 	bl	8015bd0 <_malloc_r>
 801741a:	6028      	str	r0, [r5, #0]
 801741c:	6128      	str	r0, [r5, #16]
 801741e:	b930      	cbnz	r0, 801742e <_svfiprintf_r+0x32>
 8017420:	230c      	movs	r3, #12
 8017422:	603b      	str	r3, [r7, #0]
 8017424:	f04f 30ff 	mov.w	r0, #4294967295
 8017428:	b01d      	add	sp, #116	@ 0x74
 801742a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801742e:	2340      	movs	r3, #64	@ 0x40
 8017430:	616b      	str	r3, [r5, #20]
 8017432:	2300      	movs	r3, #0
 8017434:	9309      	str	r3, [sp, #36]	@ 0x24
 8017436:	2320      	movs	r3, #32
 8017438:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801743c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017440:	2330      	movs	r3, #48	@ 0x30
 8017442:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80175e0 <_svfiprintf_r+0x1e4>
 8017446:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801744a:	f04f 0901 	mov.w	r9, #1
 801744e:	4623      	mov	r3, r4
 8017450:	469a      	mov	sl, r3
 8017452:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017456:	b10a      	cbz	r2, 801745c <_svfiprintf_r+0x60>
 8017458:	2a25      	cmp	r2, #37	@ 0x25
 801745a:	d1f9      	bne.n	8017450 <_svfiprintf_r+0x54>
 801745c:	ebba 0b04 	subs.w	fp, sl, r4
 8017460:	d00b      	beq.n	801747a <_svfiprintf_r+0x7e>
 8017462:	465b      	mov	r3, fp
 8017464:	4622      	mov	r2, r4
 8017466:	4629      	mov	r1, r5
 8017468:	4638      	mov	r0, r7
 801746a:	f7ff ff6b 	bl	8017344 <__ssputs_r>
 801746e:	3001      	adds	r0, #1
 8017470:	f000 80a7 	beq.w	80175c2 <_svfiprintf_r+0x1c6>
 8017474:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017476:	445a      	add	r2, fp
 8017478:	9209      	str	r2, [sp, #36]	@ 0x24
 801747a:	f89a 3000 	ldrb.w	r3, [sl]
 801747e:	2b00      	cmp	r3, #0
 8017480:	f000 809f 	beq.w	80175c2 <_svfiprintf_r+0x1c6>
 8017484:	2300      	movs	r3, #0
 8017486:	f04f 32ff 	mov.w	r2, #4294967295
 801748a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801748e:	f10a 0a01 	add.w	sl, sl, #1
 8017492:	9304      	str	r3, [sp, #16]
 8017494:	9307      	str	r3, [sp, #28]
 8017496:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801749a:	931a      	str	r3, [sp, #104]	@ 0x68
 801749c:	4654      	mov	r4, sl
 801749e:	2205      	movs	r2, #5
 80174a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80174a4:	484e      	ldr	r0, [pc, #312]	@ (80175e0 <_svfiprintf_r+0x1e4>)
 80174a6:	f7f8 fe9b 	bl	80101e0 <memchr>
 80174aa:	9a04      	ldr	r2, [sp, #16]
 80174ac:	b9d8      	cbnz	r0, 80174e6 <_svfiprintf_r+0xea>
 80174ae:	06d0      	lsls	r0, r2, #27
 80174b0:	bf44      	itt	mi
 80174b2:	2320      	movmi	r3, #32
 80174b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80174b8:	0711      	lsls	r1, r2, #28
 80174ba:	bf44      	itt	mi
 80174bc:	232b      	movmi	r3, #43	@ 0x2b
 80174be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80174c2:	f89a 3000 	ldrb.w	r3, [sl]
 80174c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80174c8:	d015      	beq.n	80174f6 <_svfiprintf_r+0xfa>
 80174ca:	9a07      	ldr	r2, [sp, #28]
 80174cc:	4654      	mov	r4, sl
 80174ce:	2000      	movs	r0, #0
 80174d0:	f04f 0c0a 	mov.w	ip, #10
 80174d4:	4621      	mov	r1, r4
 80174d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80174da:	3b30      	subs	r3, #48	@ 0x30
 80174dc:	2b09      	cmp	r3, #9
 80174de:	d94b      	bls.n	8017578 <_svfiprintf_r+0x17c>
 80174e0:	b1b0      	cbz	r0, 8017510 <_svfiprintf_r+0x114>
 80174e2:	9207      	str	r2, [sp, #28]
 80174e4:	e014      	b.n	8017510 <_svfiprintf_r+0x114>
 80174e6:	eba0 0308 	sub.w	r3, r0, r8
 80174ea:	fa09 f303 	lsl.w	r3, r9, r3
 80174ee:	4313      	orrs	r3, r2
 80174f0:	9304      	str	r3, [sp, #16]
 80174f2:	46a2      	mov	sl, r4
 80174f4:	e7d2      	b.n	801749c <_svfiprintf_r+0xa0>
 80174f6:	9b03      	ldr	r3, [sp, #12]
 80174f8:	1d19      	adds	r1, r3, #4
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	9103      	str	r1, [sp, #12]
 80174fe:	2b00      	cmp	r3, #0
 8017500:	bfbb      	ittet	lt
 8017502:	425b      	neglt	r3, r3
 8017504:	f042 0202 	orrlt.w	r2, r2, #2
 8017508:	9307      	strge	r3, [sp, #28]
 801750a:	9307      	strlt	r3, [sp, #28]
 801750c:	bfb8      	it	lt
 801750e:	9204      	strlt	r2, [sp, #16]
 8017510:	7823      	ldrb	r3, [r4, #0]
 8017512:	2b2e      	cmp	r3, #46	@ 0x2e
 8017514:	d10a      	bne.n	801752c <_svfiprintf_r+0x130>
 8017516:	7863      	ldrb	r3, [r4, #1]
 8017518:	2b2a      	cmp	r3, #42	@ 0x2a
 801751a:	d132      	bne.n	8017582 <_svfiprintf_r+0x186>
 801751c:	9b03      	ldr	r3, [sp, #12]
 801751e:	1d1a      	adds	r2, r3, #4
 8017520:	681b      	ldr	r3, [r3, #0]
 8017522:	9203      	str	r2, [sp, #12]
 8017524:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017528:	3402      	adds	r4, #2
 801752a:	9305      	str	r3, [sp, #20]
 801752c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80175f0 <_svfiprintf_r+0x1f4>
 8017530:	7821      	ldrb	r1, [r4, #0]
 8017532:	2203      	movs	r2, #3
 8017534:	4650      	mov	r0, sl
 8017536:	f7f8 fe53 	bl	80101e0 <memchr>
 801753a:	b138      	cbz	r0, 801754c <_svfiprintf_r+0x150>
 801753c:	9b04      	ldr	r3, [sp, #16]
 801753e:	eba0 000a 	sub.w	r0, r0, sl
 8017542:	2240      	movs	r2, #64	@ 0x40
 8017544:	4082      	lsls	r2, r0
 8017546:	4313      	orrs	r3, r2
 8017548:	3401      	adds	r4, #1
 801754a:	9304      	str	r3, [sp, #16]
 801754c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017550:	4824      	ldr	r0, [pc, #144]	@ (80175e4 <_svfiprintf_r+0x1e8>)
 8017552:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017556:	2206      	movs	r2, #6
 8017558:	f7f8 fe42 	bl	80101e0 <memchr>
 801755c:	2800      	cmp	r0, #0
 801755e:	d036      	beq.n	80175ce <_svfiprintf_r+0x1d2>
 8017560:	4b21      	ldr	r3, [pc, #132]	@ (80175e8 <_svfiprintf_r+0x1ec>)
 8017562:	bb1b      	cbnz	r3, 80175ac <_svfiprintf_r+0x1b0>
 8017564:	9b03      	ldr	r3, [sp, #12]
 8017566:	3307      	adds	r3, #7
 8017568:	f023 0307 	bic.w	r3, r3, #7
 801756c:	3308      	adds	r3, #8
 801756e:	9303      	str	r3, [sp, #12]
 8017570:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017572:	4433      	add	r3, r6
 8017574:	9309      	str	r3, [sp, #36]	@ 0x24
 8017576:	e76a      	b.n	801744e <_svfiprintf_r+0x52>
 8017578:	fb0c 3202 	mla	r2, ip, r2, r3
 801757c:	460c      	mov	r4, r1
 801757e:	2001      	movs	r0, #1
 8017580:	e7a8      	b.n	80174d4 <_svfiprintf_r+0xd8>
 8017582:	2300      	movs	r3, #0
 8017584:	3401      	adds	r4, #1
 8017586:	9305      	str	r3, [sp, #20]
 8017588:	4619      	mov	r1, r3
 801758a:	f04f 0c0a 	mov.w	ip, #10
 801758e:	4620      	mov	r0, r4
 8017590:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017594:	3a30      	subs	r2, #48	@ 0x30
 8017596:	2a09      	cmp	r2, #9
 8017598:	d903      	bls.n	80175a2 <_svfiprintf_r+0x1a6>
 801759a:	2b00      	cmp	r3, #0
 801759c:	d0c6      	beq.n	801752c <_svfiprintf_r+0x130>
 801759e:	9105      	str	r1, [sp, #20]
 80175a0:	e7c4      	b.n	801752c <_svfiprintf_r+0x130>
 80175a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80175a6:	4604      	mov	r4, r0
 80175a8:	2301      	movs	r3, #1
 80175aa:	e7f0      	b.n	801758e <_svfiprintf_r+0x192>
 80175ac:	ab03      	add	r3, sp, #12
 80175ae:	9300      	str	r3, [sp, #0]
 80175b0:	462a      	mov	r2, r5
 80175b2:	4b0e      	ldr	r3, [pc, #56]	@ (80175ec <_svfiprintf_r+0x1f0>)
 80175b4:	a904      	add	r1, sp, #16
 80175b6:	4638      	mov	r0, r7
 80175b8:	f7fc fcca 	bl	8013f50 <_printf_float>
 80175bc:	1c42      	adds	r2, r0, #1
 80175be:	4606      	mov	r6, r0
 80175c0:	d1d6      	bne.n	8017570 <_svfiprintf_r+0x174>
 80175c2:	89ab      	ldrh	r3, [r5, #12]
 80175c4:	065b      	lsls	r3, r3, #25
 80175c6:	f53f af2d 	bmi.w	8017424 <_svfiprintf_r+0x28>
 80175ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80175cc:	e72c      	b.n	8017428 <_svfiprintf_r+0x2c>
 80175ce:	ab03      	add	r3, sp, #12
 80175d0:	9300      	str	r3, [sp, #0]
 80175d2:	462a      	mov	r2, r5
 80175d4:	4b05      	ldr	r3, [pc, #20]	@ (80175ec <_svfiprintf_r+0x1f0>)
 80175d6:	a904      	add	r1, sp, #16
 80175d8:	4638      	mov	r0, r7
 80175da:	f7fc ff51 	bl	8014480 <_printf_i>
 80175de:	e7ed      	b.n	80175bc <_svfiprintf_r+0x1c0>
 80175e0:	08018631 	.word	0x08018631
 80175e4:	0801863b 	.word	0x0801863b
 80175e8:	08013f51 	.word	0x08013f51
 80175ec:	08017345 	.word	0x08017345
 80175f0:	08018637 	.word	0x08018637

080175f4 <__sflush_r>:
 80175f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80175f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175fc:	0716      	lsls	r6, r2, #28
 80175fe:	4605      	mov	r5, r0
 8017600:	460c      	mov	r4, r1
 8017602:	d454      	bmi.n	80176ae <__sflush_r+0xba>
 8017604:	684b      	ldr	r3, [r1, #4]
 8017606:	2b00      	cmp	r3, #0
 8017608:	dc02      	bgt.n	8017610 <__sflush_r+0x1c>
 801760a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801760c:	2b00      	cmp	r3, #0
 801760e:	dd48      	ble.n	80176a2 <__sflush_r+0xae>
 8017610:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017612:	2e00      	cmp	r6, #0
 8017614:	d045      	beq.n	80176a2 <__sflush_r+0xae>
 8017616:	2300      	movs	r3, #0
 8017618:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801761c:	682f      	ldr	r7, [r5, #0]
 801761e:	6a21      	ldr	r1, [r4, #32]
 8017620:	602b      	str	r3, [r5, #0]
 8017622:	d030      	beq.n	8017686 <__sflush_r+0x92>
 8017624:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017626:	89a3      	ldrh	r3, [r4, #12]
 8017628:	0759      	lsls	r1, r3, #29
 801762a:	d505      	bpl.n	8017638 <__sflush_r+0x44>
 801762c:	6863      	ldr	r3, [r4, #4]
 801762e:	1ad2      	subs	r2, r2, r3
 8017630:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017632:	b10b      	cbz	r3, 8017638 <__sflush_r+0x44>
 8017634:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017636:	1ad2      	subs	r2, r2, r3
 8017638:	2300      	movs	r3, #0
 801763a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801763c:	6a21      	ldr	r1, [r4, #32]
 801763e:	4628      	mov	r0, r5
 8017640:	47b0      	blx	r6
 8017642:	1c43      	adds	r3, r0, #1
 8017644:	89a3      	ldrh	r3, [r4, #12]
 8017646:	d106      	bne.n	8017656 <__sflush_r+0x62>
 8017648:	6829      	ldr	r1, [r5, #0]
 801764a:	291d      	cmp	r1, #29
 801764c:	d82b      	bhi.n	80176a6 <__sflush_r+0xb2>
 801764e:	4a2a      	ldr	r2, [pc, #168]	@ (80176f8 <__sflush_r+0x104>)
 8017650:	40ca      	lsrs	r2, r1
 8017652:	07d6      	lsls	r6, r2, #31
 8017654:	d527      	bpl.n	80176a6 <__sflush_r+0xb2>
 8017656:	2200      	movs	r2, #0
 8017658:	6062      	str	r2, [r4, #4]
 801765a:	04d9      	lsls	r1, r3, #19
 801765c:	6922      	ldr	r2, [r4, #16]
 801765e:	6022      	str	r2, [r4, #0]
 8017660:	d504      	bpl.n	801766c <__sflush_r+0x78>
 8017662:	1c42      	adds	r2, r0, #1
 8017664:	d101      	bne.n	801766a <__sflush_r+0x76>
 8017666:	682b      	ldr	r3, [r5, #0]
 8017668:	b903      	cbnz	r3, 801766c <__sflush_r+0x78>
 801766a:	6560      	str	r0, [r4, #84]	@ 0x54
 801766c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801766e:	602f      	str	r7, [r5, #0]
 8017670:	b1b9      	cbz	r1, 80176a2 <__sflush_r+0xae>
 8017672:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017676:	4299      	cmp	r1, r3
 8017678:	d002      	beq.n	8017680 <__sflush_r+0x8c>
 801767a:	4628      	mov	r0, r5
 801767c:	f7fe fa34 	bl	8015ae8 <_free_r>
 8017680:	2300      	movs	r3, #0
 8017682:	6363      	str	r3, [r4, #52]	@ 0x34
 8017684:	e00d      	b.n	80176a2 <__sflush_r+0xae>
 8017686:	2301      	movs	r3, #1
 8017688:	4628      	mov	r0, r5
 801768a:	47b0      	blx	r6
 801768c:	4602      	mov	r2, r0
 801768e:	1c50      	adds	r0, r2, #1
 8017690:	d1c9      	bne.n	8017626 <__sflush_r+0x32>
 8017692:	682b      	ldr	r3, [r5, #0]
 8017694:	2b00      	cmp	r3, #0
 8017696:	d0c6      	beq.n	8017626 <__sflush_r+0x32>
 8017698:	2b1d      	cmp	r3, #29
 801769a:	d001      	beq.n	80176a0 <__sflush_r+0xac>
 801769c:	2b16      	cmp	r3, #22
 801769e:	d11e      	bne.n	80176de <__sflush_r+0xea>
 80176a0:	602f      	str	r7, [r5, #0]
 80176a2:	2000      	movs	r0, #0
 80176a4:	e022      	b.n	80176ec <__sflush_r+0xf8>
 80176a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80176aa:	b21b      	sxth	r3, r3
 80176ac:	e01b      	b.n	80176e6 <__sflush_r+0xf2>
 80176ae:	690f      	ldr	r7, [r1, #16]
 80176b0:	2f00      	cmp	r7, #0
 80176b2:	d0f6      	beq.n	80176a2 <__sflush_r+0xae>
 80176b4:	0793      	lsls	r3, r2, #30
 80176b6:	680e      	ldr	r6, [r1, #0]
 80176b8:	bf08      	it	eq
 80176ba:	694b      	ldreq	r3, [r1, #20]
 80176bc:	600f      	str	r7, [r1, #0]
 80176be:	bf18      	it	ne
 80176c0:	2300      	movne	r3, #0
 80176c2:	eba6 0807 	sub.w	r8, r6, r7
 80176c6:	608b      	str	r3, [r1, #8]
 80176c8:	f1b8 0f00 	cmp.w	r8, #0
 80176cc:	dde9      	ble.n	80176a2 <__sflush_r+0xae>
 80176ce:	6a21      	ldr	r1, [r4, #32]
 80176d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80176d2:	4643      	mov	r3, r8
 80176d4:	463a      	mov	r2, r7
 80176d6:	4628      	mov	r0, r5
 80176d8:	47b0      	blx	r6
 80176da:	2800      	cmp	r0, #0
 80176dc:	dc08      	bgt.n	80176f0 <__sflush_r+0xfc>
 80176de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80176e6:	81a3      	strh	r3, [r4, #12]
 80176e8:	f04f 30ff 	mov.w	r0, #4294967295
 80176ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176f0:	4407      	add	r7, r0
 80176f2:	eba8 0800 	sub.w	r8, r8, r0
 80176f6:	e7e7      	b.n	80176c8 <__sflush_r+0xd4>
 80176f8:	20400001 	.word	0x20400001

080176fc <_fflush_r>:
 80176fc:	b538      	push	{r3, r4, r5, lr}
 80176fe:	690b      	ldr	r3, [r1, #16]
 8017700:	4605      	mov	r5, r0
 8017702:	460c      	mov	r4, r1
 8017704:	b913      	cbnz	r3, 801770c <_fflush_r+0x10>
 8017706:	2500      	movs	r5, #0
 8017708:	4628      	mov	r0, r5
 801770a:	bd38      	pop	{r3, r4, r5, pc}
 801770c:	b118      	cbz	r0, 8017716 <_fflush_r+0x1a>
 801770e:	6a03      	ldr	r3, [r0, #32]
 8017710:	b90b      	cbnz	r3, 8017716 <_fflush_r+0x1a>
 8017712:	f7fd fa6d 	bl	8014bf0 <__sinit>
 8017716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801771a:	2b00      	cmp	r3, #0
 801771c:	d0f3      	beq.n	8017706 <_fflush_r+0xa>
 801771e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017720:	07d0      	lsls	r0, r2, #31
 8017722:	d404      	bmi.n	801772e <_fflush_r+0x32>
 8017724:	0599      	lsls	r1, r3, #22
 8017726:	d402      	bmi.n	801772e <_fflush_r+0x32>
 8017728:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801772a:	f7fd fb7a 	bl	8014e22 <__retarget_lock_acquire_recursive>
 801772e:	4628      	mov	r0, r5
 8017730:	4621      	mov	r1, r4
 8017732:	f7ff ff5f 	bl	80175f4 <__sflush_r>
 8017736:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017738:	07da      	lsls	r2, r3, #31
 801773a:	4605      	mov	r5, r0
 801773c:	d4e4      	bmi.n	8017708 <_fflush_r+0xc>
 801773e:	89a3      	ldrh	r3, [r4, #12]
 8017740:	059b      	lsls	r3, r3, #22
 8017742:	d4e1      	bmi.n	8017708 <_fflush_r+0xc>
 8017744:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017746:	f7fd fb6d 	bl	8014e24 <__retarget_lock_release_recursive>
 801774a:	e7dd      	b.n	8017708 <_fflush_r+0xc>

0801774c <memmove>:
 801774c:	4288      	cmp	r0, r1
 801774e:	b510      	push	{r4, lr}
 8017750:	eb01 0402 	add.w	r4, r1, r2
 8017754:	d902      	bls.n	801775c <memmove+0x10>
 8017756:	4284      	cmp	r4, r0
 8017758:	4623      	mov	r3, r4
 801775a:	d807      	bhi.n	801776c <memmove+0x20>
 801775c:	1e43      	subs	r3, r0, #1
 801775e:	42a1      	cmp	r1, r4
 8017760:	d008      	beq.n	8017774 <memmove+0x28>
 8017762:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017766:	f803 2f01 	strb.w	r2, [r3, #1]!
 801776a:	e7f8      	b.n	801775e <memmove+0x12>
 801776c:	4402      	add	r2, r0
 801776e:	4601      	mov	r1, r0
 8017770:	428a      	cmp	r2, r1
 8017772:	d100      	bne.n	8017776 <memmove+0x2a>
 8017774:	bd10      	pop	{r4, pc}
 8017776:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801777a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801777e:	e7f7      	b.n	8017770 <memmove+0x24>

08017780 <strncmp>:
 8017780:	b510      	push	{r4, lr}
 8017782:	b16a      	cbz	r2, 80177a0 <strncmp+0x20>
 8017784:	3901      	subs	r1, #1
 8017786:	1884      	adds	r4, r0, r2
 8017788:	f810 2b01 	ldrb.w	r2, [r0], #1
 801778c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017790:	429a      	cmp	r2, r3
 8017792:	d103      	bne.n	801779c <strncmp+0x1c>
 8017794:	42a0      	cmp	r0, r4
 8017796:	d001      	beq.n	801779c <strncmp+0x1c>
 8017798:	2a00      	cmp	r2, #0
 801779a:	d1f5      	bne.n	8017788 <strncmp+0x8>
 801779c:	1ad0      	subs	r0, r2, r3
 801779e:	bd10      	pop	{r4, pc}
 80177a0:	4610      	mov	r0, r2
 80177a2:	e7fc      	b.n	801779e <strncmp+0x1e>

080177a4 <_sbrk_r>:
 80177a4:	b538      	push	{r3, r4, r5, lr}
 80177a6:	4d06      	ldr	r5, [pc, #24]	@ (80177c0 <_sbrk_r+0x1c>)
 80177a8:	2300      	movs	r3, #0
 80177aa:	4604      	mov	r4, r0
 80177ac:	4608      	mov	r0, r1
 80177ae:	602b      	str	r3, [r5, #0]
 80177b0:	f7f9 ff98 	bl	80116e4 <_sbrk>
 80177b4:	1c43      	adds	r3, r0, #1
 80177b6:	d102      	bne.n	80177be <_sbrk_r+0x1a>
 80177b8:	682b      	ldr	r3, [r5, #0]
 80177ba:	b103      	cbz	r3, 80177be <_sbrk_r+0x1a>
 80177bc:	6023      	str	r3, [r4, #0]
 80177be:	bd38      	pop	{r3, r4, r5, pc}
 80177c0:	200003d0 	.word	0x200003d0

080177c4 <memcpy>:
 80177c4:	440a      	add	r2, r1
 80177c6:	4291      	cmp	r1, r2
 80177c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80177cc:	d100      	bne.n	80177d0 <memcpy+0xc>
 80177ce:	4770      	bx	lr
 80177d0:	b510      	push	{r4, lr}
 80177d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80177d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80177da:	4291      	cmp	r1, r2
 80177dc:	d1f9      	bne.n	80177d2 <memcpy+0xe>
 80177de:	bd10      	pop	{r4, pc}

080177e0 <nan>:
 80177e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80177e8 <nan+0x8>
 80177e4:	4770      	bx	lr
 80177e6:	bf00      	nop
 80177e8:	00000000 	.word	0x00000000
 80177ec:	7ff80000 	.word	0x7ff80000

080177f0 <__assert_func>:
 80177f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80177f2:	4614      	mov	r4, r2
 80177f4:	461a      	mov	r2, r3
 80177f6:	4b09      	ldr	r3, [pc, #36]	@ (801781c <__assert_func+0x2c>)
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	4605      	mov	r5, r0
 80177fc:	68d8      	ldr	r0, [r3, #12]
 80177fe:	b14c      	cbz	r4, 8017814 <__assert_func+0x24>
 8017800:	4b07      	ldr	r3, [pc, #28]	@ (8017820 <__assert_func+0x30>)
 8017802:	9100      	str	r1, [sp, #0]
 8017804:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017808:	4906      	ldr	r1, [pc, #24]	@ (8017824 <__assert_func+0x34>)
 801780a:	462b      	mov	r3, r5
 801780c:	f000 fba8 	bl	8017f60 <fiprintf>
 8017810:	f000 fbb8 	bl	8017f84 <abort>
 8017814:	4b04      	ldr	r3, [pc, #16]	@ (8017828 <__assert_func+0x38>)
 8017816:	461c      	mov	r4, r3
 8017818:	e7f3      	b.n	8017802 <__assert_func+0x12>
 801781a:	bf00      	nop
 801781c:	20000018 	.word	0x20000018
 8017820:	0801864a 	.word	0x0801864a
 8017824:	08018657 	.word	0x08018657
 8017828:	08018685 	.word	0x08018685

0801782c <_calloc_r>:
 801782c:	b570      	push	{r4, r5, r6, lr}
 801782e:	fba1 5402 	umull	r5, r4, r1, r2
 8017832:	b934      	cbnz	r4, 8017842 <_calloc_r+0x16>
 8017834:	4629      	mov	r1, r5
 8017836:	f7fe f9cb 	bl	8015bd0 <_malloc_r>
 801783a:	4606      	mov	r6, r0
 801783c:	b928      	cbnz	r0, 801784a <_calloc_r+0x1e>
 801783e:	4630      	mov	r0, r6
 8017840:	bd70      	pop	{r4, r5, r6, pc}
 8017842:	220c      	movs	r2, #12
 8017844:	6002      	str	r2, [r0, #0]
 8017846:	2600      	movs	r6, #0
 8017848:	e7f9      	b.n	801783e <_calloc_r+0x12>
 801784a:	462a      	mov	r2, r5
 801784c:	4621      	mov	r1, r4
 801784e:	f7fd fa6a 	bl	8014d26 <memset>
 8017852:	e7f4      	b.n	801783e <_calloc_r+0x12>

08017854 <rshift>:
 8017854:	6903      	ldr	r3, [r0, #16]
 8017856:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801785a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801785e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017862:	f100 0414 	add.w	r4, r0, #20
 8017866:	dd45      	ble.n	80178f4 <rshift+0xa0>
 8017868:	f011 011f 	ands.w	r1, r1, #31
 801786c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017870:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017874:	d10c      	bne.n	8017890 <rshift+0x3c>
 8017876:	f100 0710 	add.w	r7, r0, #16
 801787a:	4629      	mov	r1, r5
 801787c:	42b1      	cmp	r1, r6
 801787e:	d334      	bcc.n	80178ea <rshift+0x96>
 8017880:	1a9b      	subs	r3, r3, r2
 8017882:	009b      	lsls	r3, r3, #2
 8017884:	1eea      	subs	r2, r5, #3
 8017886:	4296      	cmp	r6, r2
 8017888:	bf38      	it	cc
 801788a:	2300      	movcc	r3, #0
 801788c:	4423      	add	r3, r4
 801788e:	e015      	b.n	80178bc <rshift+0x68>
 8017890:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017894:	f1c1 0820 	rsb	r8, r1, #32
 8017898:	40cf      	lsrs	r7, r1
 801789a:	f105 0e04 	add.w	lr, r5, #4
 801789e:	46a1      	mov	r9, r4
 80178a0:	4576      	cmp	r6, lr
 80178a2:	46f4      	mov	ip, lr
 80178a4:	d815      	bhi.n	80178d2 <rshift+0x7e>
 80178a6:	1a9a      	subs	r2, r3, r2
 80178a8:	0092      	lsls	r2, r2, #2
 80178aa:	3a04      	subs	r2, #4
 80178ac:	3501      	adds	r5, #1
 80178ae:	42ae      	cmp	r6, r5
 80178b0:	bf38      	it	cc
 80178b2:	2200      	movcc	r2, #0
 80178b4:	18a3      	adds	r3, r4, r2
 80178b6:	50a7      	str	r7, [r4, r2]
 80178b8:	b107      	cbz	r7, 80178bc <rshift+0x68>
 80178ba:	3304      	adds	r3, #4
 80178bc:	1b1a      	subs	r2, r3, r4
 80178be:	42a3      	cmp	r3, r4
 80178c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80178c4:	bf08      	it	eq
 80178c6:	2300      	moveq	r3, #0
 80178c8:	6102      	str	r2, [r0, #16]
 80178ca:	bf08      	it	eq
 80178cc:	6143      	streq	r3, [r0, #20]
 80178ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178d2:	f8dc c000 	ldr.w	ip, [ip]
 80178d6:	fa0c fc08 	lsl.w	ip, ip, r8
 80178da:	ea4c 0707 	orr.w	r7, ip, r7
 80178de:	f849 7b04 	str.w	r7, [r9], #4
 80178e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80178e6:	40cf      	lsrs	r7, r1
 80178e8:	e7da      	b.n	80178a0 <rshift+0x4c>
 80178ea:	f851 cb04 	ldr.w	ip, [r1], #4
 80178ee:	f847 cf04 	str.w	ip, [r7, #4]!
 80178f2:	e7c3      	b.n	801787c <rshift+0x28>
 80178f4:	4623      	mov	r3, r4
 80178f6:	e7e1      	b.n	80178bc <rshift+0x68>

080178f8 <__hexdig_fun>:
 80178f8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80178fc:	2b09      	cmp	r3, #9
 80178fe:	d802      	bhi.n	8017906 <__hexdig_fun+0xe>
 8017900:	3820      	subs	r0, #32
 8017902:	b2c0      	uxtb	r0, r0
 8017904:	4770      	bx	lr
 8017906:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801790a:	2b05      	cmp	r3, #5
 801790c:	d801      	bhi.n	8017912 <__hexdig_fun+0x1a>
 801790e:	3847      	subs	r0, #71	@ 0x47
 8017910:	e7f7      	b.n	8017902 <__hexdig_fun+0xa>
 8017912:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8017916:	2b05      	cmp	r3, #5
 8017918:	d801      	bhi.n	801791e <__hexdig_fun+0x26>
 801791a:	3827      	subs	r0, #39	@ 0x27
 801791c:	e7f1      	b.n	8017902 <__hexdig_fun+0xa>
 801791e:	2000      	movs	r0, #0
 8017920:	4770      	bx	lr
	...

08017924 <__gethex>:
 8017924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017928:	b085      	sub	sp, #20
 801792a:	468a      	mov	sl, r1
 801792c:	9302      	str	r3, [sp, #8]
 801792e:	680b      	ldr	r3, [r1, #0]
 8017930:	9001      	str	r0, [sp, #4]
 8017932:	4690      	mov	r8, r2
 8017934:	1c9c      	adds	r4, r3, #2
 8017936:	46a1      	mov	r9, r4
 8017938:	f814 0b01 	ldrb.w	r0, [r4], #1
 801793c:	2830      	cmp	r0, #48	@ 0x30
 801793e:	d0fa      	beq.n	8017936 <__gethex+0x12>
 8017940:	eba9 0303 	sub.w	r3, r9, r3
 8017944:	f1a3 0b02 	sub.w	fp, r3, #2
 8017948:	f7ff ffd6 	bl	80178f8 <__hexdig_fun>
 801794c:	4605      	mov	r5, r0
 801794e:	2800      	cmp	r0, #0
 8017950:	d168      	bne.n	8017a24 <__gethex+0x100>
 8017952:	49a0      	ldr	r1, [pc, #640]	@ (8017bd4 <__gethex+0x2b0>)
 8017954:	2201      	movs	r2, #1
 8017956:	4648      	mov	r0, r9
 8017958:	f7ff ff12 	bl	8017780 <strncmp>
 801795c:	4607      	mov	r7, r0
 801795e:	2800      	cmp	r0, #0
 8017960:	d167      	bne.n	8017a32 <__gethex+0x10e>
 8017962:	f899 0001 	ldrb.w	r0, [r9, #1]
 8017966:	4626      	mov	r6, r4
 8017968:	f7ff ffc6 	bl	80178f8 <__hexdig_fun>
 801796c:	2800      	cmp	r0, #0
 801796e:	d062      	beq.n	8017a36 <__gethex+0x112>
 8017970:	4623      	mov	r3, r4
 8017972:	7818      	ldrb	r0, [r3, #0]
 8017974:	2830      	cmp	r0, #48	@ 0x30
 8017976:	4699      	mov	r9, r3
 8017978:	f103 0301 	add.w	r3, r3, #1
 801797c:	d0f9      	beq.n	8017972 <__gethex+0x4e>
 801797e:	f7ff ffbb 	bl	80178f8 <__hexdig_fun>
 8017982:	fab0 f580 	clz	r5, r0
 8017986:	096d      	lsrs	r5, r5, #5
 8017988:	f04f 0b01 	mov.w	fp, #1
 801798c:	464a      	mov	r2, r9
 801798e:	4616      	mov	r6, r2
 8017990:	3201      	adds	r2, #1
 8017992:	7830      	ldrb	r0, [r6, #0]
 8017994:	f7ff ffb0 	bl	80178f8 <__hexdig_fun>
 8017998:	2800      	cmp	r0, #0
 801799a:	d1f8      	bne.n	801798e <__gethex+0x6a>
 801799c:	498d      	ldr	r1, [pc, #564]	@ (8017bd4 <__gethex+0x2b0>)
 801799e:	2201      	movs	r2, #1
 80179a0:	4630      	mov	r0, r6
 80179a2:	f7ff feed 	bl	8017780 <strncmp>
 80179a6:	2800      	cmp	r0, #0
 80179a8:	d13f      	bne.n	8017a2a <__gethex+0x106>
 80179aa:	b944      	cbnz	r4, 80179be <__gethex+0x9a>
 80179ac:	1c74      	adds	r4, r6, #1
 80179ae:	4622      	mov	r2, r4
 80179b0:	4616      	mov	r6, r2
 80179b2:	3201      	adds	r2, #1
 80179b4:	7830      	ldrb	r0, [r6, #0]
 80179b6:	f7ff ff9f 	bl	80178f8 <__hexdig_fun>
 80179ba:	2800      	cmp	r0, #0
 80179bc:	d1f8      	bne.n	80179b0 <__gethex+0x8c>
 80179be:	1ba4      	subs	r4, r4, r6
 80179c0:	00a7      	lsls	r7, r4, #2
 80179c2:	7833      	ldrb	r3, [r6, #0]
 80179c4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80179c8:	2b50      	cmp	r3, #80	@ 0x50
 80179ca:	d13e      	bne.n	8017a4a <__gethex+0x126>
 80179cc:	7873      	ldrb	r3, [r6, #1]
 80179ce:	2b2b      	cmp	r3, #43	@ 0x2b
 80179d0:	d033      	beq.n	8017a3a <__gethex+0x116>
 80179d2:	2b2d      	cmp	r3, #45	@ 0x2d
 80179d4:	d034      	beq.n	8017a40 <__gethex+0x11c>
 80179d6:	1c71      	adds	r1, r6, #1
 80179d8:	2400      	movs	r4, #0
 80179da:	7808      	ldrb	r0, [r1, #0]
 80179dc:	f7ff ff8c 	bl	80178f8 <__hexdig_fun>
 80179e0:	1e43      	subs	r3, r0, #1
 80179e2:	b2db      	uxtb	r3, r3
 80179e4:	2b18      	cmp	r3, #24
 80179e6:	d830      	bhi.n	8017a4a <__gethex+0x126>
 80179e8:	f1a0 0210 	sub.w	r2, r0, #16
 80179ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80179f0:	f7ff ff82 	bl	80178f8 <__hexdig_fun>
 80179f4:	f100 3cff 	add.w	ip, r0, #4294967295
 80179f8:	fa5f fc8c 	uxtb.w	ip, ip
 80179fc:	f1bc 0f18 	cmp.w	ip, #24
 8017a00:	f04f 030a 	mov.w	r3, #10
 8017a04:	d91e      	bls.n	8017a44 <__gethex+0x120>
 8017a06:	b104      	cbz	r4, 8017a0a <__gethex+0xe6>
 8017a08:	4252      	negs	r2, r2
 8017a0a:	4417      	add	r7, r2
 8017a0c:	f8ca 1000 	str.w	r1, [sl]
 8017a10:	b1ed      	cbz	r5, 8017a4e <__gethex+0x12a>
 8017a12:	f1bb 0f00 	cmp.w	fp, #0
 8017a16:	bf0c      	ite	eq
 8017a18:	2506      	moveq	r5, #6
 8017a1a:	2500      	movne	r5, #0
 8017a1c:	4628      	mov	r0, r5
 8017a1e:	b005      	add	sp, #20
 8017a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a24:	2500      	movs	r5, #0
 8017a26:	462c      	mov	r4, r5
 8017a28:	e7b0      	b.n	801798c <__gethex+0x68>
 8017a2a:	2c00      	cmp	r4, #0
 8017a2c:	d1c7      	bne.n	80179be <__gethex+0x9a>
 8017a2e:	4627      	mov	r7, r4
 8017a30:	e7c7      	b.n	80179c2 <__gethex+0x9e>
 8017a32:	464e      	mov	r6, r9
 8017a34:	462f      	mov	r7, r5
 8017a36:	2501      	movs	r5, #1
 8017a38:	e7c3      	b.n	80179c2 <__gethex+0x9e>
 8017a3a:	2400      	movs	r4, #0
 8017a3c:	1cb1      	adds	r1, r6, #2
 8017a3e:	e7cc      	b.n	80179da <__gethex+0xb6>
 8017a40:	2401      	movs	r4, #1
 8017a42:	e7fb      	b.n	8017a3c <__gethex+0x118>
 8017a44:	fb03 0002 	mla	r0, r3, r2, r0
 8017a48:	e7ce      	b.n	80179e8 <__gethex+0xc4>
 8017a4a:	4631      	mov	r1, r6
 8017a4c:	e7de      	b.n	8017a0c <__gethex+0xe8>
 8017a4e:	eba6 0309 	sub.w	r3, r6, r9
 8017a52:	3b01      	subs	r3, #1
 8017a54:	4629      	mov	r1, r5
 8017a56:	2b07      	cmp	r3, #7
 8017a58:	dc0a      	bgt.n	8017a70 <__gethex+0x14c>
 8017a5a:	9801      	ldr	r0, [sp, #4]
 8017a5c:	f7fe f944 	bl	8015ce8 <_Balloc>
 8017a60:	4604      	mov	r4, r0
 8017a62:	b940      	cbnz	r0, 8017a76 <__gethex+0x152>
 8017a64:	4b5c      	ldr	r3, [pc, #368]	@ (8017bd8 <__gethex+0x2b4>)
 8017a66:	4602      	mov	r2, r0
 8017a68:	21e4      	movs	r1, #228	@ 0xe4
 8017a6a:	485c      	ldr	r0, [pc, #368]	@ (8017bdc <__gethex+0x2b8>)
 8017a6c:	f7ff fec0 	bl	80177f0 <__assert_func>
 8017a70:	3101      	adds	r1, #1
 8017a72:	105b      	asrs	r3, r3, #1
 8017a74:	e7ef      	b.n	8017a56 <__gethex+0x132>
 8017a76:	f100 0a14 	add.w	sl, r0, #20
 8017a7a:	2300      	movs	r3, #0
 8017a7c:	4655      	mov	r5, sl
 8017a7e:	469b      	mov	fp, r3
 8017a80:	45b1      	cmp	r9, r6
 8017a82:	d337      	bcc.n	8017af4 <__gethex+0x1d0>
 8017a84:	f845 bb04 	str.w	fp, [r5], #4
 8017a88:	eba5 050a 	sub.w	r5, r5, sl
 8017a8c:	10ad      	asrs	r5, r5, #2
 8017a8e:	6125      	str	r5, [r4, #16]
 8017a90:	4658      	mov	r0, fp
 8017a92:	f7fe fa1b 	bl	8015ecc <__hi0bits>
 8017a96:	016d      	lsls	r5, r5, #5
 8017a98:	f8d8 6000 	ldr.w	r6, [r8]
 8017a9c:	1a2d      	subs	r5, r5, r0
 8017a9e:	42b5      	cmp	r5, r6
 8017aa0:	dd54      	ble.n	8017b4c <__gethex+0x228>
 8017aa2:	1bad      	subs	r5, r5, r6
 8017aa4:	4629      	mov	r1, r5
 8017aa6:	4620      	mov	r0, r4
 8017aa8:	f7fe fda7 	bl	80165fa <__any_on>
 8017aac:	4681      	mov	r9, r0
 8017aae:	b178      	cbz	r0, 8017ad0 <__gethex+0x1ac>
 8017ab0:	1e6b      	subs	r3, r5, #1
 8017ab2:	1159      	asrs	r1, r3, #5
 8017ab4:	f003 021f 	and.w	r2, r3, #31
 8017ab8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017abc:	f04f 0901 	mov.w	r9, #1
 8017ac0:	fa09 f202 	lsl.w	r2, r9, r2
 8017ac4:	420a      	tst	r2, r1
 8017ac6:	d003      	beq.n	8017ad0 <__gethex+0x1ac>
 8017ac8:	454b      	cmp	r3, r9
 8017aca:	dc36      	bgt.n	8017b3a <__gethex+0x216>
 8017acc:	f04f 0902 	mov.w	r9, #2
 8017ad0:	4629      	mov	r1, r5
 8017ad2:	4620      	mov	r0, r4
 8017ad4:	f7ff febe 	bl	8017854 <rshift>
 8017ad8:	442f      	add	r7, r5
 8017ada:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017ade:	42bb      	cmp	r3, r7
 8017ae0:	da42      	bge.n	8017b68 <__gethex+0x244>
 8017ae2:	9801      	ldr	r0, [sp, #4]
 8017ae4:	4621      	mov	r1, r4
 8017ae6:	f7fe f93f 	bl	8015d68 <_Bfree>
 8017aea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017aec:	2300      	movs	r3, #0
 8017aee:	6013      	str	r3, [r2, #0]
 8017af0:	25a3      	movs	r5, #163	@ 0xa3
 8017af2:	e793      	b.n	8017a1c <__gethex+0xf8>
 8017af4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8017af8:	2a2e      	cmp	r2, #46	@ 0x2e
 8017afa:	d012      	beq.n	8017b22 <__gethex+0x1fe>
 8017afc:	2b20      	cmp	r3, #32
 8017afe:	d104      	bne.n	8017b0a <__gethex+0x1e6>
 8017b00:	f845 bb04 	str.w	fp, [r5], #4
 8017b04:	f04f 0b00 	mov.w	fp, #0
 8017b08:	465b      	mov	r3, fp
 8017b0a:	7830      	ldrb	r0, [r6, #0]
 8017b0c:	9303      	str	r3, [sp, #12]
 8017b0e:	f7ff fef3 	bl	80178f8 <__hexdig_fun>
 8017b12:	9b03      	ldr	r3, [sp, #12]
 8017b14:	f000 000f 	and.w	r0, r0, #15
 8017b18:	4098      	lsls	r0, r3
 8017b1a:	ea4b 0b00 	orr.w	fp, fp, r0
 8017b1e:	3304      	adds	r3, #4
 8017b20:	e7ae      	b.n	8017a80 <__gethex+0x15c>
 8017b22:	45b1      	cmp	r9, r6
 8017b24:	d8ea      	bhi.n	8017afc <__gethex+0x1d8>
 8017b26:	492b      	ldr	r1, [pc, #172]	@ (8017bd4 <__gethex+0x2b0>)
 8017b28:	9303      	str	r3, [sp, #12]
 8017b2a:	2201      	movs	r2, #1
 8017b2c:	4630      	mov	r0, r6
 8017b2e:	f7ff fe27 	bl	8017780 <strncmp>
 8017b32:	9b03      	ldr	r3, [sp, #12]
 8017b34:	2800      	cmp	r0, #0
 8017b36:	d1e1      	bne.n	8017afc <__gethex+0x1d8>
 8017b38:	e7a2      	b.n	8017a80 <__gethex+0x15c>
 8017b3a:	1ea9      	subs	r1, r5, #2
 8017b3c:	4620      	mov	r0, r4
 8017b3e:	f7fe fd5c 	bl	80165fa <__any_on>
 8017b42:	2800      	cmp	r0, #0
 8017b44:	d0c2      	beq.n	8017acc <__gethex+0x1a8>
 8017b46:	f04f 0903 	mov.w	r9, #3
 8017b4a:	e7c1      	b.n	8017ad0 <__gethex+0x1ac>
 8017b4c:	da09      	bge.n	8017b62 <__gethex+0x23e>
 8017b4e:	1b75      	subs	r5, r6, r5
 8017b50:	4621      	mov	r1, r4
 8017b52:	9801      	ldr	r0, [sp, #4]
 8017b54:	462a      	mov	r2, r5
 8017b56:	f7fe fb17 	bl	8016188 <__lshift>
 8017b5a:	1b7f      	subs	r7, r7, r5
 8017b5c:	4604      	mov	r4, r0
 8017b5e:	f100 0a14 	add.w	sl, r0, #20
 8017b62:	f04f 0900 	mov.w	r9, #0
 8017b66:	e7b8      	b.n	8017ada <__gethex+0x1b6>
 8017b68:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017b6c:	42bd      	cmp	r5, r7
 8017b6e:	dd6f      	ble.n	8017c50 <__gethex+0x32c>
 8017b70:	1bed      	subs	r5, r5, r7
 8017b72:	42ae      	cmp	r6, r5
 8017b74:	dc34      	bgt.n	8017be0 <__gethex+0x2bc>
 8017b76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017b7a:	2b02      	cmp	r3, #2
 8017b7c:	d022      	beq.n	8017bc4 <__gethex+0x2a0>
 8017b7e:	2b03      	cmp	r3, #3
 8017b80:	d024      	beq.n	8017bcc <__gethex+0x2a8>
 8017b82:	2b01      	cmp	r3, #1
 8017b84:	d115      	bne.n	8017bb2 <__gethex+0x28e>
 8017b86:	42ae      	cmp	r6, r5
 8017b88:	d113      	bne.n	8017bb2 <__gethex+0x28e>
 8017b8a:	2e01      	cmp	r6, #1
 8017b8c:	d10b      	bne.n	8017ba6 <__gethex+0x282>
 8017b8e:	9a02      	ldr	r2, [sp, #8]
 8017b90:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017b94:	6013      	str	r3, [r2, #0]
 8017b96:	2301      	movs	r3, #1
 8017b98:	6123      	str	r3, [r4, #16]
 8017b9a:	f8ca 3000 	str.w	r3, [sl]
 8017b9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017ba0:	2562      	movs	r5, #98	@ 0x62
 8017ba2:	601c      	str	r4, [r3, #0]
 8017ba4:	e73a      	b.n	8017a1c <__gethex+0xf8>
 8017ba6:	1e71      	subs	r1, r6, #1
 8017ba8:	4620      	mov	r0, r4
 8017baa:	f7fe fd26 	bl	80165fa <__any_on>
 8017bae:	2800      	cmp	r0, #0
 8017bb0:	d1ed      	bne.n	8017b8e <__gethex+0x26a>
 8017bb2:	9801      	ldr	r0, [sp, #4]
 8017bb4:	4621      	mov	r1, r4
 8017bb6:	f7fe f8d7 	bl	8015d68 <_Bfree>
 8017bba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017bbc:	2300      	movs	r3, #0
 8017bbe:	6013      	str	r3, [r2, #0]
 8017bc0:	2550      	movs	r5, #80	@ 0x50
 8017bc2:	e72b      	b.n	8017a1c <__gethex+0xf8>
 8017bc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d1f3      	bne.n	8017bb2 <__gethex+0x28e>
 8017bca:	e7e0      	b.n	8017b8e <__gethex+0x26a>
 8017bcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d1dd      	bne.n	8017b8e <__gethex+0x26a>
 8017bd2:	e7ee      	b.n	8017bb2 <__gethex+0x28e>
 8017bd4:	0801862f 	.word	0x0801862f
 8017bd8:	080185c5 	.word	0x080185c5
 8017bdc:	08018686 	.word	0x08018686
 8017be0:	1e6f      	subs	r7, r5, #1
 8017be2:	f1b9 0f00 	cmp.w	r9, #0
 8017be6:	d130      	bne.n	8017c4a <__gethex+0x326>
 8017be8:	b127      	cbz	r7, 8017bf4 <__gethex+0x2d0>
 8017bea:	4639      	mov	r1, r7
 8017bec:	4620      	mov	r0, r4
 8017bee:	f7fe fd04 	bl	80165fa <__any_on>
 8017bf2:	4681      	mov	r9, r0
 8017bf4:	117a      	asrs	r2, r7, #5
 8017bf6:	2301      	movs	r3, #1
 8017bf8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017bfc:	f007 071f 	and.w	r7, r7, #31
 8017c00:	40bb      	lsls	r3, r7
 8017c02:	4213      	tst	r3, r2
 8017c04:	4629      	mov	r1, r5
 8017c06:	4620      	mov	r0, r4
 8017c08:	bf18      	it	ne
 8017c0a:	f049 0902 	orrne.w	r9, r9, #2
 8017c0e:	f7ff fe21 	bl	8017854 <rshift>
 8017c12:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8017c16:	1b76      	subs	r6, r6, r5
 8017c18:	2502      	movs	r5, #2
 8017c1a:	f1b9 0f00 	cmp.w	r9, #0
 8017c1e:	d047      	beq.n	8017cb0 <__gethex+0x38c>
 8017c20:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017c24:	2b02      	cmp	r3, #2
 8017c26:	d015      	beq.n	8017c54 <__gethex+0x330>
 8017c28:	2b03      	cmp	r3, #3
 8017c2a:	d017      	beq.n	8017c5c <__gethex+0x338>
 8017c2c:	2b01      	cmp	r3, #1
 8017c2e:	d109      	bne.n	8017c44 <__gethex+0x320>
 8017c30:	f019 0f02 	tst.w	r9, #2
 8017c34:	d006      	beq.n	8017c44 <__gethex+0x320>
 8017c36:	f8da 3000 	ldr.w	r3, [sl]
 8017c3a:	ea49 0903 	orr.w	r9, r9, r3
 8017c3e:	f019 0f01 	tst.w	r9, #1
 8017c42:	d10e      	bne.n	8017c62 <__gethex+0x33e>
 8017c44:	f045 0510 	orr.w	r5, r5, #16
 8017c48:	e032      	b.n	8017cb0 <__gethex+0x38c>
 8017c4a:	f04f 0901 	mov.w	r9, #1
 8017c4e:	e7d1      	b.n	8017bf4 <__gethex+0x2d0>
 8017c50:	2501      	movs	r5, #1
 8017c52:	e7e2      	b.n	8017c1a <__gethex+0x2f6>
 8017c54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017c56:	f1c3 0301 	rsb	r3, r3, #1
 8017c5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017c5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d0f0      	beq.n	8017c44 <__gethex+0x320>
 8017c62:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017c66:	f104 0314 	add.w	r3, r4, #20
 8017c6a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8017c6e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8017c72:	f04f 0c00 	mov.w	ip, #0
 8017c76:	4618      	mov	r0, r3
 8017c78:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c7c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017c80:	d01b      	beq.n	8017cba <__gethex+0x396>
 8017c82:	3201      	adds	r2, #1
 8017c84:	6002      	str	r2, [r0, #0]
 8017c86:	2d02      	cmp	r5, #2
 8017c88:	f104 0314 	add.w	r3, r4, #20
 8017c8c:	d13c      	bne.n	8017d08 <__gethex+0x3e4>
 8017c8e:	f8d8 2000 	ldr.w	r2, [r8]
 8017c92:	3a01      	subs	r2, #1
 8017c94:	42b2      	cmp	r2, r6
 8017c96:	d109      	bne.n	8017cac <__gethex+0x388>
 8017c98:	1171      	asrs	r1, r6, #5
 8017c9a:	2201      	movs	r2, #1
 8017c9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017ca0:	f006 061f 	and.w	r6, r6, #31
 8017ca4:	fa02 f606 	lsl.w	r6, r2, r6
 8017ca8:	421e      	tst	r6, r3
 8017caa:	d13a      	bne.n	8017d22 <__gethex+0x3fe>
 8017cac:	f045 0520 	orr.w	r5, r5, #32
 8017cb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017cb2:	601c      	str	r4, [r3, #0]
 8017cb4:	9b02      	ldr	r3, [sp, #8]
 8017cb6:	601f      	str	r7, [r3, #0]
 8017cb8:	e6b0      	b.n	8017a1c <__gethex+0xf8>
 8017cba:	4299      	cmp	r1, r3
 8017cbc:	f843 cc04 	str.w	ip, [r3, #-4]
 8017cc0:	d8d9      	bhi.n	8017c76 <__gethex+0x352>
 8017cc2:	68a3      	ldr	r3, [r4, #8]
 8017cc4:	459b      	cmp	fp, r3
 8017cc6:	db17      	blt.n	8017cf8 <__gethex+0x3d4>
 8017cc8:	6861      	ldr	r1, [r4, #4]
 8017cca:	9801      	ldr	r0, [sp, #4]
 8017ccc:	3101      	adds	r1, #1
 8017cce:	f7fe f80b 	bl	8015ce8 <_Balloc>
 8017cd2:	4681      	mov	r9, r0
 8017cd4:	b918      	cbnz	r0, 8017cde <__gethex+0x3ba>
 8017cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8017d40 <__gethex+0x41c>)
 8017cd8:	4602      	mov	r2, r0
 8017cda:	2184      	movs	r1, #132	@ 0x84
 8017cdc:	e6c5      	b.n	8017a6a <__gethex+0x146>
 8017cde:	6922      	ldr	r2, [r4, #16]
 8017ce0:	3202      	adds	r2, #2
 8017ce2:	f104 010c 	add.w	r1, r4, #12
 8017ce6:	0092      	lsls	r2, r2, #2
 8017ce8:	300c      	adds	r0, #12
 8017cea:	f7ff fd6b 	bl	80177c4 <memcpy>
 8017cee:	4621      	mov	r1, r4
 8017cf0:	9801      	ldr	r0, [sp, #4]
 8017cf2:	f7fe f839 	bl	8015d68 <_Bfree>
 8017cf6:	464c      	mov	r4, r9
 8017cf8:	6923      	ldr	r3, [r4, #16]
 8017cfa:	1c5a      	adds	r2, r3, #1
 8017cfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017d00:	6122      	str	r2, [r4, #16]
 8017d02:	2201      	movs	r2, #1
 8017d04:	615a      	str	r2, [r3, #20]
 8017d06:	e7be      	b.n	8017c86 <__gethex+0x362>
 8017d08:	6922      	ldr	r2, [r4, #16]
 8017d0a:	455a      	cmp	r2, fp
 8017d0c:	dd0b      	ble.n	8017d26 <__gethex+0x402>
 8017d0e:	2101      	movs	r1, #1
 8017d10:	4620      	mov	r0, r4
 8017d12:	f7ff fd9f 	bl	8017854 <rshift>
 8017d16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017d1a:	3701      	adds	r7, #1
 8017d1c:	42bb      	cmp	r3, r7
 8017d1e:	f6ff aee0 	blt.w	8017ae2 <__gethex+0x1be>
 8017d22:	2501      	movs	r5, #1
 8017d24:	e7c2      	b.n	8017cac <__gethex+0x388>
 8017d26:	f016 061f 	ands.w	r6, r6, #31
 8017d2a:	d0fa      	beq.n	8017d22 <__gethex+0x3fe>
 8017d2c:	4453      	add	r3, sl
 8017d2e:	f1c6 0620 	rsb	r6, r6, #32
 8017d32:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8017d36:	f7fe f8c9 	bl	8015ecc <__hi0bits>
 8017d3a:	42b0      	cmp	r0, r6
 8017d3c:	dbe7      	blt.n	8017d0e <__gethex+0x3ea>
 8017d3e:	e7f0      	b.n	8017d22 <__gethex+0x3fe>
 8017d40:	080185c5 	.word	0x080185c5

08017d44 <L_shift>:
 8017d44:	f1c2 0208 	rsb	r2, r2, #8
 8017d48:	0092      	lsls	r2, r2, #2
 8017d4a:	b570      	push	{r4, r5, r6, lr}
 8017d4c:	f1c2 0620 	rsb	r6, r2, #32
 8017d50:	6843      	ldr	r3, [r0, #4]
 8017d52:	6804      	ldr	r4, [r0, #0]
 8017d54:	fa03 f506 	lsl.w	r5, r3, r6
 8017d58:	432c      	orrs	r4, r5
 8017d5a:	40d3      	lsrs	r3, r2
 8017d5c:	6004      	str	r4, [r0, #0]
 8017d5e:	f840 3f04 	str.w	r3, [r0, #4]!
 8017d62:	4288      	cmp	r0, r1
 8017d64:	d3f4      	bcc.n	8017d50 <L_shift+0xc>
 8017d66:	bd70      	pop	{r4, r5, r6, pc}

08017d68 <__match>:
 8017d68:	b530      	push	{r4, r5, lr}
 8017d6a:	6803      	ldr	r3, [r0, #0]
 8017d6c:	3301      	adds	r3, #1
 8017d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d72:	b914      	cbnz	r4, 8017d7a <__match+0x12>
 8017d74:	6003      	str	r3, [r0, #0]
 8017d76:	2001      	movs	r0, #1
 8017d78:	bd30      	pop	{r4, r5, pc}
 8017d7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d7e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8017d82:	2d19      	cmp	r5, #25
 8017d84:	bf98      	it	ls
 8017d86:	3220      	addls	r2, #32
 8017d88:	42a2      	cmp	r2, r4
 8017d8a:	d0f0      	beq.n	8017d6e <__match+0x6>
 8017d8c:	2000      	movs	r0, #0
 8017d8e:	e7f3      	b.n	8017d78 <__match+0x10>

08017d90 <__hexnan>:
 8017d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d94:	680b      	ldr	r3, [r1, #0]
 8017d96:	6801      	ldr	r1, [r0, #0]
 8017d98:	115e      	asrs	r6, r3, #5
 8017d9a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017d9e:	f013 031f 	ands.w	r3, r3, #31
 8017da2:	b087      	sub	sp, #28
 8017da4:	bf18      	it	ne
 8017da6:	3604      	addne	r6, #4
 8017da8:	2500      	movs	r5, #0
 8017daa:	1f37      	subs	r7, r6, #4
 8017dac:	4682      	mov	sl, r0
 8017dae:	4690      	mov	r8, r2
 8017db0:	9301      	str	r3, [sp, #4]
 8017db2:	f846 5c04 	str.w	r5, [r6, #-4]
 8017db6:	46b9      	mov	r9, r7
 8017db8:	463c      	mov	r4, r7
 8017dba:	9502      	str	r5, [sp, #8]
 8017dbc:	46ab      	mov	fp, r5
 8017dbe:	784a      	ldrb	r2, [r1, #1]
 8017dc0:	1c4b      	adds	r3, r1, #1
 8017dc2:	9303      	str	r3, [sp, #12]
 8017dc4:	b342      	cbz	r2, 8017e18 <__hexnan+0x88>
 8017dc6:	4610      	mov	r0, r2
 8017dc8:	9105      	str	r1, [sp, #20]
 8017dca:	9204      	str	r2, [sp, #16]
 8017dcc:	f7ff fd94 	bl	80178f8 <__hexdig_fun>
 8017dd0:	2800      	cmp	r0, #0
 8017dd2:	d151      	bne.n	8017e78 <__hexnan+0xe8>
 8017dd4:	9a04      	ldr	r2, [sp, #16]
 8017dd6:	9905      	ldr	r1, [sp, #20]
 8017dd8:	2a20      	cmp	r2, #32
 8017dda:	d818      	bhi.n	8017e0e <__hexnan+0x7e>
 8017ddc:	9b02      	ldr	r3, [sp, #8]
 8017dde:	459b      	cmp	fp, r3
 8017de0:	dd13      	ble.n	8017e0a <__hexnan+0x7a>
 8017de2:	454c      	cmp	r4, r9
 8017de4:	d206      	bcs.n	8017df4 <__hexnan+0x64>
 8017de6:	2d07      	cmp	r5, #7
 8017de8:	dc04      	bgt.n	8017df4 <__hexnan+0x64>
 8017dea:	462a      	mov	r2, r5
 8017dec:	4649      	mov	r1, r9
 8017dee:	4620      	mov	r0, r4
 8017df0:	f7ff ffa8 	bl	8017d44 <L_shift>
 8017df4:	4544      	cmp	r4, r8
 8017df6:	d952      	bls.n	8017e9e <__hexnan+0x10e>
 8017df8:	2300      	movs	r3, #0
 8017dfa:	f1a4 0904 	sub.w	r9, r4, #4
 8017dfe:	f844 3c04 	str.w	r3, [r4, #-4]
 8017e02:	f8cd b008 	str.w	fp, [sp, #8]
 8017e06:	464c      	mov	r4, r9
 8017e08:	461d      	mov	r5, r3
 8017e0a:	9903      	ldr	r1, [sp, #12]
 8017e0c:	e7d7      	b.n	8017dbe <__hexnan+0x2e>
 8017e0e:	2a29      	cmp	r2, #41	@ 0x29
 8017e10:	d157      	bne.n	8017ec2 <__hexnan+0x132>
 8017e12:	3102      	adds	r1, #2
 8017e14:	f8ca 1000 	str.w	r1, [sl]
 8017e18:	f1bb 0f00 	cmp.w	fp, #0
 8017e1c:	d051      	beq.n	8017ec2 <__hexnan+0x132>
 8017e1e:	454c      	cmp	r4, r9
 8017e20:	d206      	bcs.n	8017e30 <__hexnan+0xa0>
 8017e22:	2d07      	cmp	r5, #7
 8017e24:	dc04      	bgt.n	8017e30 <__hexnan+0xa0>
 8017e26:	462a      	mov	r2, r5
 8017e28:	4649      	mov	r1, r9
 8017e2a:	4620      	mov	r0, r4
 8017e2c:	f7ff ff8a 	bl	8017d44 <L_shift>
 8017e30:	4544      	cmp	r4, r8
 8017e32:	d936      	bls.n	8017ea2 <__hexnan+0x112>
 8017e34:	f1a8 0204 	sub.w	r2, r8, #4
 8017e38:	4623      	mov	r3, r4
 8017e3a:	f853 1b04 	ldr.w	r1, [r3], #4
 8017e3e:	f842 1f04 	str.w	r1, [r2, #4]!
 8017e42:	429f      	cmp	r7, r3
 8017e44:	d2f9      	bcs.n	8017e3a <__hexnan+0xaa>
 8017e46:	1b3b      	subs	r3, r7, r4
 8017e48:	f023 0303 	bic.w	r3, r3, #3
 8017e4c:	3304      	adds	r3, #4
 8017e4e:	3401      	adds	r4, #1
 8017e50:	3e03      	subs	r6, #3
 8017e52:	42b4      	cmp	r4, r6
 8017e54:	bf88      	it	hi
 8017e56:	2304      	movhi	r3, #4
 8017e58:	4443      	add	r3, r8
 8017e5a:	2200      	movs	r2, #0
 8017e5c:	f843 2b04 	str.w	r2, [r3], #4
 8017e60:	429f      	cmp	r7, r3
 8017e62:	d2fb      	bcs.n	8017e5c <__hexnan+0xcc>
 8017e64:	683b      	ldr	r3, [r7, #0]
 8017e66:	b91b      	cbnz	r3, 8017e70 <__hexnan+0xe0>
 8017e68:	4547      	cmp	r7, r8
 8017e6a:	d128      	bne.n	8017ebe <__hexnan+0x12e>
 8017e6c:	2301      	movs	r3, #1
 8017e6e:	603b      	str	r3, [r7, #0]
 8017e70:	2005      	movs	r0, #5
 8017e72:	b007      	add	sp, #28
 8017e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e78:	3501      	adds	r5, #1
 8017e7a:	2d08      	cmp	r5, #8
 8017e7c:	f10b 0b01 	add.w	fp, fp, #1
 8017e80:	dd06      	ble.n	8017e90 <__hexnan+0x100>
 8017e82:	4544      	cmp	r4, r8
 8017e84:	d9c1      	bls.n	8017e0a <__hexnan+0x7a>
 8017e86:	2300      	movs	r3, #0
 8017e88:	f844 3c04 	str.w	r3, [r4, #-4]
 8017e8c:	2501      	movs	r5, #1
 8017e8e:	3c04      	subs	r4, #4
 8017e90:	6822      	ldr	r2, [r4, #0]
 8017e92:	f000 000f 	and.w	r0, r0, #15
 8017e96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017e9a:	6020      	str	r0, [r4, #0]
 8017e9c:	e7b5      	b.n	8017e0a <__hexnan+0x7a>
 8017e9e:	2508      	movs	r5, #8
 8017ea0:	e7b3      	b.n	8017e0a <__hexnan+0x7a>
 8017ea2:	9b01      	ldr	r3, [sp, #4]
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d0dd      	beq.n	8017e64 <__hexnan+0xd4>
 8017ea8:	f1c3 0320 	rsb	r3, r3, #32
 8017eac:	f04f 32ff 	mov.w	r2, #4294967295
 8017eb0:	40da      	lsrs	r2, r3
 8017eb2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017eb6:	4013      	ands	r3, r2
 8017eb8:	f846 3c04 	str.w	r3, [r6, #-4]
 8017ebc:	e7d2      	b.n	8017e64 <__hexnan+0xd4>
 8017ebe:	3f04      	subs	r7, #4
 8017ec0:	e7d0      	b.n	8017e64 <__hexnan+0xd4>
 8017ec2:	2004      	movs	r0, #4
 8017ec4:	e7d5      	b.n	8017e72 <__hexnan+0xe2>

08017ec6 <__ascii_mbtowc>:
 8017ec6:	b082      	sub	sp, #8
 8017ec8:	b901      	cbnz	r1, 8017ecc <__ascii_mbtowc+0x6>
 8017eca:	a901      	add	r1, sp, #4
 8017ecc:	b142      	cbz	r2, 8017ee0 <__ascii_mbtowc+0x1a>
 8017ece:	b14b      	cbz	r3, 8017ee4 <__ascii_mbtowc+0x1e>
 8017ed0:	7813      	ldrb	r3, [r2, #0]
 8017ed2:	600b      	str	r3, [r1, #0]
 8017ed4:	7812      	ldrb	r2, [r2, #0]
 8017ed6:	1e10      	subs	r0, r2, #0
 8017ed8:	bf18      	it	ne
 8017eda:	2001      	movne	r0, #1
 8017edc:	b002      	add	sp, #8
 8017ede:	4770      	bx	lr
 8017ee0:	4610      	mov	r0, r2
 8017ee2:	e7fb      	b.n	8017edc <__ascii_mbtowc+0x16>
 8017ee4:	f06f 0001 	mvn.w	r0, #1
 8017ee8:	e7f8      	b.n	8017edc <__ascii_mbtowc+0x16>

08017eea <_realloc_r>:
 8017eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017eee:	4607      	mov	r7, r0
 8017ef0:	4614      	mov	r4, r2
 8017ef2:	460d      	mov	r5, r1
 8017ef4:	b921      	cbnz	r1, 8017f00 <_realloc_r+0x16>
 8017ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017efa:	4611      	mov	r1, r2
 8017efc:	f7fd be68 	b.w	8015bd0 <_malloc_r>
 8017f00:	b92a      	cbnz	r2, 8017f0e <_realloc_r+0x24>
 8017f02:	f7fd fdf1 	bl	8015ae8 <_free_r>
 8017f06:	4625      	mov	r5, r4
 8017f08:	4628      	mov	r0, r5
 8017f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f0e:	f000 f840 	bl	8017f92 <_malloc_usable_size_r>
 8017f12:	4284      	cmp	r4, r0
 8017f14:	4606      	mov	r6, r0
 8017f16:	d802      	bhi.n	8017f1e <_realloc_r+0x34>
 8017f18:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017f1c:	d8f4      	bhi.n	8017f08 <_realloc_r+0x1e>
 8017f1e:	4621      	mov	r1, r4
 8017f20:	4638      	mov	r0, r7
 8017f22:	f7fd fe55 	bl	8015bd0 <_malloc_r>
 8017f26:	4680      	mov	r8, r0
 8017f28:	b908      	cbnz	r0, 8017f2e <_realloc_r+0x44>
 8017f2a:	4645      	mov	r5, r8
 8017f2c:	e7ec      	b.n	8017f08 <_realloc_r+0x1e>
 8017f2e:	42b4      	cmp	r4, r6
 8017f30:	4622      	mov	r2, r4
 8017f32:	4629      	mov	r1, r5
 8017f34:	bf28      	it	cs
 8017f36:	4632      	movcs	r2, r6
 8017f38:	f7ff fc44 	bl	80177c4 <memcpy>
 8017f3c:	4629      	mov	r1, r5
 8017f3e:	4638      	mov	r0, r7
 8017f40:	f7fd fdd2 	bl	8015ae8 <_free_r>
 8017f44:	e7f1      	b.n	8017f2a <_realloc_r+0x40>

08017f46 <__ascii_wctomb>:
 8017f46:	4603      	mov	r3, r0
 8017f48:	4608      	mov	r0, r1
 8017f4a:	b141      	cbz	r1, 8017f5e <__ascii_wctomb+0x18>
 8017f4c:	2aff      	cmp	r2, #255	@ 0xff
 8017f4e:	d904      	bls.n	8017f5a <__ascii_wctomb+0x14>
 8017f50:	228a      	movs	r2, #138	@ 0x8a
 8017f52:	601a      	str	r2, [r3, #0]
 8017f54:	f04f 30ff 	mov.w	r0, #4294967295
 8017f58:	4770      	bx	lr
 8017f5a:	700a      	strb	r2, [r1, #0]
 8017f5c:	2001      	movs	r0, #1
 8017f5e:	4770      	bx	lr

08017f60 <fiprintf>:
 8017f60:	b40e      	push	{r1, r2, r3}
 8017f62:	b503      	push	{r0, r1, lr}
 8017f64:	4601      	mov	r1, r0
 8017f66:	ab03      	add	r3, sp, #12
 8017f68:	4805      	ldr	r0, [pc, #20]	@ (8017f80 <fiprintf+0x20>)
 8017f6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017f6e:	6800      	ldr	r0, [r0, #0]
 8017f70:	9301      	str	r3, [sp, #4]
 8017f72:	f000 f83f 	bl	8017ff4 <_vfiprintf_r>
 8017f76:	b002      	add	sp, #8
 8017f78:	f85d eb04 	ldr.w	lr, [sp], #4
 8017f7c:	b003      	add	sp, #12
 8017f7e:	4770      	bx	lr
 8017f80:	20000018 	.word	0x20000018

08017f84 <abort>:
 8017f84:	b508      	push	{r3, lr}
 8017f86:	2006      	movs	r0, #6
 8017f88:	f000 fa08 	bl	801839c <raise>
 8017f8c:	2001      	movs	r0, #1
 8017f8e:	f7f9 fb30 	bl	80115f2 <_exit>

08017f92 <_malloc_usable_size_r>:
 8017f92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017f96:	1f18      	subs	r0, r3, #4
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	bfbc      	itt	lt
 8017f9c:	580b      	ldrlt	r3, [r1, r0]
 8017f9e:	18c0      	addlt	r0, r0, r3
 8017fa0:	4770      	bx	lr

08017fa2 <__sfputc_r>:
 8017fa2:	6893      	ldr	r3, [r2, #8]
 8017fa4:	3b01      	subs	r3, #1
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	b410      	push	{r4}
 8017faa:	6093      	str	r3, [r2, #8]
 8017fac:	da08      	bge.n	8017fc0 <__sfputc_r+0x1e>
 8017fae:	6994      	ldr	r4, [r2, #24]
 8017fb0:	42a3      	cmp	r3, r4
 8017fb2:	db01      	blt.n	8017fb8 <__sfputc_r+0x16>
 8017fb4:	290a      	cmp	r1, #10
 8017fb6:	d103      	bne.n	8017fc0 <__sfputc_r+0x1e>
 8017fb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017fbc:	f000 b932 	b.w	8018224 <__swbuf_r>
 8017fc0:	6813      	ldr	r3, [r2, #0]
 8017fc2:	1c58      	adds	r0, r3, #1
 8017fc4:	6010      	str	r0, [r2, #0]
 8017fc6:	7019      	strb	r1, [r3, #0]
 8017fc8:	4608      	mov	r0, r1
 8017fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017fce:	4770      	bx	lr

08017fd0 <__sfputs_r>:
 8017fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fd2:	4606      	mov	r6, r0
 8017fd4:	460f      	mov	r7, r1
 8017fd6:	4614      	mov	r4, r2
 8017fd8:	18d5      	adds	r5, r2, r3
 8017fda:	42ac      	cmp	r4, r5
 8017fdc:	d101      	bne.n	8017fe2 <__sfputs_r+0x12>
 8017fde:	2000      	movs	r0, #0
 8017fe0:	e007      	b.n	8017ff2 <__sfputs_r+0x22>
 8017fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017fe6:	463a      	mov	r2, r7
 8017fe8:	4630      	mov	r0, r6
 8017fea:	f7ff ffda 	bl	8017fa2 <__sfputc_r>
 8017fee:	1c43      	adds	r3, r0, #1
 8017ff0:	d1f3      	bne.n	8017fda <__sfputs_r+0xa>
 8017ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017ff4 <_vfiprintf_r>:
 8017ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ff8:	460d      	mov	r5, r1
 8017ffa:	b09d      	sub	sp, #116	@ 0x74
 8017ffc:	4614      	mov	r4, r2
 8017ffe:	4698      	mov	r8, r3
 8018000:	4606      	mov	r6, r0
 8018002:	b118      	cbz	r0, 801800c <_vfiprintf_r+0x18>
 8018004:	6a03      	ldr	r3, [r0, #32]
 8018006:	b90b      	cbnz	r3, 801800c <_vfiprintf_r+0x18>
 8018008:	f7fc fdf2 	bl	8014bf0 <__sinit>
 801800c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801800e:	07d9      	lsls	r1, r3, #31
 8018010:	d405      	bmi.n	801801e <_vfiprintf_r+0x2a>
 8018012:	89ab      	ldrh	r3, [r5, #12]
 8018014:	059a      	lsls	r2, r3, #22
 8018016:	d402      	bmi.n	801801e <_vfiprintf_r+0x2a>
 8018018:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801801a:	f7fc ff02 	bl	8014e22 <__retarget_lock_acquire_recursive>
 801801e:	89ab      	ldrh	r3, [r5, #12]
 8018020:	071b      	lsls	r3, r3, #28
 8018022:	d501      	bpl.n	8018028 <_vfiprintf_r+0x34>
 8018024:	692b      	ldr	r3, [r5, #16]
 8018026:	b99b      	cbnz	r3, 8018050 <_vfiprintf_r+0x5c>
 8018028:	4629      	mov	r1, r5
 801802a:	4630      	mov	r0, r6
 801802c:	f000 f938 	bl	80182a0 <__swsetup_r>
 8018030:	b170      	cbz	r0, 8018050 <_vfiprintf_r+0x5c>
 8018032:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018034:	07dc      	lsls	r4, r3, #31
 8018036:	d504      	bpl.n	8018042 <_vfiprintf_r+0x4e>
 8018038:	f04f 30ff 	mov.w	r0, #4294967295
 801803c:	b01d      	add	sp, #116	@ 0x74
 801803e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018042:	89ab      	ldrh	r3, [r5, #12]
 8018044:	0598      	lsls	r0, r3, #22
 8018046:	d4f7      	bmi.n	8018038 <_vfiprintf_r+0x44>
 8018048:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801804a:	f7fc feeb 	bl	8014e24 <__retarget_lock_release_recursive>
 801804e:	e7f3      	b.n	8018038 <_vfiprintf_r+0x44>
 8018050:	2300      	movs	r3, #0
 8018052:	9309      	str	r3, [sp, #36]	@ 0x24
 8018054:	2320      	movs	r3, #32
 8018056:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801805a:	f8cd 800c 	str.w	r8, [sp, #12]
 801805e:	2330      	movs	r3, #48	@ 0x30
 8018060:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018210 <_vfiprintf_r+0x21c>
 8018064:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018068:	f04f 0901 	mov.w	r9, #1
 801806c:	4623      	mov	r3, r4
 801806e:	469a      	mov	sl, r3
 8018070:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018074:	b10a      	cbz	r2, 801807a <_vfiprintf_r+0x86>
 8018076:	2a25      	cmp	r2, #37	@ 0x25
 8018078:	d1f9      	bne.n	801806e <_vfiprintf_r+0x7a>
 801807a:	ebba 0b04 	subs.w	fp, sl, r4
 801807e:	d00b      	beq.n	8018098 <_vfiprintf_r+0xa4>
 8018080:	465b      	mov	r3, fp
 8018082:	4622      	mov	r2, r4
 8018084:	4629      	mov	r1, r5
 8018086:	4630      	mov	r0, r6
 8018088:	f7ff ffa2 	bl	8017fd0 <__sfputs_r>
 801808c:	3001      	adds	r0, #1
 801808e:	f000 80a7 	beq.w	80181e0 <_vfiprintf_r+0x1ec>
 8018092:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018094:	445a      	add	r2, fp
 8018096:	9209      	str	r2, [sp, #36]	@ 0x24
 8018098:	f89a 3000 	ldrb.w	r3, [sl]
 801809c:	2b00      	cmp	r3, #0
 801809e:	f000 809f 	beq.w	80181e0 <_vfiprintf_r+0x1ec>
 80180a2:	2300      	movs	r3, #0
 80180a4:	f04f 32ff 	mov.w	r2, #4294967295
 80180a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80180ac:	f10a 0a01 	add.w	sl, sl, #1
 80180b0:	9304      	str	r3, [sp, #16]
 80180b2:	9307      	str	r3, [sp, #28]
 80180b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80180b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80180ba:	4654      	mov	r4, sl
 80180bc:	2205      	movs	r2, #5
 80180be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180c2:	4853      	ldr	r0, [pc, #332]	@ (8018210 <_vfiprintf_r+0x21c>)
 80180c4:	f7f8 f88c 	bl	80101e0 <memchr>
 80180c8:	9a04      	ldr	r2, [sp, #16]
 80180ca:	b9d8      	cbnz	r0, 8018104 <_vfiprintf_r+0x110>
 80180cc:	06d1      	lsls	r1, r2, #27
 80180ce:	bf44      	itt	mi
 80180d0:	2320      	movmi	r3, #32
 80180d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80180d6:	0713      	lsls	r3, r2, #28
 80180d8:	bf44      	itt	mi
 80180da:	232b      	movmi	r3, #43	@ 0x2b
 80180dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80180e0:	f89a 3000 	ldrb.w	r3, [sl]
 80180e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80180e6:	d015      	beq.n	8018114 <_vfiprintf_r+0x120>
 80180e8:	9a07      	ldr	r2, [sp, #28]
 80180ea:	4654      	mov	r4, sl
 80180ec:	2000      	movs	r0, #0
 80180ee:	f04f 0c0a 	mov.w	ip, #10
 80180f2:	4621      	mov	r1, r4
 80180f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80180f8:	3b30      	subs	r3, #48	@ 0x30
 80180fa:	2b09      	cmp	r3, #9
 80180fc:	d94b      	bls.n	8018196 <_vfiprintf_r+0x1a2>
 80180fe:	b1b0      	cbz	r0, 801812e <_vfiprintf_r+0x13a>
 8018100:	9207      	str	r2, [sp, #28]
 8018102:	e014      	b.n	801812e <_vfiprintf_r+0x13a>
 8018104:	eba0 0308 	sub.w	r3, r0, r8
 8018108:	fa09 f303 	lsl.w	r3, r9, r3
 801810c:	4313      	orrs	r3, r2
 801810e:	9304      	str	r3, [sp, #16]
 8018110:	46a2      	mov	sl, r4
 8018112:	e7d2      	b.n	80180ba <_vfiprintf_r+0xc6>
 8018114:	9b03      	ldr	r3, [sp, #12]
 8018116:	1d19      	adds	r1, r3, #4
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	9103      	str	r1, [sp, #12]
 801811c:	2b00      	cmp	r3, #0
 801811e:	bfbb      	ittet	lt
 8018120:	425b      	neglt	r3, r3
 8018122:	f042 0202 	orrlt.w	r2, r2, #2
 8018126:	9307      	strge	r3, [sp, #28]
 8018128:	9307      	strlt	r3, [sp, #28]
 801812a:	bfb8      	it	lt
 801812c:	9204      	strlt	r2, [sp, #16]
 801812e:	7823      	ldrb	r3, [r4, #0]
 8018130:	2b2e      	cmp	r3, #46	@ 0x2e
 8018132:	d10a      	bne.n	801814a <_vfiprintf_r+0x156>
 8018134:	7863      	ldrb	r3, [r4, #1]
 8018136:	2b2a      	cmp	r3, #42	@ 0x2a
 8018138:	d132      	bne.n	80181a0 <_vfiprintf_r+0x1ac>
 801813a:	9b03      	ldr	r3, [sp, #12]
 801813c:	1d1a      	adds	r2, r3, #4
 801813e:	681b      	ldr	r3, [r3, #0]
 8018140:	9203      	str	r2, [sp, #12]
 8018142:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018146:	3402      	adds	r4, #2
 8018148:	9305      	str	r3, [sp, #20]
 801814a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018220 <_vfiprintf_r+0x22c>
 801814e:	7821      	ldrb	r1, [r4, #0]
 8018150:	2203      	movs	r2, #3
 8018152:	4650      	mov	r0, sl
 8018154:	f7f8 f844 	bl	80101e0 <memchr>
 8018158:	b138      	cbz	r0, 801816a <_vfiprintf_r+0x176>
 801815a:	9b04      	ldr	r3, [sp, #16]
 801815c:	eba0 000a 	sub.w	r0, r0, sl
 8018160:	2240      	movs	r2, #64	@ 0x40
 8018162:	4082      	lsls	r2, r0
 8018164:	4313      	orrs	r3, r2
 8018166:	3401      	adds	r4, #1
 8018168:	9304      	str	r3, [sp, #16]
 801816a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801816e:	4829      	ldr	r0, [pc, #164]	@ (8018214 <_vfiprintf_r+0x220>)
 8018170:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018174:	2206      	movs	r2, #6
 8018176:	f7f8 f833 	bl	80101e0 <memchr>
 801817a:	2800      	cmp	r0, #0
 801817c:	d03f      	beq.n	80181fe <_vfiprintf_r+0x20a>
 801817e:	4b26      	ldr	r3, [pc, #152]	@ (8018218 <_vfiprintf_r+0x224>)
 8018180:	bb1b      	cbnz	r3, 80181ca <_vfiprintf_r+0x1d6>
 8018182:	9b03      	ldr	r3, [sp, #12]
 8018184:	3307      	adds	r3, #7
 8018186:	f023 0307 	bic.w	r3, r3, #7
 801818a:	3308      	adds	r3, #8
 801818c:	9303      	str	r3, [sp, #12]
 801818e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018190:	443b      	add	r3, r7
 8018192:	9309      	str	r3, [sp, #36]	@ 0x24
 8018194:	e76a      	b.n	801806c <_vfiprintf_r+0x78>
 8018196:	fb0c 3202 	mla	r2, ip, r2, r3
 801819a:	460c      	mov	r4, r1
 801819c:	2001      	movs	r0, #1
 801819e:	e7a8      	b.n	80180f2 <_vfiprintf_r+0xfe>
 80181a0:	2300      	movs	r3, #0
 80181a2:	3401      	adds	r4, #1
 80181a4:	9305      	str	r3, [sp, #20]
 80181a6:	4619      	mov	r1, r3
 80181a8:	f04f 0c0a 	mov.w	ip, #10
 80181ac:	4620      	mov	r0, r4
 80181ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80181b2:	3a30      	subs	r2, #48	@ 0x30
 80181b4:	2a09      	cmp	r2, #9
 80181b6:	d903      	bls.n	80181c0 <_vfiprintf_r+0x1cc>
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d0c6      	beq.n	801814a <_vfiprintf_r+0x156>
 80181bc:	9105      	str	r1, [sp, #20]
 80181be:	e7c4      	b.n	801814a <_vfiprintf_r+0x156>
 80181c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80181c4:	4604      	mov	r4, r0
 80181c6:	2301      	movs	r3, #1
 80181c8:	e7f0      	b.n	80181ac <_vfiprintf_r+0x1b8>
 80181ca:	ab03      	add	r3, sp, #12
 80181cc:	9300      	str	r3, [sp, #0]
 80181ce:	462a      	mov	r2, r5
 80181d0:	4b12      	ldr	r3, [pc, #72]	@ (801821c <_vfiprintf_r+0x228>)
 80181d2:	a904      	add	r1, sp, #16
 80181d4:	4630      	mov	r0, r6
 80181d6:	f7fb febb 	bl	8013f50 <_printf_float>
 80181da:	4607      	mov	r7, r0
 80181dc:	1c78      	adds	r0, r7, #1
 80181de:	d1d6      	bne.n	801818e <_vfiprintf_r+0x19a>
 80181e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80181e2:	07d9      	lsls	r1, r3, #31
 80181e4:	d405      	bmi.n	80181f2 <_vfiprintf_r+0x1fe>
 80181e6:	89ab      	ldrh	r3, [r5, #12]
 80181e8:	059a      	lsls	r2, r3, #22
 80181ea:	d402      	bmi.n	80181f2 <_vfiprintf_r+0x1fe>
 80181ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80181ee:	f7fc fe19 	bl	8014e24 <__retarget_lock_release_recursive>
 80181f2:	89ab      	ldrh	r3, [r5, #12]
 80181f4:	065b      	lsls	r3, r3, #25
 80181f6:	f53f af1f 	bmi.w	8018038 <_vfiprintf_r+0x44>
 80181fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80181fc:	e71e      	b.n	801803c <_vfiprintf_r+0x48>
 80181fe:	ab03      	add	r3, sp, #12
 8018200:	9300      	str	r3, [sp, #0]
 8018202:	462a      	mov	r2, r5
 8018204:	4b05      	ldr	r3, [pc, #20]	@ (801821c <_vfiprintf_r+0x228>)
 8018206:	a904      	add	r1, sp, #16
 8018208:	4630      	mov	r0, r6
 801820a:	f7fc f939 	bl	8014480 <_printf_i>
 801820e:	e7e4      	b.n	80181da <_vfiprintf_r+0x1e6>
 8018210:	08018631 	.word	0x08018631
 8018214:	0801863b 	.word	0x0801863b
 8018218:	08013f51 	.word	0x08013f51
 801821c:	08017fd1 	.word	0x08017fd1
 8018220:	08018637 	.word	0x08018637

08018224 <__swbuf_r>:
 8018224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018226:	460e      	mov	r6, r1
 8018228:	4614      	mov	r4, r2
 801822a:	4605      	mov	r5, r0
 801822c:	b118      	cbz	r0, 8018236 <__swbuf_r+0x12>
 801822e:	6a03      	ldr	r3, [r0, #32]
 8018230:	b90b      	cbnz	r3, 8018236 <__swbuf_r+0x12>
 8018232:	f7fc fcdd 	bl	8014bf0 <__sinit>
 8018236:	69a3      	ldr	r3, [r4, #24]
 8018238:	60a3      	str	r3, [r4, #8]
 801823a:	89a3      	ldrh	r3, [r4, #12]
 801823c:	071a      	lsls	r2, r3, #28
 801823e:	d501      	bpl.n	8018244 <__swbuf_r+0x20>
 8018240:	6923      	ldr	r3, [r4, #16]
 8018242:	b943      	cbnz	r3, 8018256 <__swbuf_r+0x32>
 8018244:	4621      	mov	r1, r4
 8018246:	4628      	mov	r0, r5
 8018248:	f000 f82a 	bl	80182a0 <__swsetup_r>
 801824c:	b118      	cbz	r0, 8018256 <__swbuf_r+0x32>
 801824e:	f04f 37ff 	mov.w	r7, #4294967295
 8018252:	4638      	mov	r0, r7
 8018254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018256:	6823      	ldr	r3, [r4, #0]
 8018258:	6922      	ldr	r2, [r4, #16]
 801825a:	1a98      	subs	r0, r3, r2
 801825c:	6963      	ldr	r3, [r4, #20]
 801825e:	b2f6      	uxtb	r6, r6
 8018260:	4283      	cmp	r3, r0
 8018262:	4637      	mov	r7, r6
 8018264:	dc05      	bgt.n	8018272 <__swbuf_r+0x4e>
 8018266:	4621      	mov	r1, r4
 8018268:	4628      	mov	r0, r5
 801826a:	f7ff fa47 	bl	80176fc <_fflush_r>
 801826e:	2800      	cmp	r0, #0
 8018270:	d1ed      	bne.n	801824e <__swbuf_r+0x2a>
 8018272:	68a3      	ldr	r3, [r4, #8]
 8018274:	3b01      	subs	r3, #1
 8018276:	60a3      	str	r3, [r4, #8]
 8018278:	6823      	ldr	r3, [r4, #0]
 801827a:	1c5a      	adds	r2, r3, #1
 801827c:	6022      	str	r2, [r4, #0]
 801827e:	701e      	strb	r6, [r3, #0]
 8018280:	6962      	ldr	r2, [r4, #20]
 8018282:	1c43      	adds	r3, r0, #1
 8018284:	429a      	cmp	r2, r3
 8018286:	d004      	beq.n	8018292 <__swbuf_r+0x6e>
 8018288:	89a3      	ldrh	r3, [r4, #12]
 801828a:	07db      	lsls	r3, r3, #31
 801828c:	d5e1      	bpl.n	8018252 <__swbuf_r+0x2e>
 801828e:	2e0a      	cmp	r6, #10
 8018290:	d1df      	bne.n	8018252 <__swbuf_r+0x2e>
 8018292:	4621      	mov	r1, r4
 8018294:	4628      	mov	r0, r5
 8018296:	f7ff fa31 	bl	80176fc <_fflush_r>
 801829a:	2800      	cmp	r0, #0
 801829c:	d0d9      	beq.n	8018252 <__swbuf_r+0x2e>
 801829e:	e7d6      	b.n	801824e <__swbuf_r+0x2a>

080182a0 <__swsetup_r>:
 80182a0:	b538      	push	{r3, r4, r5, lr}
 80182a2:	4b29      	ldr	r3, [pc, #164]	@ (8018348 <__swsetup_r+0xa8>)
 80182a4:	4605      	mov	r5, r0
 80182a6:	6818      	ldr	r0, [r3, #0]
 80182a8:	460c      	mov	r4, r1
 80182aa:	b118      	cbz	r0, 80182b4 <__swsetup_r+0x14>
 80182ac:	6a03      	ldr	r3, [r0, #32]
 80182ae:	b90b      	cbnz	r3, 80182b4 <__swsetup_r+0x14>
 80182b0:	f7fc fc9e 	bl	8014bf0 <__sinit>
 80182b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182b8:	0719      	lsls	r1, r3, #28
 80182ba:	d422      	bmi.n	8018302 <__swsetup_r+0x62>
 80182bc:	06da      	lsls	r2, r3, #27
 80182be:	d407      	bmi.n	80182d0 <__swsetup_r+0x30>
 80182c0:	2209      	movs	r2, #9
 80182c2:	602a      	str	r2, [r5, #0]
 80182c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80182c8:	81a3      	strh	r3, [r4, #12]
 80182ca:	f04f 30ff 	mov.w	r0, #4294967295
 80182ce:	e033      	b.n	8018338 <__swsetup_r+0x98>
 80182d0:	0758      	lsls	r0, r3, #29
 80182d2:	d512      	bpl.n	80182fa <__swsetup_r+0x5a>
 80182d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80182d6:	b141      	cbz	r1, 80182ea <__swsetup_r+0x4a>
 80182d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80182dc:	4299      	cmp	r1, r3
 80182de:	d002      	beq.n	80182e6 <__swsetup_r+0x46>
 80182e0:	4628      	mov	r0, r5
 80182e2:	f7fd fc01 	bl	8015ae8 <_free_r>
 80182e6:	2300      	movs	r3, #0
 80182e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80182ea:	89a3      	ldrh	r3, [r4, #12]
 80182ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80182f0:	81a3      	strh	r3, [r4, #12]
 80182f2:	2300      	movs	r3, #0
 80182f4:	6063      	str	r3, [r4, #4]
 80182f6:	6923      	ldr	r3, [r4, #16]
 80182f8:	6023      	str	r3, [r4, #0]
 80182fa:	89a3      	ldrh	r3, [r4, #12]
 80182fc:	f043 0308 	orr.w	r3, r3, #8
 8018300:	81a3      	strh	r3, [r4, #12]
 8018302:	6923      	ldr	r3, [r4, #16]
 8018304:	b94b      	cbnz	r3, 801831a <__swsetup_r+0x7a>
 8018306:	89a3      	ldrh	r3, [r4, #12]
 8018308:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801830c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018310:	d003      	beq.n	801831a <__swsetup_r+0x7a>
 8018312:	4621      	mov	r1, r4
 8018314:	4628      	mov	r0, r5
 8018316:	f000 f883 	bl	8018420 <__smakebuf_r>
 801831a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801831e:	f013 0201 	ands.w	r2, r3, #1
 8018322:	d00a      	beq.n	801833a <__swsetup_r+0x9a>
 8018324:	2200      	movs	r2, #0
 8018326:	60a2      	str	r2, [r4, #8]
 8018328:	6962      	ldr	r2, [r4, #20]
 801832a:	4252      	negs	r2, r2
 801832c:	61a2      	str	r2, [r4, #24]
 801832e:	6922      	ldr	r2, [r4, #16]
 8018330:	b942      	cbnz	r2, 8018344 <__swsetup_r+0xa4>
 8018332:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018336:	d1c5      	bne.n	80182c4 <__swsetup_r+0x24>
 8018338:	bd38      	pop	{r3, r4, r5, pc}
 801833a:	0799      	lsls	r1, r3, #30
 801833c:	bf58      	it	pl
 801833e:	6962      	ldrpl	r2, [r4, #20]
 8018340:	60a2      	str	r2, [r4, #8]
 8018342:	e7f4      	b.n	801832e <__swsetup_r+0x8e>
 8018344:	2000      	movs	r0, #0
 8018346:	e7f7      	b.n	8018338 <__swsetup_r+0x98>
 8018348:	20000018 	.word	0x20000018

0801834c <_raise_r>:
 801834c:	291f      	cmp	r1, #31
 801834e:	b538      	push	{r3, r4, r5, lr}
 8018350:	4605      	mov	r5, r0
 8018352:	460c      	mov	r4, r1
 8018354:	d904      	bls.n	8018360 <_raise_r+0x14>
 8018356:	2316      	movs	r3, #22
 8018358:	6003      	str	r3, [r0, #0]
 801835a:	f04f 30ff 	mov.w	r0, #4294967295
 801835e:	bd38      	pop	{r3, r4, r5, pc}
 8018360:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018362:	b112      	cbz	r2, 801836a <_raise_r+0x1e>
 8018364:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018368:	b94b      	cbnz	r3, 801837e <_raise_r+0x32>
 801836a:	4628      	mov	r0, r5
 801836c:	f000 f830 	bl	80183d0 <_getpid_r>
 8018370:	4622      	mov	r2, r4
 8018372:	4601      	mov	r1, r0
 8018374:	4628      	mov	r0, r5
 8018376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801837a:	f000 b817 	b.w	80183ac <_kill_r>
 801837e:	2b01      	cmp	r3, #1
 8018380:	d00a      	beq.n	8018398 <_raise_r+0x4c>
 8018382:	1c59      	adds	r1, r3, #1
 8018384:	d103      	bne.n	801838e <_raise_r+0x42>
 8018386:	2316      	movs	r3, #22
 8018388:	6003      	str	r3, [r0, #0]
 801838a:	2001      	movs	r0, #1
 801838c:	e7e7      	b.n	801835e <_raise_r+0x12>
 801838e:	2100      	movs	r1, #0
 8018390:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018394:	4620      	mov	r0, r4
 8018396:	4798      	blx	r3
 8018398:	2000      	movs	r0, #0
 801839a:	e7e0      	b.n	801835e <_raise_r+0x12>

0801839c <raise>:
 801839c:	4b02      	ldr	r3, [pc, #8]	@ (80183a8 <raise+0xc>)
 801839e:	4601      	mov	r1, r0
 80183a0:	6818      	ldr	r0, [r3, #0]
 80183a2:	f7ff bfd3 	b.w	801834c <_raise_r>
 80183a6:	bf00      	nop
 80183a8:	20000018 	.word	0x20000018

080183ac <_kill_r>:
 80183ac:	b538      	push	{r3, r4, r5, lr}
 80183ae:	4d07      	ldr	r5, [pc, #28]	@ (80183cc <_kill_r+0x20>)
 80183b0:	2300      	movs	r3, #0
 80183b2:	4604      	mov	r4, r0
 80183b4:	4608      	mov	r0, r1
 80183b6:	4611      	mov	r1, r2
 80183b8:	602b      	str	r3, [r5, #0]
 80183ba:	f7f9 f90a 	bl	80115d2 <_kill>
 80183be:	1c43      	adds	r3, r0, #1
 80183c0:	d102      	bne.n	80183c8 <_kill_r+0x1c>
 80183c2:	682b      	ldr	r3, [r5, #0]
 80183c4:	b103      	cbz	r3, 80183c8 <_kill_r+0x1c>
 80183c6:	6023      	str	r3, [r4, #0]
 80183c8:	bd38      	pop	{r3, r4, r5, pc}
 80183ca:	bf00      	nop
 80183cc:	200003d0 	.word	0x200003d0

080183d0 <_getpid_r>:
 80183d0:	f7f9 b8f7 	b.w	80115c2 <_getpid>

080183d4 <__swhatbuf_r>:
 80183d4:	b570      	push	{r4, r5, r6, lr}
 80183d6:	460c      	mov	r4, r1
 80183d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183dc:	2900      	cmp	r1, #0
 80183de:	b096      	sub	sp, #88	@ 0x58
 80183e0:	4615      	mov	r5, r2
 80183e2:	461e      	mov	r6, r3
 80183e4:	da0d      	bge.n	8018402 <__swhatbuf_r+0x2e>
 80183e6:	89a3      	ldrh	r3, [r4, #12]
 80183e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80183ec:	f04f 0100 	mov.w	r1, #0
 80183f0:	bf14      	ite	ne
 80183f2:	2340      	movne	r3, #64	@ 0x40
 80183f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80183f8:	2000      	movs	r0, #0
 80183fa:	6031      	str	r1, [r6, #0]
 80183fc:	602b      	str	r3, [r5, #0]
 80183fe:	b016      	add	sp, #88	@ 0x58
 8018400:	bd70      	pop	{r4, r5, r6, pc}
 8018402:	466a      	mov	r2, sp
 8018404:	f000 f848 	bl	8018498 <_fstat_r>
 8018408:	2800      	cmp	r0, #0
 801840a:	dbec      	blt.n	80183e6 <__swhatbuf_r+0x12>
 801840c:	9901      	ldr	r1, [sp, #4]
 801840e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018412:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018416:	4259      	negs	r1, r3
 8018418:	4159      	adcs	r1, r3
 801841a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801841e:	e7eb      	b.n	80183f8 <__swhatbuf_r+0x24>

08018420 <__smakebuf_r>:
 8018420:	898b      	ldrh	r3, [r1, #12]
 8018422:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018424:	079d      	lsls	r5, r3, #30
 8018426:	4606      	mov	r6, r0
 8018428:	460c      	mov	r4, r1
 801842a:	d507      	bpl.n	801843c <__smakebuf_r+0x1c>
 801842c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018430:	6023      	str	r3, [r4, #0]
 8018432:	6123      	str	r3, [r4, #16]
 8018434:	2301      	movs	r3, #1
 8018436:	6163      	str	r3, [r4, #20]
 8018438:	b003      	add	sp, #12
 801843a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801843c:	ab01      	add	r3, sp, #4
 801843e:	466a      	mov	r2, sp
 8018440:	f7ff ffc8 	bl	80183d4 <__swhatbuf_r>
 8018444:	9f00      	ldr	r7, [sp, #0]
 8018446:	4605      	mov	r5, r0
 8018448:	4639      	mov	r1, r7
 801844a:	4630      	mov	r0, r6
 801844c:	f7fd fbc0 	bl	8015bd0 <_malloc_r>
 8018450:	b948      	cbnz	r0, 8018466 <__smakebuf_r+0x46>
 8018452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018456:	059a      	lsls	r2, r3, #22
 8018458:	d4ee      	bmi.n	8018438 <__smakebuf_r+0x18>
 801845a:	f023 0303 	bic.w	r3, r3, #3
 801845e:	f043 0302 	orr.w	r3, r3, #2
 8018462:	81a3      	strh	r3, [r4, #12]
 8018464:	e7e2      	b.n	801842c <__smakebuf_r+0xc>
 8018466:	89a3      	ldrh	r3, [r4, #12]
 8018468:	6020      	str	r0, [r4, #0]
 801846a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801846e:	81a3      	strh	r3, [r4, #12]
 8018470:	9b01      	ldr	r3, [sp, #4]
 8018472:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018476:	b15b      	cbz	r3, 8018490 <__smakebuf_r+0x70>
 8018478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801847c:	4630      	mov	r0, r6
 801847e:	f000 f81d 	bl	80184bc <_isatty_r>
 8018482:	b128      	cbz	r0, 8018490 <__smakebuf_r+0x70>
 8018484:	89a3      	ldrh	r3, [r4, #12]
 8018486:	f023 0303 	bic.w	r3, r3, #3
 801848a:	f043 0301 	orr.w	r3, r3, #1
 801848e:	81a3      	strh	r3, [r4, #12]
 8018490:	89a3      	ldrh	r3, [r4, #12]
 8018492:	431d      	orrs	r5, r3
 8018494:	81a5      	strh	r5, [r4, #12]
 8018496:	e7cf      	b.n	8018438 <__smakebuf_r+0x18>

08018498 <_fstat_r>:
 8018498:	b538      	push	{r3, r4, r5, lr}
 801849a:	4d07      	ldr	r5, [pc, #28]	@ (80184b8 <_fstat_r+0x20>)
 801849c:	2300      	movs	r3, #0
 801849e:	4604      	mov	r4, r0
 80184a0:	4608      	mov	r0, r1
 80184a2:	4611      	mov	r1, r2
 80184a4:	602b      	str	r3, [r5, #0]
 80184a6:	f7f9 f8f4 	bl	8011692 <_fstat>
 80184aa:	1c43      	adds	r3, r0, #1
 80184ac:	d102      	bne.n	80184b4 <_fstat_r+0x1c>
 80184ae:	682b      	ldr	r3, [r5, #0]
 80184b0:	b103      	cbz	r3, 80184b4 <_fstat_r+0x1c>
 80184b2:	6023      	str	r3, [r4, #0]
 80184b4:	bd38      	pop	{r3, r4, r5, pc}
 80184b6:	bf00      	nop
 80184b8:	200003d0 	.word	0x200003d0

080184bc <_isatty_r>:
 80184bc:	b538      	push	{r3, r4, r5, lr}
 80184be:	4d06      	ldr	r5, [pc, #24]	@ (80184d8 <_isatty_r+0x1c>)
 80184c0:	2300      	movs	r3, #0
 80184c2:	4604      	mov	r4, r0
 80184c4:	4608      	mov	r0, r1
 80184c6:	602b      	str	r3, [r5, #0]
 80184c8:	f7f9 f8f3 	bl	80116b2 <_isatty>
 80184cc:	1c43      	adds	r3, r0, #1
 80184ce:	d102      	bne.n	80184d6 <_isatty_r+0x1a>
 80184d0:	682b      	ldr	r3, [r5, #0]
 80184d2:	b103      	cbz	r3, 80184d6 <_isatty_r+0x1a>
 80184d4:	6023      	str	r3, [r4, #0]
 80184d6:	bd38      	pop	{r3, r4, r5, pc}
 80184d8:	200003d0 	.word	0x200003d0

080184dc <_init>:
 80184dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184de:	bf00      	nop
 80184e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80184e2:	bc08      	pop	{r3}
 80184e4:	469e      	mov	lr, r3
 80184e6:	4770      	bx	lr

080184e8 <_fini>:
 80184e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184ea:	bf00      	nop
 80184ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80184ee:	bc08      	pop	{r3}
 80184f0:	469e      	mov	lr, r3
 80184f2:	4770      	bx	lr
